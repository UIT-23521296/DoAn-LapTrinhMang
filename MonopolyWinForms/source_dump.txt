# ==================================================
# Path: E:\Dai Hoc\Lap trinh mang\DoAn-LapTrinhMang\MonopolyWinForms
# Detected tech: csharp
# ==================================================

## DIRECTORY STRUCTURE
```
MonopolyWinForms/
├── .vs/
├── MonopolyWinForms/
│   ├── Assets/
│   │   ├── Images/
│   │   │   ├── Blue-hotel.png
│   │   │   ├── Blue-house1.png
│   │   │   ├── Blue-house2.png
│   │   │   ├── Blue-house3.png
│   │   │   ├── Blue-land.png
│   │   │   ├── Green-hotel.png
│   │   │   ├── Green-house1.png
│   │   │   ├── Green-house2.png
│   │   │   ├── Green-house3.png
│   │   │   ├── Green-land.png
│   │   │   ├── Red-hotel.png
│   │   │   ├── Red-house1.png
│   │   │   ├── Red-house2.png
│   │   │   ├── Red-house3.png
│   │   │   ├── Red-land.png
│   │   │   ├── Yellow-hotel.png
│   │   │   ├── Yellow-house1.png
│   │   │   ├── Yellow-house2.png
│   │   │   ├── Yellow-house3.png
│   │   │   ├── Yellow-land.png
│   │   │   ├── background.jpg
│   │   │   ├── bai_dau_xe.png
│   │   │   ├── ben_xe.png
│   │   │   ├── cty_dien.png
│   │   │   ├── cty_nuoc.png
│   │   │   ├── khi_van.png
│   │   │   ├── login_img.png
│   │   │   ├── player1.png
│   │   │   ├── player2.png
│   │   │   ├── player3.png
│   │   │   ├── player4.png
│   │   │   ├── police.png
│   │   │   └── ở_tù.png
│   │   ├── Sounds/
│   │   │   └── .gitkeep
│   │   └── Tiles.txt
│   ├── BuyLand_Home/
│   │   ├── BuyBus.Designer.cs
│   │   ├── BuyBus.cs
│   │   ├── BuyBus.resx
│   │   ├── BuyCompany.Designer.cs
│   │   ├── BuyCompany.cs
│   │   ├── BuyCompany.resx
│   │   ├── BuyHome-Land.Designer.cs
│   │   ├── BuyHome-Land.cs
│   │   └── BuyHome-Land.resx
│   ├── FormManage/
│   │   ├── FormDestroyHouse.Designer.cs
│   │   ├── FormDestroyHouse.cs
│   │   ├── FormDestroyHouse.resx
│   │   ├── FormSellProperty.Designer.cs
│   │   ├── FormSellProperty.cs
│   │   ├── FormSellProperty.resx
│   │   ├── GameResultForm.cs
│   │   └── GameResultForm.resx
│   ├── GameLogic/
│   │   ├── BankruptcyManager.cs
│   │   ├── Chatbox.cs
│   │   ├── CountdownClock.cs
│   │   ├── DiceRollHandler.cs
│   │   ├── GameBoard.cs
│   │   ├── InitializePlayerMarker.cs
│   │   ├── Monopoly.cs
│   │   ├── Player.cs
│   │   ├── Property.cs
│   │   ├── RentCalculator.cs
│   │   ├── TileActionHandler.cs
│   │   ├── Tiles.cs
│   │   ├── UpdatePlayerPanel.cs
│   │   └── UpdateTileDisplay.cs
│   ├── Home/
│   │   ├── Main_home.Designer.cs
│   │   ├── Main_home.cs
│   │   └── Main_home.resx
│   ├── Login_Signup/
│   │   ├── Forgot.Designer.cs
│   │   ├── Forgot.cs
│   │   ├── Forgot.resx
│   │   ├── Login.Designer.cs
│   │   ├── Login.cs
│   │   ├── Login.resx
│   │   ├── Main_login_signup.Designer.cs
│   │   ├── Main_login_signup.cs
│   │   ├── Main_login_signup.resx
│   │   ├── Session.cs
│   │   ├── Signup.Designer.cs
│   │   ├── Signup.cs
│   │   └── Signup.resx
│   ├── Play_area/
│   │   ├── Draw_playarea.Designer.cs
│   │   ├── Draw_playarea.cs
│   │   └── Draw_playarea.resx
│   ├── Properties/
│   │   ├── Resources.Designer.cs
│   │   └── Resources.resx
│   ├── Room/
│   │   ├── Create_Room.Designer.cs
│   │   ├── Create_Room.cs
│   │   ├── Create_Room.resx
│   │   ├── JoinRoom.Designer.cs
│   │   ├── JoinRoom.cs
│   │   ├── JoinRoom.resx
│   │   ├── RoomInfo.cs
│   │   ├── Waiting_Room_Client.Designer.cs
│   │   ├── Waiting_Room_Client.cs
│   │   ├── Waiting_Room_Client.resx
│   │   ├── Waiting_Room_Host.Designer.cs
│   │   ├── Waiting_Room_Host.cs
│   │   └── Waiting_Room_Host.resx
│   ├── Services/
│   │   ├── FirebaseService.cs
│   │   ├── GameManager.cs
│   │   ├── GameState.cs
│   │   └── SessionManager.cs
│   ├── bin/
│   ├── obj/
│   ├── .gitignore
│   ├── App.config
│   ├── Co_hoi.txt
│   ├── MainForm.Designer.cs
│   ├── MainForm.cs
│   ├── MainForm.resx
│   ├── MonopolyWinForms.csproj
│   ├── MonopolyWinForms.csproj.user
│   ├── MonopolyWinForms.sln
│   ├── Program.cs
│   └── Tiles.txt
├── MonopolyWinForms.sln
└── source_dump.txt
```

## FILE CONTENTS

### MonopolyWinForms\MainForm.cs
```cs
﻿using Firebase.Database;
using MonopolyWinForms.FormManage;
using MonopolyWinForms.GameLogic;
using MonopolyWinForms.Services;
using MonopolyWinForms.Login_Signup;
using MonopolyWinForms.Room;
using Newtonsoft.Json;
using System.Threading.Tasks;
namespace MonopolyWinForms
{
    public partial class MainForm : Form
    {
        //Khởi tạo
        public Panel[] panels;
        private Label lblCurrentTurn;
        public int currentPlayerIndex = 1;
        
        private Chatbox? chatbox;
        private BankruptcyManager BankManager;
        private CountdownClock? countdown;
        private InitializePlayerMarker Initialize;
        public Monopoly monopoly;
        public List<Player> players;        
        private RentCalculator rentCalculator;
        private TileActionHandler? Action;
        public List<Tile> tiles;
        private UpdateTileDisplay UpdateTile;
        private UpdatePlayerPanel UpdatePlayer;

        public Random random = new Random();
        public Dictionary<int, Panel> playerMarkers = new Dictionary<int, Panel>();
        public readonly Dictionary<string, Color> monopolyColors = new()
        {
           ["1"] = Color.Violet,
           ["2"] = Color.Yellow,
           ["3"] = Color.DodgerBlue,
           ["4"] = Color.LightGreen,
           ["5"] = Color.Red,
           ["6"] = Color.Pink,
           ["7"] = Color.Purple,
           ["8"] = Color.Gray
        };
        //Chatbox
        private void InitializeChatBox(){
            chatbox = new Chatbox(players[currentPlayerIndex]);
            chatbox.Location = new Point(1230, 670);
            chatbox.OnSendMessage += HandleChatMessage;
            this.Controls.Add(chatbox);
        }

        private void InitializeTurnLabel()
        {
            lblCurrentTurn = new Label
            {
                Name = "lblCurrentTurn",
                AutoSize = true,
                Font = new Font("Arial", 14, FontStyle.Bold),
                Location = new Point(1230, 100), 
                Text = "Lượt chơi: "
            };
            this.Controls.Add(lblCurrentTurn);
        }
        private async void HandleChatMessage(string senderName, string message)
        {
            try
            {
                // Tạo đối tượng chat message
                var chatMessage = new
                {
                    SenderName = senderName,
                    Message = message,
                    Timestamp = DateTime.UtcNow
                };

                // Gửi tin nhắn lên Firebase
                await GameManager.SendChatMessage(GameManager.CurrentRoomId, chatMessage);
            }
            catch (Exception ex)
            {
                AddToGameLog($"Lỗi gửi tin nhắn: {ex.Message}", LogType.Error);
            }
        }
        private async void GameOver()
        {
            try
            {
                MessageBox.Show("⏰ Hết thời gian! Trò chơi kết thúc!", "Thông báo");
                
                // Hiển thị kết quả game
                var resultForm = new GameResultForm(players, tiles);
                resultForm.ShowDialog();

                // Gửi thông báo kết thúc game cho tất cả người chơi
                await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                {
                    SenderName = "Hệ thống",
                    Message = "Trò chơi đã kết thúc!",
                    Timestamp = DateTime.UtcNow
                });

                // Dọn dẹp dữ liệu game
                await GameManager.CleanupGameData(GameManager.CurrentRoomId);
                
                // Đóng form
                Application.Exit();
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in GameOver: {ex.Message}\n");
                Application.Exit();
            }
        }
        public MainForm()
        {
            InitializeComponent(); 
            GameManager.OnGameStateUpdated += HandleGameStateUpdate;
            GameManager.OnChatMessageReceived += HandleChatMessageReceived;
            this.StartPosition = FormStartPosition.CenterScreen;
            panels = new Panel[] {
           panel1, panel2, panel3, panel4, panel5,
           panel6, panel7, panel8, panel9, panel10,
           panel11, panel12, panel13, panel14, panel15,
           panel16, panel17, panel18, panel19, panel20,
           panel21, panel22, panel23, panel24, panel25,
           panel26, panel27, panel28, panel29, panel30,
           panel31, panel32, panel33, panel34, panel35,
           panel36, panel37, panel38, panel39, panel40 
            };
            players = new List<Player>();
            tiles = Tile.LoadTilesFromFile();
            monopoly = new Monopoly(tiles);
            UpdatePlayer = new UpdatePlayerPanel();
            UpdateTile = new UpdateTileDisplay(panels, tiles, this, monopoly, players);
            UpdatePlayer = new UpdatePlayerPanel();
            Initialize = new InitializePlayerMarker(panels, playerMarkers, this);
            Action = new TileActionHandler(players, tiles, panels, currentPlayerIndex, monopoly, this, random, playerMarkers);
            rentCalculator = new RentCalculator(monopoly);
            BankManager = new BankruptcyManager(players, tiles, panels, playerMarkers, this, currentPlayerIndex);
            
            // Thêm event handler cho FormClosing
            this.FormClosing += MainForm_FormClosing;

            // Đăng ký event handler cho sự kiện người chơi thoát
            GameManager.OnPlayerLeft += HandlePlayerLeft;
        }

        private void HandleGameStateUpdate(GameState gameState)
        {
            if (InvokeRequired)
            {
                Invoke(new Action(() => UpdateGameState(gameState)));
            }
            else
            {
                UpdateGameState(gameState);
            }
        }
        public async Task UpdateGameState(GameState gameState)
        {
            //gameState = await GameManager.GetLatestGameState();
            File.AppendAllText("log.txt", $"Tôi là {Session.UserName} thấy người chơi " +
                $"{players[currentPlayerIndex]} đi tới ô {players[currentPlayerIndex].TileIndex}\n");
            try
            {
                // Cập nhật currentPlayerIndex
                if (currentPlayerIndex != gameState.CurrentPlayerIndex)
                {
                    currentPlayerIndex = gameState.CurrentPlayerIndex;
                    UpdateTurnDisplay();
                    chatbox?.UpdatePlayer(players[currentPlayerIndex]);
                    if(Action != null) Action.UpdateCurrentPlayerIndex(currentPlayerIndex);
                }

                // Cập nhật thông tin cho tất cả người chơi
                for (int i = 0; i < players.Count; i++)
                {
                    var remotePlayer = gameState.Players[i];
                    var localPlayer = players[i];
                    
                    // Kiểm tra xem có thay đổi không
                    if (localPlayer.Money != remotePlayer.Money ||
                        localPlayer.IsInJail != remotePlayer.IsInJail ||
                        localPlayer.IsBankrupt != remotePlayer.IsBankrupt ||
                        localPlayer.OutPrison != remotePlayer.OutPrison ||
                        localPlayer.ReduceHalfMoney != remotePlayer.ReduceHalfMoney ||
                        localPlayer.DoubleMoney != remotePlayer.DoubleMoney ||
                        localPlayer.DoubleDices != remotePlayer.DoubleDices ||
                        localPlayer.JailTurnCount != remotePlayer.JailTurnCount)
                    {
                        // Cập nhật thông tin người chơi
                        localPlayer.Money = remotePlayer.Money;
                        localPlayer.IsInJail = remotePlayer.IsInJail;
                        localPlayer.IsBankrupt = remotePlayer.IsBankrupt;
                        localPlayer.OutPrison = remotePlayer.OutPrison;
                        localPlayer.ReduceHalfMoney = remotePlayer.ReduceHalfMoney;
                        localPlayer.DoubleMoney = remotePlayer.DoubleMoney;
                        localPlayer.DoubleDices = remotePlayer.DoubleDices;
                        localPlayer.JailTurnCount = remotePlayer.JailTurnCount;

                        // Cập nhật UI của người chơi có thay đổi
                        UpdatePlayer.UpdatePlayerPanelUI(GetPlayerPanel(localPlayer.ID), localPlayer);
                    }

                    // Cập nhật vị trí người chơi nếu có thay đổi
                    if (localPlayer.TileIndex != remotePlayer.TileIndex)
                    {
                        // Tính số bước cần di chuyển
                        int steps = (remotePlayer.TileIndex - localPlayer.TileIndex + 40) % 40;
                        if (steps > 0)
                        {
                            // Di chuyển từng bước cho tất cả người chơi
                            _ = MovePlayerStepByStep(localPlayer, steps, 40).ContinueWith(_ => {
                                // Chỉ cập nhật TileIndex sau khi hoàn thành animation
                                localPlayer.TileIndex = remotePlayer.TileIndex;
                            });
                        }
                    }
                }

                // Cập nhật tiles có thay đổi
                for (int i = 0; i < tiles.Count; i++)
                {
                    var remoteTile = gameState.Tiles[i];
                    var localTile = tiles[i];
                    
                    // Kiểm tra xem có thay đổi không
                    if (localTile.PlayerId != remoteTile.PlayerId ||
                        localTile.LandPrice != remoteTile.LandPrice ||
                        localTile.HousePrice != remoteTile.HousePrice ||
                        localTile.HotelPrice != remoteTile.HotelPrice ||
                        localTile.Level != remoteTile.Level ||
                        localTile.RentPrice != remoteTile.RentPrice ||
                        localTile.Monopoly != remoteTile.Monopoly)
                    {
                        // Cập nhật thông tin ô đất
                        localTile.PlayerId = remoteTile.PlayerId;
                        localTile.LandPrice = remoteTile.LandPrice;
                        localTile.HousePrice = remoteTile.HousePrice; 
                        localTile.HotelPrice = remoteTile.HotelPrice;
                        localTile.Level = remoteTile.Level;
                        localTile.RentPrice = remoteTile.RentPrice;
                        localTile.Monopoly = remoteTile.Monopoly;

                        // Chỉ cập nhật UI của ô đất có thay đổi
                        UpdateTile.UpdateTileDisplayUI(i, players[currentPlayerIndex]);
                    }
                }
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error updating game state: {ex.Message}\n");
            }
        }


        private async void MainForm_Load(object sender, EventArgs e)
        {
            InitializeTurnLabel();
            countdown = new CountdownClock(panelTimer, GameOver);
            int indexPanel = 0;
            int indexPlayer = 1;
            List<Panel> playerPanels = new List<Panel> { panel41, panel42, panel43, panel44 };
            
            foreach (string playerName in GameManager.Players)
            {
                Player player = new Player(indexPlayer, 2000, playerName);
                if (playerName == Session.UserName) // Nếu là người chơi hiện tại
                {
                    Session.PlayerInGameId = indexPlayer;
                    Session.Color = GetPlayerColor(indexPlayer - 1);
                }
                players.Add(player);
                UpdatePlayer.UpdatePlayerPanelUI(playerPanels[indexPanel++], player);
                indexPlayer++;
            }

            for (int i = 0; i < panels.Length && i < tiles.Count; i++){
               panels[i].Tag = tiles[i];
               UpdateTile.UpdateTileDisplayUI(i, players[currentPlayerIndex]);
            }
            foreach (var player in players){
                player.TileIndex = 0;
                Initialize.InitializePlayerMarkerUI(player);
            }
            InitializeChatBox();
            UpdateTurnDisplay();
            try 
            {
                GameState gameStates = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                await GameManager.UpdateGameState(gameStates);
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in MainForm_Load: {ex.Message}\n");
            }

            //_ = Task.Run(async () =>
            //{
            //    await Task.Delay(3000);
            //    countdown.Start(GameManager.PlayTime);
            //});

            countdown.Start(GameManager.PlayTime);
        }
        private async void button1_Click(object sender, EventArgs e){
            var handler = new DiceRollHandler(players, panels, this, currentPlayerIndex, tiles);
            await handler.RollDiceAndMoveAsync();
        }
        // VÙNG GỌI HÀM
        public void NextTurn(){
            currentPlayerIndex = (currentPlayerIndex + 1) % players.Count;
            UpdateTurnDisplay();
            chatbox!.UpdatePlayer(players[currentPlayerIndex]);
            if(Action != null) Action.UpdateCurrentPlayerIndex(currentPlayerIndex);
            //button1.Enabled = true;

            var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
            GameManager.UpdateGameState(gameState);
        }

        private void UpdateTurnDisplay()
        {
            if (lblCurrentTurn != null)
            {
                Player currentPlayer = players[currentPlayerIndex];
                lblCurrentTurn.Text = $"Lượt chơi: {currentPlayer.Name}";
                
                // Có thể thêm hiệu ứng hoặc màu sắc để làm nổi bật
                lblCurrentTurn.ForeColor = GetPlayerColor(currentPlayerIndex);

                button1.Enabled = (Session.PlayerInGameId == currentPlayer.ID);

                //Thông báo lượt chơi
                if (Session.PlayerInGameId == currentPlayer.ID)
                {
                    AddToGameLog($"Đến lượt của bạn!", LogType.Notification);
                }
                else
                {
                    AddToGameLog($"Đến lượt của {currentPlayer.Name}", LogType.System);
                }
            }
        }

        private Color GetPlayerColor(int playerIndex)
        {
            // Màu sắc tương ứng với từng người chơi
            return playerIndex switch
            {
                0 => Color.Blue,
                1 => Color.YellowGreen,
                2 => Color.Red,
                3 => Color.Green,
                _ => Color.Black
            };
        }
        public Panel GetPlayerPanel(int playerId){
            return playerId switch
            {
                1 => panel41,
                2 => panel42,
                3 => panel43,
                4 => panel44,
                _ => panel1
            };
        }
        public void UpdateTileDisplay(int tileIndex, Player player)
        { 
            UpdateTile.UpdateTileDisplayUI(tileIndex, player);

            if (Session.PlayerInGameId != player.ID)
            {
                var tile = tiles[tileIndex];
                if (tile.Level > 0)
                {
                    string buildingType = tile.Level == 5 ? "khách sạn" : "nhà";
                    AddToGameLog($"{player.Name} đã xây {buildingType} trên {tile.Name}", LogType.System);
                }
            }
        }           
        public void UpdatePlayerPanel(Player player){ UpdatePlayer.UpdatePlayerPanelUI(GetPlayerPanel(player.ID), player); }
        public void DisableRollButton(){ button1.Enabled = false; }
        public int CalculateRent(Tile tile, int playerId){ return rentCalculator.CalculateRent(tile , playerId); }
        public int CalculatePlayerAssets(Player player){ return BankManager.CalculatePlayerAssets(player); }
        public void UpdateCompanyRent(int playerId){ UpdateTile.UpdateCompanyRent(playerId); }
        public void UpdateBusStationRent(int playerId){ UpdateTile.UpdateBusStationRent(playerId); }
        public void SubtractMoney (int money, Player player)
        {
            Property Money = new Property(player,this);
            Money.SubtractMoney(money);


            //Ghi log người khác
            if (Session.PlayerInGameId != player.ID)
            {
                AddToGameLog($"{player.Name} đã trả {money}$", LogType.System);
            }
        }
        public void AddMoney(int money, Player player)
        {
            Property Money = new Property(player,this);
            Money.AddMoney(money);

            //Ghi log cho người khác
            if (Session.PlayerInGameId != player.ID)
            {
                AddToGameLog($"{player.Name} đã nhận {money}$", LogType.System);
            }
        }
        public void ShowTileActionForm(Tile tile, Player currentPlayer)
        { 
            if (Action != null)
            {
                if (Session.PlayerInGameId == currentPlayer.ID)
                {
                    Action.ShowTileActionForm(tile, currentPlayer);
                }
                else
                {
                    string actionMessage = GetTileActionMessage(tile, currentPlayer);
                    AddToGameLog(actionMessage, LogType.System);
                }
            }
        }
        public void UpdatePlayerMarkerPosition(Player player, int newIndex){ Initialize.UpdatePlayerMarkerPosition(player,newIndex); }
        public void CheckPlayerBankruptcy(Player player){ BankManager.CheckPlayerBankruptcy(player); }
        public void ForceSellAssets(Player player){ BankManager.ForceSellAssets(player); }
        public void HandleStart(Player player){ Action?.HandleStart(player); }
        public async Task MovePlayerStepByStep(Player player, int steps, int totalTiles){ await Initialize.MovePlayerStepByStep(player, steps, totalTiles); }
        public Image GetHouseImage(int level, Player player, Tile tile, List<Player> players){return UpdateTile.GetHouseImage(level, player, players, tile);
        }

        public void AddToGameLog(string message, LogType type = LogType.System)
        {
            if (InvokeRequired)
            {
                Invoke(new Action(() => AddToGameLog(message, type)));
                return;
            }

            switch (type)
            {
                case LogType.System:
                    chatbox?.AddSystemMessage(message);
                    break;
                case LogType.Notification:
                    chatbox?.AddNotificationMessage(message);
                    break;
                case LogType.Warning:
                    chatbox?.AddWarningMessage(message);
                    break;
                case LogType.Error:
                    chatbox?.AddErrorMessage(message);
                    break;
            }
        }

        // Enum để phân loại log
        public enum LogType
        {
            System,
            Notification,
            Warning,
            Error
        }

        // Thêm hàm để nhận tin nhắn từ Firebase
        public void HandleChatMessageReceived(string senderName, string message)
        {
            if (InvokeRequired)
            {
                Invoke(new Action(() => HandleChatMessageReceived(senderName, message)));
                return;
            }

            chatbox?.ReceiveMessage(senderName, message);
        }

        //Xử lý ghi log cho người chơi khác liên quan đến ô đất
        private string GetTileActionMessage(Tile tile, Player player)
        {
            // Kiểm tra loại ô đất dựa vào Monopoly
            switch (tile.Monopoly)
            {
                case "0": // Ô đặc biệt
                    switch (tile.Name)
                    {
                        case "Thuế thu nhập":
                        case "Thuế đặc biệt":
                            return $"{player.Name} phải đóng thuế {tile.LandPrice}$";
                        case "Nhà tù":
                            return $"{player.Name} đang ở trong tù";
                        case "Ô bắt đầu":
                            return $"{player.Name} đi qua ô Start và nhận 200$";
                        case "Khí vận":
                        case "Cơ hội":
                            return "";
                        case "Đi thẳng vào tù":
                            return $"{player.Name} bị vào tù";
                        default:
                            return $"{player.Name} đã đến {tile.Name}";
                    }
                case "9": // Bến xe
                    if (tile.PlayerId.HasValue && tile.PlayerId.Value > 0)
                    {
                        var owner = players.FirstOrDefault(p => p.ID == tile.PlayerId.Value);
                        if (owner != null)
                        {
                            return $"{player.Name} phải trả tiền thuê {tile.RentPrice}$ cho {owner.Name} tại bến xe {tile.Name}";
                        }
                    }
                    return $"{player.Name} đã đến bến xe {tile.Name}";
                case "10": // Công ty
                    if (tile.PlayerId.HasValue && tile.PlayerId.Value > 0)
                    {
                        var owner = players.FirstOrDefault(p => p.ID == tile.PlayerId.Value);
                        if (owner != null)
                        {
                            return $"{player.Name} phải trả tiền thuê {tile.RentPrice}$ cho {owner.Name} tại công ty {tile.Name}";
                        }
                    }
                    return $"{player.Name} đã đến công ty {tile.Name}";
                default: // Ô đất thường
                    if (tile.PlayerId.HasValue)
                    {
                        if (tile.PlayerId.Value == player.ID)
                        {
                            return $"{player.Name} đã sở hữu {tile.Name}";
                        }
                        else if (tile.PlayerId.Value > 0)
                        {
                            var owner = players.FirstOrDefault(p => p.ID == tile.PlayerId.Value);
                            if (owner != null)
                            {
                                string buildingInfo = tile.Level > 0 
                                    ? $" (có {tile.Level} {(tile.Level == 5 ? "khách sạn" : "nhà")})" 
                                    : "";
                                return $"{player.Name} phải trả tiền thuê {tile.RentPrice}$ cho {owner.Name} tại {tile.Name}{buildingInfo}";
                            }
                        }
                    }
                    else if (tile.LandPrice > 0)
                    {
                        return $"{player.Name} có thể mua {tile.Name} với giá {tile.LandPrice}$";
                    }
                    return $"{player.Name} đã đến {tile.Name}";
            }
        }

        private async void MainForm_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                // Nếu game đang diễn ra
                if (GameManager.IsGameStarted)
                {
                    // Hiển thị xác nhận
                    var result = MessageBox.Show(
                        "Bạn có chắc muốn thoát game? Điều này sẽ kết thúc game cho tất cả người chơi.",
                        "Xác nhận thoát",
                        MessageBoxButtons.YesNo,
                        MessageBoxIcon.Warning
                    );

                    if (result == DialogResult.No)
                    {
                        e.Cancel = true;
                        return;
                    }

                    // Thông báo cho tất cả người chơi và đợi một chút để đảm bảo thông báo được gửi
                    await GameManager.NotifyPlayerLeft(GameManager.CurrentRoomId, Session.UserName);
                    await Task.Delay(500); // Đợi 500ms để đảm bảo thông báo được gửi

                    // Đóng form và quay về màn hình danh sách phòng
                    this.Hide();
                    var joinRoomForm = new JoinRoom();
                    joinRoomForm.Show();
                    this.Close();
                    return; // Thêm return để đảm bảo không thực thi code phía dưới
                }
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in MainForm_FormClosing: {ex.Message}\n");
            }
        }

        private void HandlePlayerLeft(string playerName)
        {
            if (InvokeRequired)
            {
                Invoke(new Action(() => HandlePlayerLeft(playerName)));
                return;
            }

            // Kiểm tra xem form đã đóng chưa
            if (this.IsDisposed || !this.IsHandleCreated)
                return;

            // Hiển thị thông báo
            MessageBox.Show(
                $"{playerName} đã thoát game. Trò chơi kết thúc!",
                "Thông báo",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information
            );

            // Dừng tất cả timer và event
            if (countdown != null)
            {
                countdown.Stop();
            }

            // Đóng form và quay về màn hình danh sách phòng
            if (!this.IsDisposed)
            {
                this.Hide();
                var joinRoomForm = new JoinRoom();
                joinRoomForm.Show();
                this.Close();
            }
        }

        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            base.OnFormClosed(e);
            
            // Hủy đăng ký event khi form đóng
            GameManager.OnPlayerLeft -= HandlePlayerLeft;
            
            // Đảm bảo tất cả timer và event được dọn dẹp
            if (countdown != null)
            {
                countdown.Stop();
            }
                
            // Reset session
            Session.LeaveRoom();
        }
    }
}
```

### MonopolyWinForms\MainForm.Designer.cs
```cs
﻿namespace MonopolyWinForms
{
    partial class MainForm
    {
        /// <summary>
        ///  Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        ///  Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        ///  Required method for Designer support - do not modify
        ///  the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            panel1 = new Panel();
            panel2 = new Panel();
            panel3 = new Panel();
            panel4 = new Panel();
            panel5 = new Panel();
            panel6 = new Panel();
            panel7 = new Panel();
            panel8 = new Panel();
            panel9 = new Panel();
            panel10 = new Panel();
            panel11 = new Panel();
            panel12 = new Panel();
            panel13 = new Panel();
            panel14 = new Panel();
            panel15 = new Panel();
            panel16 = new Panel();
            panel17 = new Panel();
            panel18 = new Panel();
            panel19 = new Panel();
            panel20 = new Panel();
            panel21 = new Panel();
            panel22 = new Panel();
            panel23 = new Panel();
            panel24 = new Panel();
            panel25 = new Panel();
            panel26 = new Panel();
            panel27 = new Panel();
            panel28 = new Panel();
            panel29 = new Panel();
            panel30 = new Panel();
            panel31 = new Panel();
            panel32 = new Panel();
            panel33 = new Panel();
            panel34 = new Panel();
            panel35 = new Panel();
            panel36 = new Panel();
            panel37 = new Panel();
            panel38 = new Panel();
            panel39 = new Panel();
            panel40 = new Panel();
            panel41 = new Panel();
            panel42 = new Panel();
            panel43 = new Panel();
            panel44 = new Panel();
            button1 = new Button();
            panelTimer = new Panel();
            SuspendLayout();
            // 
            // panel1
            // 
            panel1.BorderStyle = BorderStyle.FixedSingle;
            panel1.Location = new Point(10, 10);
            panel1.Margin = new Padding(2);
            panel1.Name = "panel1";
            panel1.Size = new Size(120, 120);
            panel1.TabIndex = 0;
            // 
            // panel2
            // 
            panel2.BorderStyle = BorderStyle.FixedSingle;
            panel2.Location = new Point(134, 10);
            panel2.Margin = new Padding(2);
            panel2.Name = "panel2";
            panel2.Size = new Size(72, 120);
            panel2.TabIndex = 1;
            // 
            // panel3
            // 
            panel3.BorderStyle = BorderStyle.FixedSingle;
            panel3.Location = new Point(211, 10);
            panel3.Margin = new Padding(2);
            panel3.Name = "panel3";
            panel3.Size = new Size(72, 120);
            panel3.TabIndex = 2;
            // 
            // panel4
            // 
            panel4.BorderStyle = BorderStyle.FixedSingle;
            panel4.Location = new Point(288, 10);
            panel4.Margin = new Padding(2);
            panel4.Name = "panel4";
            panel4.Size = new Size(72, 120);
            panel4.TabIndex = 3;
            // 
            // panel5
            // 
            panel5.BorderStyle = BorderStyle.FixedSingle;
            panel5.Location = new Point(365, 10);
            panel5.Margin = new Padding(2);
            panel5.Name = "panel5";
            panel5.Size = new Size(72, 120);
            panel5.TabIndex = 4;
            // 
            // panel6
            // 
            panel6.BorderStyle = BorderStyle.FixedSingle;
            panel6.Location = new Point(442, 10);
            panel6.Margin = new Padding(2);
            panel6.Name = "panel6";
            panel6.Size = new Size(72, 120);
            panel6.TabIndex = 5;
            // 
            // panel7
            // 
            panel7.BorderStyle = BorderStyle.FixedSingle;
            panel7.Location = new Point(518, 10);
            panel7.Margin = new Padding(2);
            panel7.Name = "panel7";
            panel7.Size = new Size(72, 120);
            panel7.TabIndex = 6;
            // 
            // panel8
            // 
            panel8.BorderStyle = BorderStyle.FixedSingle;
            panel8.Location = new Point(595, 10);
            panel8.Margin = new Padding(2);
            panel8.Name = "panel8";
            panel8.Size = new Size(72, 120);
            panel8.TabIndex = 7;
            // 
            // panel9
            // 
            panel9.BorderStyle = BorderStyle.FixedSingle;
            panel9.Location = new Point(672, 10);
            panel9.Margin = new Padding(2);
            panel9.Name = "panel9";
            panel9.Size = new Size(72, 120);
            panel9.TabIndex = 8;
            // 
            // panel10
            // 
            panel10.BorderStyle = BorderStyle.FixedSingle;
            panel10.Location = new Point(749, 10);
            panel10.Margin = new Padding(2);
            panel10.Name = "panel10";
            panel10.Size = new Size(72, 120);
            panel10.TabIndex = 9;
            // 
            // panel11
            // 
            panel11.BorderStyle = BorderStyle.FixedSingle;
            panel11.Location = new Point(826, 10);
            panel11.Margin = new Padding(2);
            panel11.Name = "panel11";
            panel11.Size = new Size(120, 120);
            panel11.TabIndex = 10;
            // 
            // panel12
            // 
            panel12.BorderStyle = BorderStyle.FixedSingle;
            panel12.Location = new Point(826, 134);
            panel12.Margin = new Padding(2);
            panel12.Name = "panel12";
            panel12.Size = new Size(120, 72);
            panel12.TabIndex = 11;
            // 
            // panel13
            // 
            panel13.BorderStyle = BorderStyle.FixedSingle;
            panel13.Location = new Point(826, 211);
            panel13.Margin = new Padding(2);
            panel13.Name = "panel13";
            panel13.Size = new Size(120, 72);
            panel13.TabIndex = 12;
            // 
            // panel14
            // 
            panel14.BorderStyle = BorderStyle.FixedSingle;
            panel14.Location = new Point(826, 288);
            panel14.Margin = new Padding(2);
            panel14.Name = "panel14";
            panel14.Size = new Size(120, 72);
            panel14.TabIndex = 13;
            // 
            // panel15
            // 
            panel15.BorderStyle = BorderStyle.FixedSingle;
            panel15.Location = new Point(826, 365);
            panel15.Margin = new Padding(2);
            panel15.Name = "panel15";
            panel15.Size = new Size(120, 72);
            panel15.TabIndex = 14;
            // 
            // panel16
            // 
            panel16.BorderStyle = BorderStyle.FixedSingle;
            panel16.Location = new Point(826, 442);
            panel16.Margin = new Padding(2);
            panel16.Name = "panel16";
            panel16.Size = new Size(120, 72);
            panel16.TabIndex = 15;
            // 
            // panel17
            // 
            panel17.BorderStyle = BorderStyle.FixedSingle;
            panel17.Location = new Point(826, 518);
            panel17.Margin = new Padding(2);
            panel17.Name = "panel17";
            panel17.Size = new Size(120, 72);
            panel17.TabIndex = 16;
            // 
            // panel18
            // 
            panel18.BorderStyle = BorderStyle.FixedSingle;
            panel18.Location = new Point(826, 595);
            panel18.Margin = new Padding(2);
            panel18.Name = "panel18";
            panel18.Size = new Size(120, 72);
            panel18.TabIndex = 17;
            // 
            // panel19
            // 
            panel19.BorderStyle = BorderStyle.FixedSingle;
            panel19.Location = new Point(826, 672);
            panel19.Margin = new Padding(2);
            panel19.Name = "panel19";
            panel19.Size = new Size(120, 72);
            panel19.TabIndex = 18;
            // 
            // panel20
            // 
            panel20.BorderStyle = BorderStyle.FixedSingle;
            panel20.Location = new Point(826, 749);
            panel20.Margin = new Padding(2);
            panel20.Name = "panel20";
            panel20.Size = new Size(120, 72);
            panel20.TabIndex = 19;
            // 
            // panel21
            // 
            panel21.BorderStyle = BorderStyle.FixedSingle;
            panel21.Location = new Point(826, 826);
            panel21.Margin = new Padding(2);
            panel21.Name = "panel21";
            panel21.Size = new Size(120, 120);
            panel21.TabIndex = 20;
            // 
            // panel22
            // 
            panel22.BorderStyle = BorderStyle.FixedSingle;
            panel22.Location = new Point(749, 826);
            panel22.Margin = new Padding(2);
            panel22.Name = "panel22";
            panel22.Size = new Size(72, 120);
            panel22.TabIndex = 21;
            // 
            // panel23
            // 
            panel23.BorderStyle = BorderStyle.FixedSingle;
            panel23.Location = new Point(672, 826);
            panel23.Margin = new Padding(2);
            panel23.Name = "panel23";
            panel23.Size = new Size(72, 120);
            panel23.TabIndex = 22;
            // 
            // panel24
            // 
            panel24.BorderStyle = BorderStyle.FixedSingle;
            panel24.Location = new Point(595, 826);
            panel24.Margin = new Padding(2);
            panel24.Name = "panel24";
            panel24.Size = new Size(72, 120);
            panel24.TabIndex = 23;
            // 
            // panel25
            // 
            panel25.BorderStyle = BorderStyle.FixedSingle;
            panel25.Location = new Point(518, 826);
            panel25.Margin = new Padding(2);
            panel25.Name = "panel25";
            panel25.Size = new Size(72, 120);
            panel25.TabIndex = 24;
            // 
            // panel26
            // 
            panel26.BorderStyle = BorderStyle.FixedSingle;
            panel26.Location = new Point(442, 826);
            panel26.Margin = new Padding(2);
            panel26.Name = "panel26";
            panel26.Size = new Size(72, 120);
            panel26.TabIndex = 25;
            // 
            // panel27
            // 
            panel27.BorderStyle = BorderStyle.FixedSingle;
            panel27.Location = new Point(365, 826);
            panel27.Margin = new Padding(2);
            panel27.Name = "panel27";
            panel27.Size = new Size(72, 120);
            panel27.TabIndex = 26;
            // 
            // panel28
            // 
            panel28.BorderStyle = BorderStyle.FixedSingle;
            panel28.Location = new Point(288, 826);
            panel28.Margin = new Padding(2);
            panel28.Name = "panel28";
            panel28.Size = new Size(72, 120);
            panel28.TabIndex = 27;
            // 
            // panel29
            // 
            panel29.BorderStyle = BorderStyle.FixedSingle;
            panel29.Location = new Point(211, 826);
            panel29.Margin = new Padding(2);
            panel29.Name = "panel29";
            panel29.Size = new Size(72, 120);
            panel29.TabIndex = 28;
            // 
            // panel30
            // 
            panel30.BorderStyle = BorderStyle.FixedSingle;
            panel30.Location = new Point(134, 826);
            panel30.Margin = new Padding(2);
            panel30.Name = "panel30";
            panel30.Size = new Size(72, 120);
            panel30.TabIndex = 29;
            // 
            // panel31
            // 
            panel31.BorderStyle = BorderStyle.FixedSingle;
            panel31.Location = new Point(10, 826);
            panel31.Margin = new Padding(2);
            panel31.Name = "panel31";
            panel31.Size = new Size(120, 120);
            panel31.TabIndex = 30;
            // 
            // panel32
            // 
            panel32.BorderStyle = BorderStyle.FixedSingle;
            panel32.Location = new Point(10, 749);
            panel32.Margin = new Padding(2);
            panel32.Name = "panel32";
            panel32.Size = new Size(120, 72);
            panel32.TabIndex = 31;
            // 
            // panel33
            // 
            panel33.BorderStyle = BorderStyle.FixedSingle;
            panel33.Location = new Point(10, 672);
            panel33.Margin = new Padding(2);
            panel33.Name = "panel33";
            panel33.Size = new Size(120, 72);
            panel33.TabIndex = 32;
            // 
            // panel34
            // 
            panel34.BorderStyle = BorderStyle.FixedSingle;
            panel34.Location = new Point(10, 595);
            panel34.Margin = new Padding(2);
            panel34.Name = "panel34";
            panel34.Size = new Size(120, 72);
            panel34.TabIndex = 33;
            // 
            // panel35
            // 
            panel35.BorderStyle = BorderStyle.FixedSingle;
            panel35.Location = new Point(10, 518);
            panel35.Margin = new Padding(2);
            panel35.Name = "panel35";
            panel35.Size = new Size(120, 72);
            panel35.TabIndex = 34;
            // 
            // panel36
            // 
            panel36.BorderStyle = BorderStyle.FixedSingle;
            panel36.Location = new Point(10, 442);
            panel36.Margin = new Padding(2);
            panel36.Name = "panel36";
            panel36.Size = new Size(120, 72);
            panel36.TabIndex = 35;
            // 
            // panel37
            // 
            panel37.BorderStyle = BorderStyle.FixedSingle;
            panel37.Location = new Point(10, 365);
            panel37.Margin = new Padding(2);
            panel37.Name = "panel37";
            panel37.Size = new Size(120, 72);
            panel37.TabIndex = 36;
            // 
            // panel38
            // 
            panel38.BorderStyle = BorderStyle.FixedSingle;
            panel38.Location = new Point(10, 288);
            panel38.Margin = new Padding(2);
            panel38.Name = "panel38";
            panel38.Size = new Size(120, 72);
            panel38.TabIndex = 37;
            // 
            // panel39
            // 
            panel39.BorderStyle = BorderStyle.FixedSingle;
            panel39.Location = new Point(10, 211);
            panel39.Margin = new Padding(2);
            panel39.Name = "panel39";
            panel39.Size = new Size(120, 72);
            panel39.TabIndex = 38;
            // 
            // panel40
            // 
            panel40.BorderStyle = BorderStyle.FixedSingle;
            panel40.Location = new Point(10, 134);
            panel40.Margin = new Padding(2);
            panel40.Name = "panel40";
            panel40.Size = new Size(120, 72);
            panel40.TabIndex = 39;
            // 
            // panel41
            // 
            panel41.Location = new Point(984, 10);
            panel41.Margin = new Padding(2);
            panel41.Name = "panel41";
            panel41.Size = new Size(144, 80);
            panel41.TabIndex = 40;
            // 
            // panel42
            // 
            panel42.Location = new Point(984, 130);
            panel42.Margin = new Padding(2);
            panel42.Name = "panel42";
            panel42.Size = new Size(144, 80);
            panel42.TabIndex = 41;
            // 
            // panel43
            // 
            panel43.Location = new Point(984, 250);
            panel43.Margin = new Padding(2);
            panel43.Name = "panel43";
            panel43.Size = new Size(144, 80);
            panel43.TabIndex = 42;
            // 
            // panel44
            // 
            panel44.Location = new Point(984, 370);
            panel44.Margin = new Padding(2);
            panel44.Name = "panel44";
            panel44.Size = new Size(144, 80);
            panel44.TabIndex = 43;
            // 
            // button1
            // 
            button1.Location = new Point(429, 388);
            button1.Margin = new Padding(2);
            button1.Name = "button1";
            button1.Size = new Size(106, 68);
            button1.TabIndex = 44;
            button1.Text = "Lắc xúc xắc";
            button1.UseVisualStyleBackColor = true;
            button1.Click += button1_Click;
            // 
            // panelTimer
            // 
            panelTimer.BorderStyle = BorderStyle.FixedSingle;
            panelTimer.Location = new Point(365, 235);
            panelTimer.Margin = new Padding(2);
            panelTimer.Name = "panelTimer";
            panelTimer.Size = new Size(226, 80);
            panelTimer.TabIndex = 45;
            // 
            // MainForm
            // 
            AutoScaleDimensions = new SizeF(8F, 20F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1582, 853);
            Controls.Add(panelTimer);
            Controls.Add(button1);
            Controls.Add(panel44);
            Controls.Add(panel43);
            Controls.Add(panel42);
            Controls.Add(panel41);
            Controls.Add(panel32);
            Controls.Add(panel33);
            Controls.Add(panel34);
            Controls.Add(panel35);
            Controls.Add(panel36);
            Controls.Add(panel37);
            Controls.Add(panel38);
            Controls.Add(panel39);
            Controls.Add(panel40);
            Controls.Add(panel21);
            Controls.Add(panel22);
            Controls.Add(panel23);
            Controls.Add(panel24);
            Controls.Add(panel25);
            Controls.Add(panel26);
            Controls.Add(panel27);
            Controls.Add(panel28);
            Controls.Add(panel29);
            Controls.Add(panel30);
            Controls.Add(panel20);
            Controls.Add(panel31);
            Controls.Add(panel19);
            Controls.Add(panel18);
            Controls.Add(panel17);
            Controls.Add(panel16);
            Controls.Add(panel15);
            Controls.Add(panel14);
            Controls.Add(panel13);
            Controls.Add(panel12);
            Controls.Add(panel11);
            Controls.Add(panel10);
            Controls.Add(panel9);
            Controls.Add(panel8);
            Controls.Add(panel7);
            Controls.Add(panel6);
            Controls.Add(panel5);
            Controls.Add(panel4);
            Controls.Add(panel3);
            Controls.Add(panel2);
            Controls.Add(panel1);
            Margin = new Padding(2);
            Name = "MainForm";
            Text = "Form1";
            WindowState = FormWindowState.Maximized;
            Load += MainForm_Load;
            ResumeLayout(false);
        }

        #endregion

        private Panel panel1;
        private Panel panel2;
        private Panel panel3;
        private Panel panel4;
        private Panel panel5;
        private Panel panel6;
        private Panel panel7;
        private Panel panel8;
        private Panel panel9;
        private Panel panel10;
        private Panel panel11;
        private Panel panel12;
        private Panel panel13;
        private Panel panel14;
        private Panel panel15;
        private Panel panel16;
        private Panel panel17;
        private Panel panel18;
        private Panel panel19;
        private Panel panel20;
        private Panel panel21;
        private Panel panel22;
        private Panel panel23;
        private Panel panel24;
        private Panel panel25;
        private Panel panel26;
        private Panel panel27;
        private Panel panel28;
        private Panel panel29;
        private Panel panel30;
        private Panel panel31;
        private Panel panel32;
        private Panel panel33;
        private Panel panel34;
        private Panel panel35;
        private Panel panel36;
        private Panel panel37;
        private Panel panel38;
        private Panel panel39;
        private Panel panel40;
        private Panel panel41;
        private Panel panel42;
        private Panel panel43;
        private Panel panel44;
        private Button button1;
        private Panel panelTimer;
    }
}

```

### MonopolyWinForms\Program.cs
```cs
using buyLand_Home;
using MonopolyWinForms.GameLogic;
using MonopolyWinForms.Login_Signup;
using MonopolyWinForms.Home;
using MonopolyWinForms.Play_area;
using MonopolyWinForms.Room;
namespace MonopolyWinForms
{
    internal static class Program
    {
        /// <summary>
        ///  The main entry point for the application.
        /// </summary>
        [STAThread]
        static void Main()
        {
            // To customize application configuration such as set high DPI settings or default font,
            // see https://aka.ms/applicationconfiguration.
            ApplicationConfiguration.Initialize();
            //Application.Run(new MainForm());
            //Application.Run(new MainForm());
            Application.Run(new Main_login_signup());
            //Application.Run(new Draw_playarea());
            //Application.Run(new JoinRoom());
            //Application.Run(new Create_Room());
        }
    }
}
```

### MonopolyWinForms\BuyLand_Home\BuyBus.cs
```cs
﻿using MonopolyWinForms.GameLogic;
using MonopolyWinForms.Services;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MonopolyWinForms.BuyLand_Home
{
    public partial class BuyBus : Form
    {
        private int playerID;
        private Tile tile;
        private List<Tile> tiles;
        private List<Player> players;
        private int currentPlayerIndex;
        private Monopoly monopoly;
        private MainForm mainform;
        public BuyBus(int playerID, Tile tile, Monopoly monopoly, MainForm mainform, List<Tile> tiles, List<Player> players, int currentPlayerIndex)
        {
            InitializeComponent();
            this.StartPosition = FormStartPosition.CenterScreen;
            this.playerID = playerID;
            this.tile = tile;
            this.monopoly = monopoly;
            this.mainform = mainform;
            UpdateRentDisplay();
            this.tiles = tiles;
            this.players = players;
            this.currentPlayerIndex = currentPlayerIndex;
        }
        private void button2_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        private async void button1_Click(object sender, EventArgs e)
        {
            if (tile.PlayerId == null)
            {
                tile.PlayerId = playerID;
                tile.Level = 1;
                UpdateRentDisplay();
                mainform.UpdateBusStationRent(playerID);
                var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                await GameManager.UpdateGameState(gameState);
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
        }
        private async void UpdateRentDisplay()
        {
            int playerBuses = monopoly.CountBusesOwned(playerID);
            int Price = tile.LandPrice;
            int rent = 50 + 50 * playerBuses;
            label2.Text = $"Rent rate: ${rent}";
            label3.Text = $"The price: ${Price}";
            var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
            await GameManager.UpdateGameState(gameState);
        }
    }
}

```

### MonopolyWinForms\BuyLand_Home\BuyBus.Designer.cs
```cs
﻿using buyLand_Home;

namespace MonopolyWinForms.BuyLand_Home
{
    partial class BuyBus
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BuyBus));
            label1 = new Label();
            pictureBox1 = new PictureBox();
            label2 = new Label();
            button1 = new Button();
            button2 = new Button();
            label3 = new Label();
            panel1 = new Panel();
            label8 = new Label();
            label7 = new Label();
            label6 = new Label();
            label5 = new Label();
            label4 = new Label();
            ((System.ComponentModel.ISupportInitialize)pictureBox1).BeginInit();
            panel1.SuspendLayout();
            SuspendLayout();
            // 
            // label1
            // 
            label1.AutoSize = true;
            label1.Font = new Font("Segoe UI", 16F);
            label1.Location = new Point(428, 9);
            label1.Name = "label1";
            label1.Size = new Size(114, 45);
            label1.TabIndex = 0;
            label1.Text = "Bến xe";
            label1.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // pictureBox1
            // 
            pictureBox1.Image = (Image)resources.GetObject("pictureBox1.Image");
            pictureBox1.Location = new Point(101, 73);
            pictureBox1.Name = "pictureBox1";
            pictureBox1.Size = new Size(262, 253);
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox1.TabIndex = 11;
            pictureBox1.TabStop = false;
            // 
            // label2
            // 
            label2.AutoSize = true;
            label2.Font = new Font("Segoe UI", 13F);
            label2.Location = new Point(411, 362);
            label2.Name = "label2";
            label2.Size = new Size(161, 36);
            label2.TabIndex = 5;
            label2.Text = "Rent rate: $0";
            // 
            // button1
            // 
            button1.Font = new Font("Segoe UI", 13F);
            button1.Location = new Point(145, 362);
            button1.Name = "button1";
            button1.Size = new Size(153, 61);
            button1.TabIndex = 6;
            button1.Text = "Mua";
            button1.UseVisualStyleBackColor = true;
            button1.Click += button1_Click;
            // 
            // button2
            // 
            button2.Font = new Font("Segoe UI", 13F);
            button2.Location = new Point(692, 362);
            button2.Name = "button2";
            button2.Size = new Size(153, 61);
            button2.TabIndex = 7;
            button2.Text = "Bỏ qua";
            button2.UseVisualStyleBackColor = true;
            button2.Click += button2_Click;
            // 
            // label3
            // 
            label3.AutoSize = true;
            label3.Font = new Font("Segoe UI", 13F);
            label3.Location = new Point(398, 442);
            label3.Name = "label3";
            label3.Size = new Size(190, 36);
            label3.TabIndex = 9;
            label3.Text = "The price: $200";
            // 
            // panel1
            // 
            panel1.Controls.Add(label8);
            panel1.Controls.Add(label7);
            panel1.Controls.Add(label6);
            panel1.Controls.Add(label5);
            panel1.Controls.Add(label4);
            panel1.Location = new Point(617, 73);
            panel1.Name = "panel1";
            panel1.Size = new Size(300, 253);
            panel1.TabIndex = 12;
            // 
            // label8
            // 
            label8.AutoSize = true;
            label8.Location = new Point(24, 196);
            label8.Name = "label8";
            label8.Size = new Size(104, 25);
            label8.TabIndex = 13;
            label8.Text = "4 Bus: $200";
            // 
            // label7
            // 
            label7.AutoSize = true;
            label7.Location = new Point(24, 156);
            label7.Name = "label7";
            label7.Size = new Size(104, 25);
            label7.TabIndex = 13;
            label7.Text = "3 Bus: $150";
            // 
            // label6
            // 
            label6.AutoSize = true;
            label6.Location = new Point(24, 117);
            label6.Name = "label6";
            label6.Size = new Size(104, 25);
            label6.TabIndex = 13;
            label6.Text = "2 Bus: $100";
            // 
            // label5
            // 
            label5.AutoSize = true;
            label5.Location = new Point(24, 82);
            label5.Name = "label5";
            label5.Size = new Size(94, 25);
            label5.TabIndex = 1;
            label5.Text = "1 Bus: $50";
            // 
            // label4
            // 
            label4.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
            label4.Location = new Point(24, 15);
            label4.Name = "label4";
            label4.Size = new Size(256, 56);
            label4.TabIndex = 0;
            label4.Text = "Rent depend on your number of Bus";
            // 
            // BuyBus
            // 
            AutoScaleDimensions = new SizeF(10F, 25F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1003, 531);
            Controls.Add(panel1);
            Controls.Add(pictureBox1);
            Controls.Add(label3);
            Controls.Add(button2);
            Controls.Add(button1);
            Controls.Add(label2);
            Controls.Add(label1);
            Name = "BuyBus";
            Text = "BuyBus";
            ((System.ComponentModel.ISupportInitialize)pictureBox1).EndInit();
            panel1.ResumeLayout(false);
            panel1.PerformLayout();
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private Label label1;
        private Label label2;
        private Button button1;
        private Button button2;
        private Label label3;
        private PictureBox pictureBox1;
        private Panel panel1;
        private Label label4;
        private Label label8;
        private Label label7;
        private Label label6;
        private Label label5;
    }
}
```

### MonopolyWinForms\BuyLand_Home\BuyCompany.cs
```cs
﻿using MonopolyWinForms.GameLogic;
using MonopolyWinForms.Services;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MonopolyWinForms.BuyLand_Home
{
    public partial class BuyCompany : Form
    {
        private int playerID;
        private Tile tile;
        private List<Tile> tiles;
        private List<Player> players;
        private int currentPlayerIndex;
        private Monopoly monopoly;
        private MainForm mainform;
        public BuyCompany(int playerID, Tile tile, Monopoly monopoly, MainForm mainform, List<Tile> tiles, List<Player> players, int currentPlayerIndex)
        {
            InitializeComponent();
            this.StartPosition = FormStartPosition.CenterScreen;
            this.playerID = playerID;
            this.tile = tile;
            this.monopoly = monopoly;
            this.mainform = mainform;
            this.tiles = tiles;
            this.players = players;
            this.currentPlayerIndex = currentPlayerIndex;
            LoadCompanyImage();
        }
        private void button2_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        private void LoadCompanyImage()
        {
            string basePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Assets", "Images");

            if (tile.Name == "Công ty Điện lực")
            {
                string imagePath = Path.Combine(basePath, "cty_dien.png");
                if (File.Exists(imagePath))
                    pictureBox1.Image = Image.FromFile(imagePath);
                label1.TextAlign = ContentAlignment.MiddleCenter;
                label1.Text = $"Công ty Điện lực";
            }
            else if (tile.Name == "Công ty Cấp nước")
            {
                string imagePath = Path.Combine(basePath, "cty_nuoc.png");
                if (File.Exists(imagePath))
                    pictureBox1.Image = Image.FromFile(imagePath);
                label1.TextAlign = ContentAlignment.MiddleCenter;
                label1.Text = $"Công ty Cấp nước";
            }
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
            UpdateRentDisplay();
        }
        private async void button1_Click(object sender, EventArgs e)
        {
            if (tile.PlayerId == null)
            {
                tile.PlayerId = playerID;
                tile.Level = 1;
                UpdateRentDisplay();
                mainform.UpdateCompanyRent(playerID);
                var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                await GameManager.UpdateGameState(gameState);
                this.DialogResult = DialogResult.OK;
                this.Close();
            }
        }
        private async void UpdateRentDisplay()
        {
            int playerCompanies = monopoly.CountCompaniesOwned(playerID);
            int Price = tile.LandPrice;
            int rent = 25; // mặc định là 25
            if (playerCompanies == 1)
            {
                rent = 25 * 4;
            }
            else if (playerCompanies >= 2)
            {
                rent = 25 * 10;
            }
            label2.Text = $"Rent rate: ${rent} * {"number of dices"}";
            label3.Text = $"The price: ${Price}";
            var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
            await GameManager.UpdateGameState(gameState);
        }
    }
}

```

### MonopolyWinForms\BuyLand_Home\BuyCompany.Designer.cs
```cs
﻿namespace MonopolyWinForms.BuyLand_Home
{
    partial class BuyCompany
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            label1 = new Label();
            pictureBox1 = new PictureBox();
            label2 = new Label();
            button1 = new Button();
            button2 = new Button();
            label3 = new Label();
            panel1 = new Panel();
            label6 = new Label();
            label5 = new Label();
            label4 = new Label();
            ((System.ComponentModel.ISupportInitialize)pictureBox1).BeginInit();
            panel1.SuspendLayout();
            SuspendLayout();
            // 
            // label1
            // 
            label1.Font = new Font("Segoe UI", 16F);
            label1.Location = new Point(12, 9);
            label1.Name = "label1";
            label1.Size = new Size(979, 45);
            label1.TabIndex = 0;
            label1.Text = "Công ty";
            label1.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // pictureBox1
            // 
            pictureBox1.Location = new Point(101, 73);
            pictureBox1.Name = "pictureBox1";
            pictureBox1.Size = new Size(262, 253);
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox1.TabIndex = 11;
            pictureBox1.TabStop = false;
            // 
            // label2
            // 
            label2.Font = new Font("Segoe UI", 13F);
            label2.Location = new Point(273, 374);
            label2.Name = "label2";
            label2.Size = new Size(465, 45);
            label2.TabIndex = 5;
            label2.Text = "Rent rate:";
            label2.TextAlign = ContentAlignment.MiddleCenter;
            // 
            // button1
            // 
            button1.Font = new Font("Segoe UI", 13F);
            button1.Location = new Point(114, 362);
            button1.Name = "button1";
            button1.Size = new Size(153, 61);
            button1.TabIndex = 6;
            button1.Text = "Mua";
            button1.UseVisualStyleBackColor = true;
            button1.Click += button1_Click;
            // 
            // button2
            // 
            button2.Font = new Font("Segoe UI", 13F);
            button2.Location = new Point(744, 358);
            button2.Name = "button2";
            button2.Size = new Size(153, 61);
            button2.TabIndex = 7;
            button2.Text = "Bỏ qua";
            button2.UseVisualStyleBackColor = true;
            button2.Click += button2_Click;
            // 
            // label3
            // 
            label3.AutoSize = true;
            label3.Font = new Font("Segoe UI", 13F);
            label3.Location = new Point(400, 437);
            label3.Name = "label3";
            label3.Size = new Size(127, 36);
            label3.TabIndex = 9;
            label3.Text = "The price:";
            // 
            // panel1
            // 
            panel1.Controls.Add(label6);
            panel1.Controls.Add(label5);
            panel1.Controls.Add(label4);
            panel1.Location = new Point(617, 73);
            panel1.Name = "panel1";
            panel1.Size = new Size(300, 253);
            panel1.TabIndex = 12;
            // 
            // label6
            // 
            label6.Location = new Point(24, 159);
            label6.Name = "label6";
            label6.Size = new Size(256, 56);
            label6.TabIndex = 13;
            label6.Text = "2 Company: $100 * number of dices";
            // 
            // label5
            // 
            label5.Location = new Point(24, 82);
            label5.Name = "label5";
            label5.Size = new Size(256, 56);
            label5.TabIndex = 1;
            label5.Text = "1 Company: $25 * number of dices";
            // 
            // label4
            // 
            label4.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left;
            label4.Location = new Point(24, 15);
            label4.Name = "label4";
            label4.Size = new Size(256, 56);
            label4.TabIndex = 0;
            label4.Text = "Rent depend on your number of Company";
            // 
            // BuyCompany
            // 
            AutoScaleDimensions = new SizeF(10F, 25F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1003, 531);
            Controls.Add(panel1);
            Controls.Add(pictureBox1);
            Controls.Add(label3);
            Controls.Add(button2);
            Controls.Add(button1);
            Controls.Add(label2);
            Controls.Add(label1);
            Name = "BuyCompany";
            Text = "BuyBus";
            ((System.ComponentModel.ISupportInitialize)pictureBox1).EndInit();
            panel1.ResumeLayout(false);
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private Label label1;
        private Label label2;
        private Button button1;
        private Button button2;
        private Label label3;
        private PictureBox pictureBox1;
        private Panel panel1;
        private Label label4;
        private Label label6;
        private Label label5;
    }
}
```

### MonopolyWinForms\BuyLand_Home\BuyHome-Land.cs
```cs
﻿using Microsoft.VisualBasic.Devices;
using MonopolyWinForms;
using MonopolyWinForms.GameLogic;
using System;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement.Rebar;

namespace buyLand_Home
{
    public partial class BuyHome_Land : Form
    {
        private Player player;
        private Tile tile;
        private List<Player> players;
        private MainForm mainform;
        private Monopoly monopoly;
        public BuyHome_Land(Player player, Tile tile, Monopoly monopoly, MainForm mainform, List<Player> players)
        {
            InitializeComponent();
            this.StartPosition = FormStartPosition.CenterScreen;
            this.player = player;
            this.tile = tile;
            this.monopoly = monopoly;
            this.mainform = mainform;
            this.players = players;
        }
        private void button2_Click(object sender, EventArgs e)
        {
            this.Close();
        }
        private void BuyLand_Home_Load(object sender, EventArgs e)
        {
            UpdateImages();
            label1.Text = tile.Name;

            checkBox1.Checked = false;
            checkBox2.Checked = false;
            checkBox3.Checked = false;
            checkBox4.Checked = false;
            checkBox5.Checked = false;

            checkBox1.Enabled = false;
            checkBox2.Enabled = false;
            checkBox3.Enabled = false;
            checkBox4.Enabled = false;
            checkBox5.Enabled = false;
            // Hiển thị theo cấp độ đã có sẵn
            if (tile.Level >= 1) checkBox1.Checked = true;
            if (tile.Level >= 2) checkBox2.Checked = true;
            if (tile.Level >= 3) checkBox3.Checked = true;
            if (tile.Level >= 4) checkBox4.Checked = true;
            // Nếu chưa có chủ và level = 0 → có thể mua đất
            if (tile.PlayerId == null && tile.Level == 0)
            {
                checkBox1.Enabled = true;
                checkBox1.Checked = true;
            }
            // Nếu người chơi là chủ sở hữu
            if (tile.PlayerId == player.ID)
            {
                if (tile.Level == 1)
                {
                    checkBox2.Enabled = true;
                    checkBox3.Enabled = true;
                    checkBox4.Enabled = true;
                    checkBox2.Checked = true;
                    checkBox3.Checked = true;
                    checkBox4.Checked = true;
                }
                else if (tile.Level == 2)
                {
                    checkBox3.Enabled = true;
                    checkBox4.Enabled = true;
                    checkBox3.Checked = true;
                    checkBox4.Checked = true;
                }
                else if (tile.Level == 3)
                {
                    checkBox4.Enabled = true;
                }
                else if (tile.Level == 4)
                {
                    checkBox5.Enabled = true;
                    checkBox5.Checked = true;
                }
            }
            UpdatePrice();
        }
        private void checkBox1_CheckedChanged(object sender, EventArgs e)
        {
            UpdatePrice();
        }
        private void checkBox2_CheckedChanged(object sender, EventArgs e)
        {
            if (!checkBox2.Checked)
            {
                checkBox3.Checked = false;
                checkBox4.Checked = false;
                UpdatePrice();
            }
            UpdatePrice();
        }
        private void checkBox3_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox3.Checked)
            {
                if (!checkBox2.Checked) checkBox2.Checked = true;
                UpdatePrice();
            }
            else
            {
                checkBox4.Checked = false;
                UpdatePrice();
            }
            UpdatePrice();
        }
        private void checkBox4_CheckedChanged(object sender, EventArgs e)
        {
            if (checkBox4.Checked)
            {
                if (!checkBox2.Checked) checkBox2.Checked = true;
                if (!checkBox3.Checked) checkBox3.Checked = true;
                UpdatePrice();
            }
            UpdatePrice();
        }
        private void checkBox5_CheckedChanged(object sender, EventArgs e)
        {
            UpdatePrice();
        }
        private void UpdatePrice()
        {
            label1.Text = tile.Name;
            int totalPrice = 0;

            if (tile == null) return;
            if (checkBox1.Checked) totalPrice += tile.LandPrice;
            if (checkBox2.Checked) totalPrice += tile.HousePrice;
            if (checkBox3.Checked) totalPrice += tile.HousePrice;
            if (checkBox4.Checked) totalPrice += tile.HousePrice;
            if (checkBox5.Checked) totalPrice += tile.HotelPrice;

            label2.Text = $"Rent rate: ${totalPrice / 2}";
            label3.Text = $"The price: ${totalPrice}";
        }

        private void button1_Click(object sender, EventArgs e)
        {
            int newLevel = 0;

            if (checkBox1.Checked) newLevel = 1;
            if (checkBox2.Checked) newLevel = 2;
            if (checkBox3.Checked) newLevel = 3;
            if (checkBox4.Checked) newLevel = 4;
            if (checkBox5.Checked) newLevel = 5;

            if (newLevel > tile.Level)
            {
                tile.Level = newLevel;

                // Nếu đang mua đất (tức từ level 0 lên level 1) thì gán luôn chủ sở hữu
                if (tile.PlayerId == null && newLevel >= 1)
                {
                    tile.PlayerId = player.ID;
                }
            }
            this.DialogResult = DialogResult.OK;
            this.Close();
        }
        private void UpdateImages()
        {

            pictureBox1.Image = null;
            pictureBox2.Image = null;
            pictureBox3.Image = null;
            pictureBox4.Image = null;
            pictureBox5.Image = null;

            pictureBox1.Image = mainform.GetHouseImage(1, player, tile, players);
            pictureBox2.Image = mainform.GetHouseImage(2, player, tile, players);
            pictureBox3.Image = mainform.GetHouseImage(3, player, tile, players);
            pictureBox4.Image = mainform.GetHouseImage(4, player, tile, players);
            pictureBox5.Image = mainform.GetHouseImage(5, player, tile, players);
        }
    }
}

```

### MonopolyWinForms\BuyLand_Home\BuyHome-Land.Designer.cs
```cs
﻿namespace buyLand_Home
{
    partial class BuyHome_Land
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BuyHome_Land));
            label1 = new Label();
            panel1 = new Panel();
            pictureBox1 = new PictureBox();
            checkBox1 = new CheckBox();
            label2 = new Label();
            button1 = new Button();
            button2 = new Button();
            label3 = new Label();
            panel2 = new Panel();
            pictureBox2 = new PictureBox();
            checkBox2 = new CheckBox();
            panel3 = new Panel();
            pictureBox3 = new PictureBox();
            checkBox3 = new CheckBox();
            panel4 = new Panel();
            pictureBox4 = new PictureBox();
            checkBox4 = new CheckBox();
            panel5 = new Panel();
            pictureBox5 = new PictureBox();
            checkBox5 = new CheckBox();
            panel1.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox1).BeginInit();
            panel2.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox2).BeginInit();
            panel3.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox3).BeginInit();
            panel4.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox4).BeginInit();
            panel5.SuspendLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox5).BeginInit();
            SuspendLayout();
            // 
            // label1
            // 
            label1.AutoSize = true;
            label1.Font = new Font("Segoe UI", 16F);
            label1.Location = new Point(390, 18);
            label1.Name = "label1";
            label1.Size = new Size(231, 45);
            label1.TabIndex = 0;
            label1.Text = "Tân Kỳ Tân Quý";
            // 
            // panel1
            // 
            panel1.Controls.Add(pictureBox1);
            panel1.Controls.Add(checkBox1);
            panel1.Location = new Point(54, 86);
            panel1.Name = "panel1";
            panel1.Size = new Size(147, 189);
            panel1.TabIndex = 1;
            // 
            // pictureBox1
            // 
            pictureBox1.Image = (Image)resources.GetObject("pictureBox1.Image");
            pictureBox1.Location = new Point(17, 28);
            pictureBox1.Name = "pictureBox1";
            pictureBox1.Size = new Size(111, 75);
            pictureBox1.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox1.TabIndex = 11;
            pictureBox1.TabStop = false;
            // 
            // checkBox1
            // 
            checkBox1.AutoSize = true;
            checkBox1.Location = new Point(38, 148);
            checkBox1.Name = "checkBox1";
            checkBox1.Size = new Size(76, 29);
            checkBox1.TabIndex = 0;
            checkBox1.Text = "Land";
            checkBox1.UseVisualStyleBackColor = true;
            checkBox1.CheckedChanged += checkBox1_CheckedChanged;
            // 
            // label2
            // 
            label2.AutoSize = true;
            label2.Font = new Font("Segoe UI", 13F);
            label2.Location = new Point(411, 362);
            label2.Name = "label2";
            label2.Size = new Size(161, 36);
            label2.TabIndex = 5;
            label2.Text = "Rent rate: $0";
            // 
            // button1
            // 
            button1.Font = new Font("Segoe UI", 13F);
            button1.Location = new Point(145, 362);
            button1.Name = "button1";
            button1.Size = new Size(153, 61);
            button1.TabIndex = 6;
            button1.Text = "Mua";
            button1.UseVisualStyleBackColor = true;
            button1.Click += button1_Click;
            // 
            // button2
            // 
            button2.Font = new Font("Segoe UI", 13F);
            button2.Location = new Point(692, 362);
            button2.Name = "button2";
            button2.Size = new Size(153, 61);
            button2.TabIndex = 7;
            button2.Text = "Bỏ qua";
            button2.UseVisualStyleBackColor = true;
            button2.Click += button2_Click;
            // 
            // label3
            // 
            label3.AutoSize = true;
            label3.Font = new Font("Segoe UI", 13F);
            label3.Location = new Point(410, 442);
            label3.Name = "label3";
            label3.Size = new Size(162, 36);
            label3.TabIndex = 9;
            label3.Text = "The price: $0";
            // 
            // panel2
            // 
            panel2.Controls.Add(pictureBox2);
            panel2.Controls.Add(checkBox2);
            panel2.Location = new Point(241, 86);
            panel2.Name = "panel2";
            panel2.Size = new Size(147, 189);
            panel2.TabIndex = 11;
            // 
            // pictureBox2
            // 
            pictureBox2.Image = (Image)resources.GetObject("pictureBox2.Image");
            pictureBox2.Location = new Point(17, 28);
            pictureBox2.Name = "pictureBox2";
            pictureBox2.Size = new Size(111, 75);
            pictureBox2.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox2.TabIndex = 11;
            pictureBox2.TabStop = false;
            // 
            // checkBox2
            // 
            checkBox2.AutoSize = true;
            checkBox2.Location = new Point(21, 148);
            checkBox2.Name = "checkBox2";
            checkBox2.Size = new Size(104, 29);
            checkBox2.TabIndex = 0;
            checkBox2.Text = "House 1";
            checkBox2.UseVisualStyleBackColor = true;
            checkBox2.CheckedChanged += checkBox2_CheckedChanged;
            // 
            // panel3
            // 
            panel3.Controls.Add(pictureBox3);
            panel3.Controls.Add(checkBox3);
            panel3.Location = new Point(425, 86);
            panel3.Name = "panel3";
            panel3.Size = new Size(147, 189);
            panel3.TabIndex = 12;
            // 
            // pictureBox3
            // 
            pictureBox3.Image = (Image)resources.GetObject("pictureBox3.Image");
            pictureBox3.Location = new Point(17, 28);
            pictureBox3.Name = "pictureBox3";
            pictureBox3.Size = new Size(111, 75);
            pictureBox3.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox3.TabIndex = 11;
            pictureBox3.TabStop = false;
            // 
            // checkBox3
            // 
            checkBox3.AutoSize = true;
            checkBox3.Location = new Point(21, 148);
            checkBox3.Name = "checkBox3";
            checkBox3.Size = new Size(104, 29);
            checkBox3.TabIndex = 0;
            checkBox3.Text = "House 2";
            checkBox3.UseVisualStyleBackColor = true;
            checkBox3.CheckedChanged += checkBox3_CheckedChanged;
            // 
            // panel4
            // 
            panel4.Controls.Add(pictureBox4);
            panel4.Controls.Add(checkBox4);
            panel4.Location = new Point(615, 86);
            panel4.Name = "panel4";
            panel4.Size = new Size(147, 189);
            panel4.TabIndex = 13;
            // 
            // pictureBox4
            // 
            pictureBox4.Image = (Image)resources.GetObject("pictureBox4.Image");
            pictureBox4.Location = new Point(17, 28);
            pictureBox4.Name = "pictureBox4";
            pictureBox4.Size = new Size(111, 75);
            pictureBox4.SizeMode = PictureBoxSizeMode.StretchImage;
            pictureBox4.TabIndex = 11;
            pictureBox4.TabStop = false;
            // 
            // checkBox4
            // 
            checkBox4.AutoSize = true;
            checkBox4.Location = new Point(21, 148);
            checkBox4.Name = "checkBox4";
            checkBox4.Size = new Size(104, 29);
            checkBox4.TabIndex = 0;
            checkBox4.Text = "House 3";
            checkBox4.UseVisualStyleBackColor = true;
            checkBox4.CheckedChanged += checkBox4_CheckedChanged;
            // 
            // panel5
            // 
            panel5.Controls.Add(pictureBox5);
            panel5.Controls.Add(checkBox5);
            panel5.Location = new Point(801, 86);
            panel5.Name = "panel5";
            panel5.Size = new Size(147, 189);
            panel5.TabIndex = 14;
            // 
            // pictureBox5
            // 
            pictureBox5.Image = (Image)resources.GetObject("pictureBox5.Image");
            pictureBox5.Location = new Point(17, 28);
            pictureBox5.Name = "pictureBox5";
            pictureBox5.Size = new Size(111, 75);
            pictureBox5.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox5.TabIndex = 11;
            pictureBox5.TabStop = false;
            // 
            // checkBox5
            // 
            checkBox5.AutoSize = true;
            checkBox5.Location = new Point(32, 148);
            checkBox5.Name = "checkBox5";
            checkBox5.Size = new Size(81, 29);
            checkBox5.TabIndex = 0;
            checkBox5.Text = "Hotel";
            checkBox5.UseVisualStyleBackColor = true;
            checkBox5.CheckedChanged += checkBox5_CheckedChanged;
            // 
            // BuyHome_Land
            // 
            AutoScaleDimensions = new SizeF(10F, 25F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1003, 531);
            Controls.Add(panel5);
            Controls.Add(panel4);
            Controls.Add(panel3);
            Controls.Add(panel2);
            Controls.Add(label3);
            Controls.Add(button2);
            Controls.Add(button1);
            Controls.Add(label2);
            Controls.Add(panel1);
            Controls.Add(label1);
            Name = "BuyHome_Land";
            Text = "BuyHome_Land";
            Load += BuyLand_Home_Load;
            panel1.ResumeLayout(false);
            panel1.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox1).EndInit();
            panel2.ResumeLayout(false);
            panel2.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox2).EndInit();
            panel3.ResumeLayout(false);
            panel3.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox3).EndInit();
            panel4.ResumeLayout(false);
            panel4.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox4).EndInit();
            panel5.ResumeLayout(false);
            panel5.PerformLayout();
            ((System.ComponentModel.ISupportInitialize)pictureBox5).EndInit();
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private Label label1;
        private Panel panel1;
        private CheckBox checkBox1;
        private Label label2;
        private Button button1;
        private Button button2;
        private Label label3;
        private PictureBox pictureBox1;
        private Panel panel2;
        private PictureBox pictureBox2;
        private CheckBox checkBox2;
        private Panel panel3;
        private PictureBox pictureBox3;
        private CheckBox checkBox3;
        private Panel panel4;
        private PictureBox pictureBox4;
        private CheckBox checkBox4;
        private Panel panel5;
        private PictureBox pictureBox5;
        private CheckBox checkBox5;
    }
}
```

### MonopolyWinForms\FormManage\FormDestroyHouse.cs
```cs
﻿using MonopolyWinForms.GameLogic;
using System.Data;

namespace MonopolyWinForms.FormManage
{
    public partial class FormDestroyHouse : Form
    {
        public List<Tile> ownedTiles;
        public List<Tile> GameStateTiles;
        public List<Player> players;
        public int currentPlayerIndex;
        public Player player;
        private MainForm mainForm;
        public bool CanOpen { get; private set; } = true;
        public FormDestroyHouse(Player player, List<Tile> tiles, MainForm mainForm, List<Player> players, int currentPlayerIndex)
        {
            InitializeComponent();
            this.player = player;
            this.players = players;
            this.GameStateTiles = tiles;
            this.mainForm = mainForm;
            this.currentPlayerIndex = currentPlayerIndex;
            // Lọc các ô đất của người chơi có nhà > 0
            ownedTiles = tiles.Where(t => t.PlayerId == player.ID && t.Level > 0).ToList();
            if (ownedTiles.Count == 0)
            {
                MessageBox.Show("Bạn không có ô đất nào có nhà để phá!", "Thông báo");
                CanOpen = false;
                return;
            }
            // Setup ListBox
            foreach (var tile in ownedTiles)
            {
                listBoxTiles.Items.Add($"{tile.Name} (Cấp nhà: {tile.Level})");
            }
            btnDestroy.Text = "🔨 Phá 1 cấp nhà";
            btnDestroy.Click += btnDestroy_Click;
            this.mainForm = mainForm;
        }
        private void btnDestroy_Click(object? sender, EventArgs e)
        {
            if (listBoxTiles.SelectedIndex == -1)
            {
                MessageBox.Show("Vui lòng chọn một ô đất!");
                return;
            }
            var selectedTile = ownedTiles[listBoxTiles.SelectedIndex];
            selectedTile.DestroyOneHouseLevel(currentPlayerIndex, players, GameStateTiles);
            string msg = $"Đã phá 1 cấp nhà tại ô {selectedTile.Name}. Cấp hiện tại: {selectedTile.Level}";
            if (selectedTile.Level == 0)
            {
                selectedTile.PlayerId = null;
                msg += "\nĐã mất quyền sở hữu ô này.";
            }
            mainForm.UpdateTileDisplay(selectedTile.Id - 1, player);
            listBoxTiles.Items[listBoxTiles.SelectedIndex] = $"{selectedTile.Name} (Cấp nhà: {selectedTile.Level})";
            MessageBox.Show(msg, "Kết quả");
            this.Close();
        }
    }
}

```

### MonopolyWinForms\FormManage\FormDestroyHouse.Designer.cs
```cs
﻿namespace MonopolyWinForms.FormManage
{
    partial class FormDestroyHouse
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            listBoxTiles = new ListBox();
            btnDestroy = new Button();
            SuspendLayout();
            // 
            // listBoxTiles
            // 
            listBoxTiles.FormattingEnabled = true;
            listBoxTiles.ItemHeight = 25;
            listBoxTiles.Location = new Point(39, 39);
            listBoxTiles.Name = "listBoxTiles";
            listBoxTiles.Size = new Size(410, 179);
            listBoxTiles.TabIndex = 0;
            // 
            // btnDestroy
            // 
            btnDestroy.Location = new Point(39, 236);
            btnDestroy.Name = "btnDestroy";
            btnDestroy.Size = new Size(410, 50);
            btnDestroy.TabIndex = 1;
            btnDestroy.Text = ".";
            btnDestroy.UseVisualStyleBackColor = true;
            // 
            // FormDestroyHouse
            // 
            AutoScaleDimensions = new SizeF(10F, 25F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(528, 313);
            Controls.Add(btnDestroy);
            Controls.Add(listBoxTiles);
            Name = "FormDestroyHouse";
            Text = "FormDestroyHouse";
            ResumeLayout(false);
        }

        #endregion

        private ListBox listBoxTiles;
        private Button btnDestroy;
    }
}
```

### MonopolyWinForms\FormManage\FormSellProperty.cs
```cs
﻿using MonopolyWinForms.GameLogic;
using System.Data;

namespace MonopolyWinForms.FormManage
{
    public partial class FormSellProperty : Form
    {
        public List<Tile> ownedTiles;
        public List<Tile> GameStateTiles;
        public List<Player> players;
        public int currentPlayerIndex;
        public Player player;
        private MainForm mainForm;
        public bool CanOpen { get; private set; } = true;
        public FormSellProperty(Player player, List<Tile> tiles, MainForm mainForm, List<Player> players, int currentPlayerIndex)
        {
            InitializeComponent();
            this.player = player;
            this.mainForm = mainForm;
            this.players = players;
            this.GameStateTiles = tiles;
            this.currentPlayerIndex = currentPlayerIndex;
            // Lọc các ô đất của người chơi (có thể có nhà hoặc không)
            ownedTiles = tiles.Where(t => t.PlayerId == player.ID).ToList();
            if (ownedTiles.Count == 0)
            {
                MessageBox.Show("Bạn không sở hữu ô đất nào!", "Thông báo");
                CanOpen = false;
                return;
            }
            // Setup ListBox
            foreach (var tile in ownedTiles)
            {
                listBoxTiles.Items.Add($"{tile.Name} (Cấp nhà: {tile.Level})");
            }
            btnSell.Text = "💰 Bán đất & nhà";
            btnSell.Click += BtnSell_Click;
        }
        private async void BtnSell_Click(object? sender, EventArgs e)
        {
            if (listBoxTiles.SelectedIndex == -1)
            {
                MessageBox.Show("Vui lòng chọn một ô đất!");
                return;
            }
            var selectedTile = ownedTiles[listBoxTiles.SelectedIndex];
            int refund = await selectedTile.SellLandAndHouses(currentPlayerIndex, players, GameStateTiles);
            mainForm.AddMoney(refund,player);
            selectedTile.PlayerId = null;
            mainForm.UpdateTileDisplay(selectedTile.Id - 1, player);
            MessageBox.Show($"Bạn đã bán {selectedTile.Name} và nhận ${refund}", "Đã bán");
            this.Close();
        }
    }
}

```

### MonopolyWinForms\FormManage\FormSellProperty.Designer.cs
```cs
﻿namespace MonopolyWinForms.FormManage
{
    partial class FormSellProperty
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            btnSell = new Button();
            listBoxTiles = new ListBox();
            SuspendLayout();
            // 
            // btnSell
            // 
            btnSell.Location = new Point(39, 236);
            btnSell.Name = "btnSell";
            btnSell.Size = new Size(410, 50);
            btnSell.TabIndex = 3;
            btnSell.Text = ".";
            btnSell.UseVisualStyleBackColor = true;
            // 
            // listBoxTiles
            // 
            listBoxTiles.FormattingEnabled = true;
            listBoxTiles.ItemHeight = 25;
            listBoxTiles.Location = new Point(39, 39);
            listBoxTiles.Name = "listBoxTiles";
            listBoxTiles.Size = new Size(410, 179);
            listBoxTiles.TabIndex = 2;
            // 
            // FormSellProperty
            // 
            AutoScaleDimensions = new SizeF(10F, 25F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(528, 313);
            Controls.Add(btnSell);
            Controls.Add(listBoxTiles);
            Name = "FormSellProperty";
            Text = "FormSellProperty";
            ResumeLayout(false);
        }

        #endregion

        private Button btnSell;
        private ListBox listBoxTiles;
    }
}
```

### MonopolyWinForms\FormManage\GameResultForm.cs
```cs
﻿using MonopolyWinForms.GameLogic;


namespace MonopolyWinForms.FormManage
{
    public class GameResultForm : Form
    {
        public GameResultForm(List<Player> players, List<Tile> tiles)
        {
            Text = "🏆 Kết quả trò chơi";
            Size = new Size(550, 250);
            StartPosition = FormStartPosition.CenterScreen;

            ListView listView = new ListView
            {
                Dock = DockStyle.Fill,
                View = View.Details,
                FullRowSelect = true
            };

            listView.Columns.Add("Thứ hạng", 100);
            listView.Columns.Add("Người chơi", 120);
            listView.Columns.Add("Tổng tài sản ($)", 140);
            listView.Columns.Add("Trạng thái", 140);

            // Tính tổng tài sản của mỗi người
            var playerAssets = players.Select(p => new
            {
                Player = p,
                TotalAssets = p.Money + tiles.Where(t => t.PlayerId == p.ID).Sum(t =>
                    t.LandPrice + t.Level * t.HousePrice)
            })
            .OrderByDescending(p => p.TotalAssets)
            .ToList();

            int rank = 1;
            foreach (var p in playerAssets)
            {
                string status = p.Player.IsBankrupt || p.TotalAssets == 0 ? "Phá sản" : "Còn tài sản";
                ListViewItem item = new ListViewItem(rank.ToString());
                item.SubItems.Add(p.Player.ID.ToString());
                item.SubItems.Add(p.TotalAssets.ToString());
                item.SubItems.Add(status);
                listView.Items.Add(item);
                rank++;
            }

            Controls.Add(listView);
        }
    }
}

```

### MonopolyWinForms\GameLogic\BankruptcyManager.cs
```cs
﻿using MonopolyWinForms.FormManage;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.GameLogic
{
    public class BankruptcyManager
    {
        private List<Player> players;
        private List<Tile> tiles;
        private int currentPlayerIndex;
        private Panel[] panels;
        private Dictionary<int, Panel> playerMarkers;
        private MainForm mainForm;
        public BankruptcyManager(List<Player> players, List<Tile> tiles, Panel[] panels,
                                 Dictionary<int, Panel> playerMarkers, MainForm form, int currentPlayerIndex)
        {
            this.players = players;
            this.tiles = tiles;
            this.panels = panels;
            this.playerMarkers = playerMarkers;
            this.mainForm = form;
            this.currentPlayerIndex = currentPlayerIndex;
        }

        public void CheckPlayerBankruptcy(Player player)
        {
            if (player.Money < 0 && !player.IsBankrupt)
            {
                int totalAssets = CalculatePlayerAssets(player);

                if (player.Money + totalAssets < 0)
                    ProcessBankruptcy(player);
                else
                    ForceSellAssets(player);
            }
        }
        public int CalculatePlayerAssets(Player player)
        {
            int total = 0;
            foreach (var tile in tiles.Where(t => t.PlayerId == player.ID))
            {
                total += tile.LandPrice;
                if (tile.Level > 0)
                {
                    total += tile.HousePrice * (tile.Level < 5 ? tile.Level : 3);
                    if (tile.Level == 5) total += tile.HotelPrice;
                }
            }
            return total;
        }
        private void ProcessBankruptcy(Player player)
        {
            player.DeclareBankruptcy();

            foreach (var tile in tiles.Where(t => t.PlayerId == player.ID))
            {
                tile.PlayerId = null;
                tile.Level = 0;
                mainForm.UpdateTileDisplay(tiles.IndexOf(tile), player);
            }

            if (playerMarkers.ContainsKey(player.ID))
            {
                var marker = playerMarkers[player.ID];
                panels[player.TileIndex].Controls.Remove(marker);
                playerMarkers.Remove(player.ID);
            }

            mainForm.UpdatePlayerPanel(player);
            MessageBox.Show($"Người chơi {player.ID} đã phá sản và rời khỏi game!", "Phá sản");

            players.Remove(player);
            CheckGameEnd();
        }
        private void CheckGameEnd()
        {
            var activePlayers = players.Where(p => !p.IsBankrupt).ToList();

            if (activePlayers.Count == 1)
            {
                GameResultForm resultForm = new GameResultForm(players, tiles);
                resultForm.ShowDialog();

                mainForm.DisableRollButton();
            }
        }
        public void ForceSellAssets(Player player)
        {
            var ownedTiles = tiles.Where(t => t.PlayerId == player.ID && t.Level > 0)
                                  .OrderByDescending(t => t.Level)
                                  .ThenByDescending(t => t.LandPrice)
                                  .ToList();

            if (!ownedTiles.Any())
            {
                ProcessBankruptcy(player);
                return;
            }
            using (var form = new Form())
            {
                form.Text = "Bạn cần bán tài sản để trả nợ";
                form.Width = 400;
                form.Height = 300;

                var label = new Label
                {
                    Text = $"Bạn đang nợ ${-player.Money}. Vui lòng chọn tài sản để bán:",
                    Dock = DockStyle.Top,
                    TextAlign = ContentAlignment.MiddleCenter
                };

                var listBox = new ListBox
                {
                    Dock = DockStyle.Fill,
                    DisplayMember = "DisplayText"
                };

                foreach (var tile in ownedTiles)
                {
                    int sellValue = CalculateSellValue(tile);
                    listBox.Items.Add(new
                    {
                        Tile = tile,
                        DisplayText = $"{tile.Name} (Cấp {tile.Level}) - Bán được ${sellValue}",
                        Value = sellValue
                    });
                }

                var btnSell = new Button
                {
                    Text = "Bán tài sản đã chọn",
                    Dock = DockStyle.Bottom,
                    Height = 40
                };

                btnSell.Click += (s, e) =>
                {
                    if (listBox.SelectedItem == null) return;

                    dynamic selected = listBox.SelectedItem;
                    Tile tile = selected.Tile;
                    int sellValue = selected.Value;

                    tile.SellLandAndHouses(currentPlayerIndex, players, tiles);
                    player.Money += sellValue;

                    mainForm.UpdateTileDisplay(tiles.IndexOf(tile), player);
                    mainForm.UpdatePlayerPanel(player);

                    if (player.Money >= 0)
                    {
                        form.DialogResult = DialogResult.OK;
                        form.Close();
                    }
                    else
                    {
                        listBox.Items.Clear();
                        var newList = tiles.Where(t => t.PlayerId == player.ID && t.Level > 0)
                                        .OrderByDescending(t => t.Level)
                                        .ThenByDescending(t => t.LandPrice)
                                        .ToList();

                        if (!newList.Any())
                        {
                            ProcessBankruptcy(player);
                            form.Close();
                            return;
                        }

                        foreach (var t in newList)
                        {
                            int value = CalculateSellValue(t);
                            listBox.Items.Add(new
                            {
                                Tile = t,
                                DisplayText = $"{t.Name} (Cấp {t.Level}) - Bán được ${value}",
                                Value = value
                            });
                        }
                    }
                };

                form.Controls.Add(listBox);
                form.Controls.Add(label);
                form.Controls.Add(btnSell);
                form.ShowDialog();
            }
        }

        private int CalculateSellValue(Tile tile)
        {
            int value = tile.LandPrice / 2;
            if (tile.Level > 0)
            {
                if (tile.Level == 5)
                    value += (tile.HousePrice * 3 + tile.HotelPrice) / 2;
                else
                    value += (tile.HousePrice * tile.Level) / 2;
            }
            return value;
        }
    }
}

```

### MonopolyWinForms\GameLogic\Chatbox.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Drawing;
using MonopolyWinForms.Login_Signup;

namespace MonopolyWinForms.GameLogic
{
    public class Chatbox : Panel
    {
        #nullable disable
        private RichTextBox rtbDisplay;
        private TextBox txtInput;
        private Button btnSend;
        public event Action<string, string> OnSendMessage;
        private Player curPlayer;
        public Chatbox(Player player)
        {
            InitializeComponents();
            curPlayer = player;
        }
        private void InitializeComponents()
        {
            this.Size = new Size(500, 400);
            this.BorderStyle = BorderStyle.FixedSingle;
            rtbDisplay = new RichTextBox
            {
                Location = new Point(10, 10),
                Size = new Size(480, 320),
                BorderStyle = BorderStyle.None,
                ReadOnly = true,
                BackColor = Color.White,
                Font = new Font("Arial", 10)
            };
            txtInput = new TextBox
            {
                Location = new Point(10, 360),
                BorderStyle = BorderStyle.FixedSingle,
                Size = new Size(400, 30),
            };
            btnSend = new Button
            {
                Text = "Gửi",
                Location = new Point(420, 360),
                Size = new Size(70, 30)
            };
            btnSend.Click += BtnSend_Click;
            txtInput.KeyDown += TxtInput_KeyDown;
            this.Controls.Add(rtbDisplay);
            this.Controls.Add(txtInput);
            this.Controls.Add(btnSend);
        }
        private void BtnSend_Click(object sender, EventArgs e)
        {
            SendMessage();
        }
        private void TxtInput_KeyDown(object sender, KeyEventArgs e)
        {
            if (e.KeyCode == Keys.Enter)
            {
                SendMessage();
                e.SuppressKeyPress = true;
            }
        }
        private void SendMessage()
        {
            string message = txtInput.Text.Trim();
            if (!string.IsNullOrEmpty(message))
            {
                OnSendMessage?.Invoke(Session.UserName, message);
                txtInput.Clear();
            }
        }
        public void AddMessageWithColor(string message, Color color)
        {
            if (InvokeRequired)
            {
                Invoke(new Action(() => AddMessageWithColor(message, color)));
                return;
            }
            rtbDisplay.SelectionStart = rtbDisplay.TextLength;
            rtbDisplay.SelectionLength = 0;
            rtbDisplay.SelectionColor = color;
            rtbDisplay.AppendText($"[{DateTime.Now:HH:mm:ss}] {message}{Environment.NewLine}");
            rtbDisplay.ScrollToCaret();
        }
        public void AddSystemMessage(string message)
        {
            AddMessageWithColor($"[Hệ thống] {message}", Color.Gray);
        }
        public void AddNotificationMessage(string message)
        {
            AddMessageWithColor($"[Thông báo] {message}", Color.DarkGreen);
        }
        public void AddWarningMessage(string message)
        {
            AddMessageWithColor($"[Cảnh báo] {message}", Color.Orange);
        }
        public void AddErrorMessage(string message)
        {
            AddMessageWithColor($"[Lỗi] {message}", Color.Red);
        }
        public void UpdatePlayer(Player player)
        {
            curPlayer = player;
        }
        public void ReceiveMessage(string senderName, string message)
        {
            if (senderName == Session.UserName)
            {
                AddMessageWithColor($"Bạn: {message}", Color.Blue);
            }
            else
            {
                AddMessageWithColor($"{senderName}: {message}", Color.Black);
            }
        }
    }
}

```

### MonopolyWinForms\GameLogic\CountdownClock.cs
```cs
﻿using System;
using System.Drawing;
using System.Windows.Forms;

public class CountdownClock
{
    private System.Windows.Forms.Timer timer;
    private TimeSpan remainingTime;
    private Label displayLabel;
    private Panel targetPanel;
    private Action onTimeUp;

    public CountdownClock(Panel panel, Action onTimeUpCallback)
    {
        timer = new System.Windows.Forms.Timer();
        timer.Interval = 1000;
        timer.Tick += Timer_Tick;
        this.onTimeUp = onTimeUpCallback;
        this.targetPanel = panel;
        displayLabel = new Label
        {
            Font = new Font("Segoe UI", 14, FontStyle.Bold),
            ForeColor = Color.Black,
            AutoSize = true,
        };
        displayLabel.Location = new Point(
            (panel.Width - displayLabel.Width) / 3,
            (panel.Height - displayLabel.Height) *2/5
        );
        panel.Controls.Add(displayLabel);
    }
    public void Start(int minutes)
    {
        remainingTime = TimeSpan.FromMinutes(minutes);
        UpdateLabel();
        timer.Start();
    }
    public void Stop()
    {
        timer.Stop();
    }
    private void Timer_Tick(object? sender, EventArgs e)
    {
        remainingTime = remainingTime.Subtract(TimeSpan.FromSeconds(1));
        UpdateLabel();

        if (remainingTime.TotalSeconds <= 0)
        {
            timer.Stop();
            onTimeUp?.Invoke();
        }
    }
    private void UpdateLabel()
    {
        displayLabel.Text = "⏳: " + remainingTime.ToString(@"mm\:ss");
    }

    public void UpdateRemainingTime(int remainingSeconds)
    {
        if (displayLabel.InvokeRequired)
        {
            displayLabel.Invoke(new Action(() => UpdateRemainingTime(remainingSeconds)));
            return;
        }

        remainingTime = TimeSpan.FromSeconds(remainingSeconds);
        UpdateLabel();
        
        // Nếu hết thời gian thì dừng timer
        if (remainingSeconds <= 0)
        {
            timer.Stop();
            onTimeUp?.Invoke();
        }
        else if (!timer.Enabled)
        {
            timer.Start();
        }
    }
}

```

### MonopolyWinForms\GameLogic\DiceRollHandler.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonopolyWinForms.Services;
using MonopolyWinForms.Room;
using MonopolyWinForms.Login_Signup;

namespace MonopolyWinForms.GameLogic
{
    public class DiceRollHandler
    {
        private List<Player> players;
        private List<Tile> tiles;
        private Panel[] panels;
        private Random random;
        private int currentPlayerIndex;
        private MainForm mainForm;
        public DiceRollHandler(List<Player> players, Panel[] panels, MainForm mainForm, int currentPlayerIndex, List<Tile> tiles)
        {
            this.players = players;
            this.panels = panels;
            this.random = new Random();
            this.mainForm = mainForm;
            this.currentPlayerIndex = currentPlayerIndex;
            this.tiles = tiles;
        }
        public async Task RollDiceAndMoveAsync()
        {
            var player = players[currentPlayerIndex];
            int dice1 = random.Next(1, 7);
            int dice2 = random.Next(1, 7);
            //int dice1 = 0;
            //int dice2 = 2;
            int totalSteps = dice1 + dice2;
            bool isDouble = dice1 == dice2;
            if (Session.PlayerInGameId == player.ID)
            {
                MessageBox.Show($"Bạn tung được: {dice1} và {dice2} (Tổng: {totalSteps})", "Kết quả xúc xắc");
            }
            
            //Gửi log cho tất cả người chơi
            try
            {
                var chatMessage = new
                {
                    SenderName = "Hệ thống",
                    Message = $"{players[currentPlayerIndex].Name} lắc được {dice1} và {dice2} (tổng: {totalSteps})" +
                    (isDouble ? " - Được lắc tiếp!" : ""),
                    Timestamp = DateTime.UtcNow
                };
                await GameManager.SendChatMessage(GameManager.CurrentRoomId, chatMessage);
            }
            catch (Exception ex)
            {
                mainForm.AddToGameLog($"Lỗi gửi thông tin xúc xắc: {ex.Message}", MainForm.LogType.Error);
            }
            
            
            if (player.IsInJail)
            {
                if (isDouble)
                {
                    player.IsInJail = false;
                    player.JailTurnCount = 0;
                }
                else
                {
                    player.JailTurnCount++;
                    if (player.JailTurnCount >= 3)
                    {
                        MessageBox.Show("Bạn đã ở tù 3 lượt. Trả $100 để ra tù và tiếp tục đi.", "Thoát tù sau 3 lượt");
                        if (player.Money < 100)
                        {
                            mainForm.ForceSellAssets(player);   
                            mainForm.SubtractMoney(100, player);
                        }
                        else
                        {
                            mainForm.SubtractMoney(100, player);
                        }
                        player.IsInJail = false;
                        player.JailTurnCount = 0;
                    }
                    else
                    {
                        mainForm.NextTurn();
                        return;
                    }
                }
            }
            int totalTiles = panels.Length;
            bool passStart = (player.TileIndex + totalSteps) > totalTiles;

            await mainForm.MovePlayerStepByStep(player, totalSteps, totalTiles);

            if (passStart)
            {
                mainForm.HandleStart(player);
            }

            if (isDouble)
            {
                if (player.DoubleDices == 2 || player.IsInJail)
                {
                    player.ResetDoubleDice();
                    mainForm.NextTurn();

                    if (Session.PlayerInGameId == player.ID)
                    {
                        MessageBox.Show("Bạn quá hên, nhường lượt cho người khác", "Lắc đôi 2 lần liên tiếp");
                    }

                    try
                    {
                        var chatMessage = new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{players[currentPlayerIndex].Name} lắc được đôi 2 lần liên tiếp. Đổi lượt",
                            Timestamp = DateTime.UtcNow
                        };
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, chatMessage);
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin xúc xắc: {ex.Message}", MainForm.LogType.Error);
                    }
                    return;
                }
                else
                {
                    player.DoubleDices++;
                }

                var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                await GameManager.UpdateGameState(gameState);
            }
            else
            {
                player.ResetDoubleDice();
                mainForm.NextTurn();
            }
        }
    }
}

```

### MonopolyWinForms\GameLogic\GameBoard.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.GameLogic
{
    public class Tiles
    {
        public string Name { get; set; }
        public string Price { get; set; }

        public Tiles(string name, string price)
        {
            Name = name;
            Price = price;
        }
    }

    public class Board
    {
        public List<Tiles> TileList { get; set; } = new List<Tiles>();

        // Đọc thông tin từ file và khởi tạo các ô
        public Board(string filePath)
        {
            LoadTiles(filePath);
        }

        // Đọc dữ liệu từ file
        public void LoadTiles(string filePath)
        {
            if (!File.Exists(filePath))
            {
                MessageBox.Show("File không tồn tại!");
                return;
            }

            string[] lines = File.ReadAllLines(filePath);

            foreach (string line in lines)
            {
                string[] parts = line.Split(';');

                if (parts.Length >= 4)
                {
                    string name = parts[1].Trim().Trim('"', '“', '”');
                    string price = parts[3].Trim();

                    // Nếu giá = NULL hoặc 0 thì không hiển thị giá
                    if (price == "0" || string.IsNullOrEmpty(price))
                    {
                        price = "";
                    }

                    TileList.Add(new Tiles(name, price != "" ? "$" + price : ""));
                }
            }
        }

        // Hàm vẽ bàn cờ lên form
        public void GenerateBoard(Form form, List<Tiles> tiles)
        {
            int count = 0;

            int cornerSize = 150;
            int horizontalTileWidth = 75;
            int horizontalTileHeight = 150;
            int verticalTileWidth = 150;
            int verticalTileHeight = 75;

            int boardSize = 11;
            int totalWidth = 2 * cornerSize + (boardSize - 3) * horizontalTileWidth;
            int totalHeight = totalWidth;

            int offsetX = 0;
            int offsetY = 0;

            // Điểm bắt đầu là góc trên trái
            int x = offsetX;
            int y = offsetY;

            // 1. Góc trên trái
            AddTileFromList(tiles, ref count, x, y, cornerSize, cornerSize, form);

            // 2. Trên cùng (trái -> phải)
            x += cornerSize;
            for (int i = 0; i < boardSize - 2; i++)
            {
                AddTileFromList(tiles, ref count, x, y, horizontalTileWidth, horizontalTileHeight, form);
                x += horizontalTileWidth;
            }

            // 3. Góc trên phải
            AddTileFromList(tiles, ref count, x, y, cornerSize, cornerSize, form);

            // 4. Bên phải (trên -> dưới)
            y += cornerSize;
            for (int i = 0; i < boardSize - 2; i++)
            {
                AddTileFromList(tiles, ref count, x, y, verticalTileWidth, verticalTileHeight, form);
                y += verticalTileHeight;
            }

            // 5. Góc dưới phải
            AddTileFromList(tiles, ref count, x, y, cornerSize, cornerSize, form);

            // 6. Dưới cùng (phải -> trái)
            x -= horizontalTileWidth;
            for (int i = 0; i < boardSize - 2; i++)
            {
                AddTileFromList(tiles, ref count, x, y, horizontalTileWidth, horizontalTileHeight, form);
                x -= horizontalTileWidth;
            }

            // 7. Góc dưới trái
            AddTileFromList(tiles, ref count, 0, y, cornerSize, cornerSize, form);

            // 8. Bên trái (dưới -> lên)
            y -= verticalTileHeight;
            for (int i = 0; i < boardSize - 2; i++)
            {
                AddTileFromList(tiles, ref count, 0, y, verticalTileWidth, verticalTileHeight, form);
                y -= verticalTileHeight;
            }
        }





        private void AddTileFromList(List<Tiles> tiles, ref int count, int x, int y, int width, int height, Form form)
        {
            if (count >= tiles.Count) return;
            var tileData = tiles[count++];

            Panel panel = new Panel
            {
                Location = new Point(x, y),
                Size = new Size(width, height),
                BorderStyle = BorderStyle.FixedSingle,
                BackColor = Color.Beige
            };

            Label lblName = new Label
            {
                Text = tileData.Name,
                AutoSize = false,
                TextAlign = ContentAlignment.MiddleCenter,
                Dock = DockStyle.Top,
                Height = height / 2
            };

            Label lblPrice = new Label
            {
                Text = tileData.Price.ToString(),
                AutoSize = false,
                TextAlign = ContentAlignment.MiddleCenter,
                Dock = DockStyle.Bottom,
                Height = height / 2
            };

            panel.Controls.Add(lblName);
            panel.Controls.Add(lblPrice);
            form.Controls.Add(panel);
        }


    }
}

```

### MonopolyWinForms\GameLogic\InitializePlayerMarker.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.GameLogic
{
    public class InitializePlayerMarker
    {
        private Panel[] panels;
        private Dictionary<int, Panel> playerMarkers;
        private MainForm MainForm;
        // Khi sử dụng Action, nhớ kiểm tra null:
        public InitializePlayerMarker(Panel[] panels, Dictionary<int, Panel> playerMarkers, MainForm mainForm)
        {
            this.panels = panels;
            this.playerMarkers = playerMarkers;
            MainForm = mainForm;
        }
        public void InitializePlayerMarkerUI(Player player)
        {
            Panel marker = new Panel
            {
                Size = new Size(24, 24),
                BackColor = player.Color,
                Name = $"player{player.ID}Marker"
            };
            // Tạo hình tròn
            var path = new System.Drawing.Drawing2D.GraphicsPath();
            path.AddEllipse(0, 0, marker.Width, marker.Height);
            marker.Region = new Region(path);
            var tilePanel = panels[player.TileIndex];
            var tile = tilePanel?.Tag as Tile;
            if (tilePanel != null)
            {
                // Thêm sự kiện Paint để vẽ lại khi cần
                marker.Paint += (sender, e) => {
                    e.Graphics.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias;
                    using (var brush = new SolidBrush(player.Color))
                    { // chỉnh màu
                        e.Graphics.FillEllipse(brush, 0, 0, marker.Width, marker.Height);
                    }
                };
                Point position = CalculateMarkerPosition(tilePanel, tile!, player.ID);
                marker.Location = position;
                tilePanel.Controls.Add(marker);
                marker.BringToFront();
                playerMarkers[player.ID] = marker;
            }
        }
        public void UpdatePlayerMarkerPosition(Player player, int newIndex)
        {
            MovePlayerToTile(player, newIndex, true);
        }
        public async Task MovePlayerStepByStep(Player player, int steps, int totalTiles)
        {
            for (int i = 1; i <= steps; i++)
            {
                int nextIndex = (player.TileIndex + 1) % totalTiles;
                bool isLastStep = (i == steps);
                MovePlayerToTile(player, nextIndex, isLastStep); // chỉ hiện form ở bước cuối
                await Task.Delay(200);
            }
        }
        private Point CalculateMarkerPosition(Panel tilePanel, Tile tile, int playerId)
        {
            const int markerSize = 24;
            int offsetX = 0;
            int offsetY = 0;
            switch (playerId)
            {
                case 1: // Player 1: trên trái
                    offsetX = -20;
                    offsetY = -15;
                    break;
                case 2: // Player 2: trên phải
                    offsetX = 20;
                    offsetY = -15;
                    break;
                case 3: // Player 3: dưới trái
                    offsetX = -20;
                    offsetY = 15;
                    break;
                case 4: // Player 4: dưới phải
                    offsetX = 20;
                    offsetY = 15;
                    break;
            }
            int centerX = (tilePanel.Width - markerSize) / 2 + offsetX;
            int centerY = (tilePanel.Height - markerSize) / 2 + offsetY;
            return new Point(centerX, centerY);
        }
        private void MovePlayerToTile(Player player, int tileIndex, bool showAction)
        {
            if (playerMarkers.TryGetValue(player.ID, out var marker))
            {
                if (player.TileIndex >= 0 && player.TileIndex < panels.Length)
                {
                    panels[player.TileIndex].Controls.Remove(marker);
                }

                player.TileIndex = tileIndex;
                var newTilePanel = panels[tileIndex];
                var tile = newTilePanel?.Tag as Tile;

                if (newTilePanel != null)
                {
                    Point newPosition = CalculateMarkerPosition(newTilePanel, tile!, player.ID);
                    newTilePanel.Controls.Add(marker);
                    marker.Location = newPosition;
                    marker.BringToFront();
                    if (tile != null && showAction) MainForm.ShowTileActionForm(tile, player);
                }
            }
        }
    }
}

```

### MonopolyWinForms\GameLogic\Monopoly.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.GameLogic
{
    public class Monopoly
    {
        private List<Tile> tiles;
        public Monopoly(List<Tile> tiles)
        {
            this.tiles = tiles;
        }
        // Trả về số ô đất mà người chơi sở hữu trong nhóm MonoGroup cụ thể
        public int CountOwnedTilesInGroup(int playerId, string monoGroup)
        {
            return tiles.Count(t => t.PlayerId == playerId && t.Monopoly == monoGroup);
        }
        // Trả về tổng số ô trong nhóm MonoGroup
        public int TotalTilesInGroup(string monoGroup)
        {
            return tiles.Count(t => t.Monopoly == monoGroup);
        }
        // Kiểm tra người chơi có sở hữu toàn bộ nhóm hay không
        public bool HasFullMonopoly(int playerId, string monoGroup)
        {
            int owned = CountOwnedTilesInGroup(playerId, monoGroup);
            int total = TotalTilesInGroup(monoGroup);
            return owned == total && total > 0;
        }
        // Số monopoly mà người chơi đã sở hữu toàn bộ
        public int GetAllFullMonopolyGroups(int playerId)
        {
            var groups = tiles.Select(t => t.Monopoly).Distinct();
            return groups.Count(g => HasFullMonopoly(playerId, g));
        }
        // Đếm số lượng xe buýt mà người chơi sở hữu trong nhóm Monopoly
        public int CountBusesOwned(int playerId)
        {
            return tiles.Count(t => t.PlayerId == playerId && t.Monopoly == "9");
        }
        public int CountCompaniesOwned(int playerId)
        {
            return tiles.Count(t => t.PlayerId == playerId && t.Monopoly == "10");
        }
        public bool CheckWin(int playerID)
        {
            if (GetAllFullMonopolyGroups(playerID) == 3)
                return true;
            else if (CountBusesOwned(playerID) == 4)
                return true;
            else return false;
        }
    }
}

```

### MonopolyWinForms\GameLogic\Player.cs
```cs
﻿using System;
using System.Drawing;  // Thêm namespace này nếu dùng Color, Image
using System.IO;
using System.Windows.Forms;

namespace MonopolyWinForms.GameLogic
{
    public class Player
    {
        public int ID { get; set; }
        public string Name { get; set; } = string.Empty;
        public int Money { get; set; }
        public int OutPrison { get; set; }
        public int ReduceHalfMoney { get; set; }
        public int DoubleMoney { get; set; }
        public int DoubleDices { get; set; }
        public int TileIndex { get; set; }
        public bool IsBankrupt { get; set; }
        public Color Color { get; set; }
        public bool IsInJail { get; set; }
        public int JailTurnCount { get; set; }
        public Player(int id, int initialMoney, string name)
        {
            ID = id;
            Name = name;
            Money = initialMoney;
            OutPrison = 0;
            ReduceHalfMoney = 0;
            DoubleMoney = 0;
            DoubleDices = 0;
            TileIndex = 1;
            Color = GetDefaultColor(id);
        }
        public void AddOutPrisonCard() => OutPrison++;
        public void AddReduceHalfCard() => ReduceHalfMoney++;
        public void AddDoubleMoneyCard() => DoubleMoney++;
        public void RolledDoubleDice() => DoubleDices++;
        public void ResetDoubleDice() => DoubleDices = 0;
        public bool MustGoToJailByDouble() => DoubleDices >= 3;
        public Image GetAvatar()
        {
            string imagePath = Path.Combine(Application.StartupPath, "Assets", "Images", $"player{ID}.png");
            return Image.FromFile(imagePath);
        }
        private Color GetDefaultColor(int id)
        {
            return id switch
            {
                1 => Color.Blue,
                2 => Color.Yellow,
                3 => Color.Red,
                4 => Color.Green,
                _ => Color.Gray
            };
        }
        public void DeclareBankruptcy()
        {
            IsBankrupt = true;
        }
    }
}
```

### MonopolyWinForms\GameLogic\Property.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.GameLogic
{
    public class Property
    {
        private Player player;
        private MainForm mainForm;
        public Property(Player player, MainForm mainForm)
        {
            this.player = player;
            this.mainForm = mainForm;
        }
        public void AddMoney(int amount)
        {
            player.Money += amount;
            
        }
        public void SubtractMoney(int amount)
        {
            if (player.Money < amount)
            {
                mainForm.CheckPlayerBankruptcy(player);
            }
            else player.Money -= amount;
            mainForm.UpdatePlayerPanel(player);
        }
    }
}

```

### MonopolyWinForms\GameLogic\RentCalculator.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.GameLogic
{
    public class RentCalculator
    {
        private Monopoly monopoly;
        private Random random;

        public RentCalculator(Monopoly monopoly)
        {
            this.monopoly = monopoly;
            this.random = new Random();
        }

        public int CalculateRent(Tile tile, int playerId)
        {
            if (tile == null) return 0;
            if (tile.PlayerId == null || tile.PlayerId == playerId)
                return 0;

            switch (tile.Monopoly)
            {
                case "9": // Bến xe
                    int busCount = monopoly.CountBusesOwned(tile.PlayerId.Value);
                    return busCount switch
                    {
                        1 => 50,
                        2 => 100,
                        3 => 150,
                        4 => 200,
                        _ => 0
                    };

                case "10": // Công ty
                    int companyCount = monopoly.CountCompaniesOwned(tile.PlayerId.Value);
                    int dice1 = random.Next(1, 7);
                    int dice2 = random.Next(1, 7);
                    int diceValue = dice1 + dice2;

                    MessageBox.Show($"Bạn tung được: {dice1} và {dice2} (Tổng: {diceValue})", "Kết quả xúc xắc");

                    return companyCount switch
                    {
                        1 => diceValue * 20,
                        2 => diceValue * 50,
                        _ => 0
                    };

                default: // Ô đất thường
                    return tile.Level switch
                    {
                        1 => tile.LandPrice / 2,
                        2 => (tile.LandPrice + tile.HousePrice) / 2,
                        3 => (tile.LandPrice + tile.HousePrice * 2) / 2,
                        4 => (tile.LandPrice + tile.HousePrice * 3) / 2,
                        5 => (tile.LandPrice + tile.HousePrice * 3 + tile.HotelPrice) / 2,
                        _ => 0
                    };
            }
        }
    }
}

```

### MonopolyWinForms\GameLogic\TileActionHandler.cs
```cs
﻿using buyLand_Home;
using MonopolyWinForms.BuyLand_Home;
using MonopolyWinForms.FormManage;
using MonopolyWinForms.Login_Signup;
using MonopolyWinForms.Services;
using MonopolyWinForms.Room;
using MonopolyWinForms;
using System.Security.Policy;
using static MonopolyWinForms.MainForm;
using System.Threading.Tasks;

namespace MonopolyWinForms.GameLogic
{
    public class TileActionHandler
    {
        private List<Player> players;
        private List<Tile> tiles;
        private Panel[] panels;
        private int currentPlayerIndex;
        private Dictionary<int, Panel> playerMarkers;
        private Monopoly monopoly;
        private readonly MainForm mainForm;
        private Random random;
        private BankruptcyManager BankManager;
        public TileActionHandler(List<Player> players, List<Tile> tiles, Panel[] panels, int currentPlayerIndex, Monopoly monopoly,
            MainForm mainForm, Random random, Dictionary<int, Panel> playerMarkers)
        {
            this.players = players;
            this.tiles = tiles;
            this.panels = panels;
            this.currentPlayerIndex = currentPlayerIndex;
            this.monopoly = monopoly;
            this.mainForm = mainForm;
            this.random = random;
            this.playerMarkers = playerMarkers;
            this.mainForm = mainForm; 
            this.BankManager = new BankruptcyManager(players, tiles, panels, playerMarkers, mainForm, currentPlayerIndex);
        }
        public void UpdateCurrentPlayerIndex(int newIndex)
        {
            this.currentPlayerIndex = newIndex;
        }
        public async Task ShowTileActionForm(Tile tile, Player currentPlayer)
        {
            if (tile.PlayerId != null && tile.PlayerId != currentPlayer.ID)
            {
                int rent = mainForm.CalculateRent(tile, currentPlayer.ID);
                if (currentPlayer.DoubleMoney >= 1)
                {
                    int money = rent * 2;
                    currentPlayer.Money -= (money);
                    int owner = tile.PlayerId.Value;
                    mainForm.AddMoney(money, players[owner - 1]);
                    currentPlayer.DoubleMoney--;
                    mainForm.UpdatePlayerPanel(currentPlayer);
                    mainForm.UpdatePlayerPanel(players[owner - 1]);
                    MessageBox.Show($"Bạn phải trả ${rent * 2} tiền thuê cho {players[owner - 1].Name}!", "Trả tiền thuê");
                    var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                    await GameManager.UpdateGameState(gameState);
                    return;
                }
                else if (currentPlayer.ReduceHalfMoney >= 1)
                {
                    int money = rent / 2;
                    currentPlayer.Money -= money;
                    int owner = tile.PlayerId.Value;
                    mainForm.AddMoney(money, players[owner - 1]);
                    currentPlayer.ReduceHalfMoney--;
                    mainForm.UpdatePlayerPanel(currentPlayer);
                    mainForm.UpdatePlayerPanel(players[owner - 1]);
                    MessageBox.Show($"Bạn phải trả ${rent / 2} tiền thuê cho {players[owner - 1].Name}!", "Trả tiền thuê");
                    var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                    await GameManager.UpdateGameState(gameState);
                    return;
                }else{
                    currentPlayer.Money -= rent;
                    int owner = tile.PlayerId.Value;
                    mainForm.AddMoney(rent, players[owner - 1]);
                    mainForm.UpdatePlayerPanel(currentPlayer);
                    mainForm.UpdatePlayerPanel(players[owner - 1]);
                    MessageBox.Show($"Bạn phải trả ${rent} tiền thuê cho {players[owner - 1].Name}!", "Trả tiền thuê");
                    var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                    await GameManager.UpdateGameState(gameState);
                    return;
                }
            }
            switch (tile.Monopoly)
            {
                case "0":
                    HandleSpecialTile(tile, currentPlayer);
                    break;
                case "9":
                    HandleBusStationTile(tile, currentPlayer);
                    break;
                case "10":
                    HandleCompanyTile(tile, currentPlayer);
                    break;
                default:
                    HandlePropertyTile(tile, currentPlayer);
                    break;
            }
        }
        private void HandleSpecialTile(Tile tile, Player currentPlayer)
        {
            switch (tile.Name)
            {
                case "Khí vận":
                    DrawChanceCard(currentPlayer);
                    break;
                case "Cơ hội":
                    DrawCommunityChestCard(currentPlayer);
                    break;
                case "Thuế thu nhập":
                    HandleIncomeTax(currentPlayer);
                    break;
                case "Thuế đặc biệt":
                    HandleSpecialTax(currentPlayer);
                    break;
                case "Ô bắt đầu":
                    HandleStart(currentPlayer);
                    break;
                case "Đi thẳng vào tù":
                    HandleGoToJail(currentPlayer);
                    break;
            }
            mainForm.UpdatePlayerPanel(currentPlayer);
        }
        private void DrawChanceCard(Player player)
        {
            var path = "Co_hoi.txt";
            var cards = File.ReadAllLines(path).Where(line => !string.IsNullOrWhiteSpace(line)).ToArray();
            if (cards.Length > 0){
                string card = cards[random.Next(cards.Length)];
                //string card = cards[8];
                ProcessCardEffect(player, card, "Khí vận");
            }
        }
        private void DrawCommunityChestCard(Player player)
        {
            var path = "Co_hoi.txt";
            var cards = File.ReadAllLines(path).Where(line => !string.IsNullOrWhiteSpace(line)).ToArray();
            if (cards.Length > 0){
                string card = cards[random.Next(cards.Length)];
                //string card = cards[8];
                ProcessCardEffect(player, card, "Cơ hội");
            }
        }
        private async void ProcessCardEffect(Player player, string card, string deckType)
        {
            string message = $"{deckType}: {card}";

            // Hiển thị MessageBox cho người chơi hiện tại
            if (Session.PlayerInGameId == player.ID)
            {
                MessageBox.Show(message, "Thẻ Bài");
            }

            // Gửi thông tin thẻ lên Firebase để tất cả người chơi nhận được
            try 
            {
                var chatMessage = new
                {
                    SenderName = "Hệ thống",
                    Message = $"{player.Name} rút được thẻ {deckType}: {card}",
                    Timestamp = DateTime.UtcNow
                };
                await GameManager.SendChatMessage(GameManager.CurrentRoomId, chatMessage);
            }
            catch (Exception ex)
            {
                mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
            }

            bool movePlayer = false;
            int moveToIndex = -1;
            switch (card)
            {
                case "Đi thẳng vào tù":
                    HandleGoToJail(player);
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} bị vào tù do rút thẻ",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    return;
                case "Tự do ra tù":
                    player.AddOutPrisonCard();
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} nhận được thẻ thoát tù",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    break;
                case "Trả gấp đôi tiền thuê cho ô tiếp theo":
                    player.DoubleMoney++;
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} sẽ trả gấp đôi tiền thuê cho ô tiếp theo",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    break;
                case "Giảm 50% tiền thuê cho ô tiếp theo":
                    player.ReduceHalfMoney++;
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} sẽ giảm 50% tiền thuê cho ô tiếp theo",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    break;
                case "Đi đến ô bắt đầu":
                    moveToIndex = 0;
                    movePlayer = true;
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} được di chuyển đến ô bắt đầu",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    break;
                case "Bán 1 căn nhà":
                    if (Session.PlayerInGameId == player.ID)
                    {
                        var sellPropertyForm = new FormSellProperty(players[currentPlayerIndex], tiles, mainForm, players, currentPlayerIndex);
                        if (sellPropertyForm.CanOpen)
                            sellPropertyForm.ShowDialog();
                    }
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} phải bán 1 căn nhà",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    break;
                case "Phá nhà":
                    if (Session.PlayerInGameId == player.ID)
                    {
                        var destroyHouseForm = new FormDestroyHouse(players[currentPlayerIndex], tiles, mainForm, players, currentPlayerIndex);
                        if (destroyHouseForm.CanOpen)
                            destroyHouseForm.ShowDialog();
                    }
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} phải phá 1 căn nhà",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    break;
                case "Đến ô bến xe tiếp theo":
                    moveToIndex = GetNextBusStation(player.TileIndex);
                    player.DoubleMoney++;
                    movePlayer = true;
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} được di chuyển đến bến xe tiếp theo và sẽ trả gấp đôi tiền thuê",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    break;
                case "Đến ô công ty tiếp theo":
                    moveToIndex = GetNextCompany(player.TileIndex);
                    movePlayer = true;
                    try 
                    {
                        await GameManager.SendChatMessage(GameManager.CurrentRoomId, new
                        {
                            SenderName = "Hệ thống",
                            Message = $"{player.Name} được di chuyển đến công ty tiếp theo",
                            Timestamp = DateTime.UtcNow
                        });
                    }
                    catch (Exception ex)
                    {
                        mainForm.AddToGameLog($"Lỗi gửi thông tin thẻ: {ex.Message}", MainForm.LogType.Error);
                    }
                    break;
            }
            if (movePlayer && moveToIndex >= 0)
            {
                int currentIndex = player.TileIndex;
                int totalTiles = tiles.Count;
                int steps = (moveToIndex - currentIndex + totalTiles) % totalTiles;
                bool passStart = (currentIndex + steps) > totalTiles || (currentIndex > moveToIndex);

                //var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                //await GameManager.UpdateGameState(gameState);
                //mainForm.UpdateGameState(gameState);

                player.TileIndex = moveToIndex;

                mainForm.UpdatePlayerMarkerPosition(player, moveToIndex);

                // 3. Cập nhật game state MỘT LẦN DUY NHẤT sau khi di chuyển xong
                //var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                //await GameManager.UpdateGameState(gameState);
                //mainForm.UpdateGameState(gameState);

                //player.TileIndex = moveToIndex;
                // 4. Xử lý đi qua ô bắt đầu nếu có
                if (passStart)
                {
                    //// Cập nhật game state sau khi nhận tiền
                    //gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
                    //await GameManager.UpdateGameState(gameState);
                    //mainForm.UpdateGameState(gameState);
                    mainForm.HandleStart(players[currentPlayerIndex]);
                }
                //File.AppendAllText("log.txt", $"Tôi là {Session.UserName} " +
                //    $"trước xử lý di chuyển với tên là {players[currentPlayerIndex].Name} đang đến ô {players[currentPlayerIndex].TileIndex}");
                //players[currentPlayerIndex].TileIndex = moveToIndex;
                //File.AppendAllText("log.txt", $"Tôi là {Session.UserName} " +
                //    $"đang xử lý di chuyển với tên là {players[currentPlayerIndex].Name} đang đến ô {players[currentPlayerIndex].TileIndex}");
                //await GameManager.UpdateGameState(gameState);
                //mainForm.UpdatePlayerMarkerPosition(player, moveToIndex);
                //mainForm.UpdateGameState(gameState);
                return; // Kết thúc xử lý thẻ
            }
        }
        public void HandleStart(Player player)
        {
            mainForm.AddMoney(200,player);
            if (Session.PlayerInGameId == player.ID)
            {
                MessageBox.Show("Bạn đi qua ô bắt đầu, nhận $200!", "Nhận tiền");
            }
            mainForm.UpdatePlayerPanel(player);
        }
        private void HandleIncomeTax(Player player)
        {
            int money = mainForm.CalculatePlayerAssets(player);
            int tax = Math.Min(200, (money + player.Money) / 10);
            mainForm.SubtractMoney(tax, player);
            MessageBox.Show($"Thuế thu nhập: Bạn phải trả ${tax}", "Thuế");
        }
        private void HandleSpecialTax(Player player)
        {
            int money = mainForm.CalculatePlayerAssets(player);
            int tax = (int)((money + player.Money) * 15 / 100);
            mainForm.SubtractMoney(tax, player);
            MessageBox.Show($"Thuế đặc biệt: trả 15% tổng tài sản", "Thuế");
        }
        public void HandleGoToJail(Player player)
        {
            if (player.OutPrison > 0){
                player.OutPrison--;
                MessageBox.Show("Sử dụng thẻ thoát tù, bạn không phải vào tù", "Thoát Tù");
                return;
            }
            int jailIndex = tiles.FindIndex(t => t.Name == "Nhà tù");
            player.TileIndex = jailIndex;
            mainForm.UpdatePlayerMarkerPosition(player, jailIndex);
            player.IsInJail = true;
            player.JailTurnCount = 0;
        }
        private void HandleBusStationTile(Tile tile, Player currentPlayer)
        {
            if (tile.PlayerId == null){
                if (currentPlayer.Money < tile.LandPrice){
                    MessageBox.Show("Không đủ tiền mua bến xe!", "Thông báo");
                    return;
                }using (var buyBusForm = new BuyBus(currentPlayer.ID, tile, monopoly, mainForm, tiles, players, currentPlayerIndex)){
                    if (buyBusForm.ShowDialog() == DialogResult.OK){
                        currentPlayer.Money -= tile.LandPrice;
                        mainForm.UpdatePlayerPanel(currentPlayer);
                        mainForm.UpdateBusStationRent(currentPlayer.ID);
                        mainForm.UpdateTileDisplay(Array.IndexOf(panels, panels.First(p => p.Tag == tile)), currentPlayer);
                    }
                }
            }
        }
        private void HandleCompanyTile(Tile tile, Player currentPlayer)
        {
            if (tile.PlayerId == null)
            {
                if (currentPlayer.Money < tile.LandPrice){
                    MessageBox.Show("Không đủ tiền!", "Thông báo");
                    return;
                }using (var buyCompanyForm = new BuyCompany(currentPlayer.ID, tile, monopoly, mainForm, tiles, players, currentPlayerIndex)){
                    if (buyCompanyForm.ShowDialog() == DialogResult.OK){
                        currentPlayer.Money -= tile.LandPrice;
                        mainForm.UpdatePlayerPanel(currentPlayer);
                        mainForm.UpdateCompanyRent(currentPlayer.ID);
                        mainForm.UpdateTileDisplay(Array.IndexOf(panels, panels.First(p => p.Tag == tile)), currentPlayer);
                    }
                }
            }
        }
        private void HandlePropertyTile(Tile tile, Player currentPlayer)
        {
            if (tile.PlayerId == null){
                if (currentPlayer.Money < tile.LandPrice){
                    MessageBox.Show("Không đủ tiền mua đất!", "Thông báo");
                    return;
                }using (var landForm = new BuyHome_Land(currentPlayer, tile, monopoly, mainForm, players)){
                    if (landForm.ShowDialog() == DialogResult.OK){
                        currentPlayer.Money -= tile.LandPrice;
                        mainForm.UpdatePlayerPanel(currentPlayer);
                        mainForm.UpdateTileDisplay(Array.IndexOf(panels, panels.First(p => p.Tag == tile)), currentPlayer);
                    }
                }
            }else if (tile.PlayerId == currentPlayer.ID){
                int upgradeCost = tile.Level == 4 ? tile.HotelPrice : tile.HousePrice;
                if (currentPlayer.Money < upgradeCost){
                    MessageBox.Show("Không đủ tiền nâng cấp!", "Thông báo");
                    return;
                }using (var upgradeForm = new BuyHome_Land(currentPlayer, tile, monopoly, mainForm, players)){
                    if (upgradeForm.ShowDialog() == DialogResult.OK){
                        currentPlayer.Money -= upgradeCost;
                        mainForm.UpdatePlayerPanel(currentPlayer);
                         mainForm.UpdateTileDisplay(Array.IndexOf(panels, panels.First(p => p.Tag == tile)), currentPlayer);
                    }
                }
            }
        }
        private int GetNextBusStation(int currentIndex)
        {
            int[] busStations = { 5, 15, 25, 35 };
            foreach (int station in busStations){
                if (station > currentIndex)
                    return station;
            }return busStations[0];
        }
        private int GetNextCompany(int currentIndex)
        {
            int[] companies = { 12, 28 };
            foreach (int comp in companies){
                if (comp > currentIndex)
                    return comp;
            }return companies[0];
        }
    }
}
```

### MonopolyWinForms\GameLogic\Tiles.cs
```cs
﻿using MonopolyWinForms.Services;
using System;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MonopolyWinForms.GameLogic
{
    public class Tile
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
        public int? PlayerId { get; set; }
        public int LandPrice { get; set; }
        public int HousePrice { get; set; }
        public int HotelPrice { get; set; }
        public int Level { get; set; }
        public string Monopoly { get; set; } = string.Empty;
        public int RentPrice { get; set; }
        public Tile() { }
        public Tile(int id, string name, int playerId, int landPrice, int housePrice, int hotelPrice, int level, string monopoly)
        {
            Id = id;
            Name = name;
            PlayerId = playerId;
            LandPrice = landPrice;
            HousePrice = housePrice;
            HotelPrice = hotelPrice;
            Level = level;
            Monopoly = monopoly;
        }
        public static List<Tile> LoadTilesFromFile()
        {
            var tiles = new List<Tile>();
            // Đường dẫn đến file Tiles.txt trong thư mục của ứng dụng
            string filePath = Path.Combine(Application.StartupPath, "Tiles.txt");
            if (!File.Exists(filePath))
            {
                return tiles; // Trả về danh sách trống nếu file không tồn tại
            }
            // Đọc tất cả dòng trong file vào một mảng
            string[] lines = File.ReadAllLines(filePath);
            // Duyệt qua từng dòng trong mảng lines
            foreach (var line in lines)
            {
                var parts = line.Split(',');
                if (parts.Length < 8) // Kiểm tra xem có ít hơn 8 phần tử không, nếu có thì thử dấu ';'
                {
                    parts = line.Split(';');
                }
                if (parts.Length < 8)
                {
                    continue;
                }
                var tile = new Tile
                {
                    Id = int.Parse(parts[0]),
                    Name = parts[1].Replace("\"", ""),
                    LandPrice = int.Parse(parts[3]),
                    HousePrice = int.Parse(parts[4]),
                    HotelPrice = int.Parse(parts[5]),
                    Level = int.Parse(parts[6]),
                    Monopoly = parts[7].Trim()
                };
                // Xử lý PlayerId (kiểm tra "null" và chuyển thành int? hoặc null)
                tile.PlayerId = string.IsNullOrWhiteSpace(parts[2]) || parts[2].ToLower() == "null"
                    ? (int?)null
                    : int.TryParse(parts[2], out int playerId) ? playerId : (int?)null;

                tiles.Add(tile);
            }
            return tiles;
        }
        public async Task DestroyOneHouseLevel(int currentPlayerIndex, List<Player> players, List<Tile> tiles)
        {
            if (Level > 0)
            {
                Level--;
                if (Level == 0)
                {
                    PlayerId = null;
                }
            }
            var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
            await GameManager.UpdateGameState(gameState);
        }
        public async Task<int> SellLandAndHouses(int currentPlayerIndex, List<Player> players, List<Tile> tiles)
        {
            int value = LandPrice;
            if (Level >= 2 && Level <= 4)
                value += HousePrice * Level;
            else if (Level == 5)
                value += HotelPrice;

            Level = 0;
            PlayerId = null;
            var gameState = new GameState(GameManager.CurrentRoomId, currentPlayerIndex, players, tiles);
            await GameManager.UpdateGameState(gameState);
            return value/2;
        }
    }
}

```

### MonopolyWinForms\GameLogic\UpdatePlayerPanel.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.GameLogic
{
    public class UpdatePlayerPanel
    {
        public UpdatePlayerPanel() { }
        public void UpdatePlayerPanelUI(Panel playerPanel, Player player)
        {
            playerPanel.Controls.Clear();
            playerPanel.Size = new Size(220, 60);
            PictureBox pic = new PictureBox
            {
                Size = new Size(50, 50),
                Location = new Point(5, 5),
                SizeMode = PictureBoxSizeMode.Zoom,
                Image = player.GetAvatar()
            };
            playerPanel.Controls.Add(pic);

            Label nameLabel = new Label
            {
                Text = player.Name,
                Location = new Point(60, 5),
                AutoSize = true,
                Font = new Font("Arial", 10, FontStyle.Bold),
                ForeColor = Color.Black
            };
            playerPanel.Controls.Add(nameLabel);

            Label moneyLabel = new Label
            {
                Text = $"Tiền: ${player.Money}",
                Location = new Point(60, 30),
                AutoSize = true,
                Font = new Font("Arial", 9),
                ForeColor = Color.Green
            };
            playerPanel.Controls.Add(moneyLabel);
        }
    }
}

```

### MonopolyWinForms\GameLogic\UpdateTileDisplay.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonopolyWinForms.Login_Signup;

namespace MonopolyWinForms.GameLogic
{
    public class UpdateTileDisplay
    {        
        private Panel[] panels;
        private List<Tile> tiles;
        private List<Player> players;
        private MainForm mainform;
        private Monopoly monopoly;
        public UpdateTileDisplay(Panel[] panels, List<Tile> tiles, MainForm mainform, Monopoly monopoly, List<Player> players)
        {
            this.panels = panels;
            this.tiles = tiles;
            this.mainform = mainform;
            this.monopoly = monopoly;
            this.players = players;
        }

        public void UpdateTileDisplayUI(int index, Player currentPlayer)
        {
            if (index < 0 || index >= panels.Length || index >= tiles.Count)
                return;
            var tile = tiles[index];
            int playerID = currentPlayer.ID;
            var panel = panels[index];
            // Lưu lại tất cả các marker từ Dictionary
            var markersToKeep = new List<Panel>();
            foreach (var kvp in mainform.playerMarkers)
            {
                if (panel.Controls.Contains(kvp.Value))
                {
                    markersToKeep.Add(kvp.Value);
                }
            }
            // Xóa các controls khác (giữ lại marker)
            var controlsToRemove = new List<Control>();
            foreach (Control control in panel.Controls)
            {
                if (!markersToKeep.Contains(control))
                {
                    controlsToRemove.Add(control);
                }
            }
            foreach (var control in controlsToRemove)
            {
                panel.Controls.Remove(control);
            }
            int rentPrice = 0;
            if (tile.Monopoly == "9" && monopoly != null)
            {
                rentPrice = 50 * monopoly.CountBusesOwned(playerID);
            }
            else if (tile.Monopoly == "10" && monopoly != null)
            {
                if (monopoly.CountCompaniesOwned(playerID) == 1)
                    rentPrice = 25;
                else
                    rentPrice = 100;
            }
            else if (tile.Monopoly != "9" && tile.Monopoly != "10")
            {
                rentPrice = tile.Level switch
                {
                    1 => tile.LandPrice,
                    >= 2 and <= 4 => tile.LandPrice + tile.HousePrice * (tile.Level - 1),
                    5 => tile.LandPrice + tile.HousePrice * 3 + tile.HotelPrice,
                    _ => 0
                };
            }
            if (tile.Monopoly != "0" && tile.Monopoly != "9" && tile.Monopoly != "10")
            {
                if (panels[index].Width > panels[index].Height)
                {
                    if (panels[index].Location.X < 500)
                    {
                        Panel colorPanel = new Panel
                        {
                            Size = new Size(panels[index].Width / 7, panels[index].Height),
                            BackColor = GetPanelColor(tile.Monopoly),
                            Location = new Point(panels[index].Width - panels[index].Width / 7, 0) //bên trái
                        };
                        panels[index].Controls.Add(colorPanel);
                    }
                    else
                    {
                        Panel colorPanel = new Panel
                        {
                            Size = new Size(panels[index].Width / 7, panels[index].Height),
                            BackColor = GetPanelColor(tile.Monopoly),
                            Location = new Point(panels[index].Width - panels[index].Width, 0) // bên phải
                        };
                        panels[index].Controls.Add(colorPanel);
                    }
                }
                else
                {
                    Panel colorPanel = new Panel
                    {
                        Size = new Size(panels[index].Width, panels[index].Height / 5),
                        BackColor = GetPanelColor(tile.Monopoly),
                        Location = new Point(0, 0)
                    };
                    panels[index].Controls.Add(colorPanel);
                }
            }
            // === 2. Label chữ nằm ở dưới ===
            Label label = new Label
            {
                Name = "labelrent",
                AutoSize = false,
                ForeColor = Color.Black,
                Font = new Font("Arial", 6, FontStyle.Bold)
            };
            // Phân loại hiển thị tùy theo loại ô
            // Ô bình thường
            if (tile.Monopoly != "0" && tile.Monopoly != "9" && tile.Monopoly != "10")
            {
                if (panels[index].Width > panels[index].Height)
                {
                    if (panels[index].Location.X < 500)
                    {
                        label.TextAlign = ContentAlignment.MiddleCenter;
                        label.Size = new Size(panels[index].Width * 6 / 7, panels[index].Height);
                        label.Location = new Point(0, 0);
                        label.BackColor = Color.LightBlue;
                        label.Text = tile.PlayerId == null
                            ? $"{tile.Name}\n${tile.LandPrice}"
                            : $"{tile.Name}\n${rentPrice/2}";
                        if (tile.PlayerId != null)
                        {
                            AddOwnerImageToTilePanel(panels[index], tile, currentPlayer);
                            label.TextAlign = ContentAlignment.TopCenter;
                            label.Padding = new Padding(0, 10, 0, 0);
                        }
                        else
                        {
                            label.Location = new Point(0, 0);
                            foreach (Control ctrl in panels[index].Controls.OfType<PictureBox>().ToList())
                            {
                                panels[index].Controls.Remove(ctrl);
                                ctrl.Dispose();
                            }
                        }
                    }
                    else
                    {
                        label.TextAlign = ContentAlignment.MiddleCenter;
                        label.Size = new Size(panels[index].Width * 6 / 7, panels[index].Height);
                        label.Location = new Point(panels[index].Width / 7, 0);
                        label.BackColor = Color.LightBlue;
                        label.Text = tile.PlayerId == null
                            ? $"{tile.Name}\n${tile.LandPrice}"
                            : $"{tile.Name}\n${rentPrice/2}";
                        if (tile.PlayerId != null)
                        {
                            AddOwnerImageToTilePanel(panels[index], tile, currentPlayer);
                            label.TextAlign = ContentAlignment.TopCenter;
                            label.Padding = new Padding(0, 10, 0, 0);
                        }
                        else
                        {
                            foreach (Control ctrl in panels[index].Controls.OfType<PictureBox>().ToList())
                            {
                                panels[index].Controls.Remove(ctrl);
                                ctrl.Dispose();
                            }
                        }
                    }
                }
                else
                {
                    label.TextAlign = ContentAlignment.MiddleCenter;
                    label.Size = new Size(panels[index].Width, panels[index].Height * 4 / 5);
                    label.Location = new Point(0, panels[index].Height / 5);
                    label.BackColor = Color.LightBlue;

                    label.Text = tile.PlayerId == null
                        ? $"{tile.Name}\n${tile.LandPrice}"
                        : $"{tile.Name}\n${rentPrice / 2}";
                    if (tile.PlayerId != null)
                    {
                        AddOwnerImageToTilePanel(panels[index], tile, currentPlayer);
                        label.TextAlign = ContentAlignment.TopCenter;
                        label.Padding = new Padding(0, 15, 0, 0);
                    }
                    else
                    {
                        foreach (Control ctrl in panels[index].Controls.OfType<PictureBox>().ToList())
                        {
                            panels[index].Controls.Remove(ctrl);
                            ctrl.Dispose();
                        }
                    }
                }
            }
            // Bến xe
            else if (tile.Monopoly == "9")
            {
                if (panels[index].Width > panels[index].Height)
                {
                    if (panels[index].Location.X < 500)
                    {
                        label.TextAlign = ContentAlignment.MiddleRight;
                        label.Size = new Size(panels[index].Width / 2, panels[index].Height);
                        label.Location = new Point(panels[index].Width - panels[index].Width / 2, 0);
                        label.BackColor = Color.Transparent;
                        label.Text = tile.PlayerId == null
                            ? $"{tile.Name}\n${tile.LandPrice}"
                            : $"{tile.Name}\n{currentPlayer.Name}\n${rentPrice}";
                        SetTileBackgroundImage(index, "ben_xe.png", tile);
                    }
                    else
                    {
                        label.TextAlign = ContentAlignment.MiddleLeft;
                        label.Size = new Size(panels[index].Width / 2, panels[index].Height);
                        label.Location = new Point(panels[index].Width - panels[index].Width, 0);
                        label.BackColor = Color.Transparent;
                        label.Text = tile.PlayerId == null
                            ? $"{tile.Name}\n${tile.LandPrice}"
                            : $"{tile.Name}\n{currentPlayer.Name}\n${rentPrice}";
                        SetTileBackgroundImage(index, "ben_xe.png", tile);
                    }
                }
                else
                {
                    label.TextAlign = ContentAlignment.MiddleCenter;
                    label.Size = new Size(panels[index].Width, panels[index].Height * 3 / 7);
                    label.Location = new Point(0, 0);
                    label.BackColor = Color.Transparent;
                    label.Text = tile.PlayerId == null
                        ? $"{tile.Name}\n${tile.LandPrice}"
                        : $"{tile.Name}\n{currentPlayer.Name}\n${rentPrice}";
                    SetTileBackgroundImage(index, "ben_xe.png", tile);
                }
            }
            //Công ty
            else if (tile.Monopoly == "10")
            {
                if (panels[index].Width > panels[index].Height)
                {
                    if (panels[index].Location.X < 500)
                    {
                        label.TextAlign = ContentAlignment.MiddleRight;
                        label.Size = new Size(panels[index].Width / 2, panels[index].Height);
                        label.Location = new Point(panels[index].Width - panels[index].Width / 2, 0);
                        label.BackColor = Color.Transparent;
                        label.Text = tile.PlayerId == null
                            ? $"{tile.Name}\n${tile.LandPrice}"
                            : $"{tile.Name}\n{currentPlayer.Name}\n${rentPrice}";
                        if (tile.Name == "Công ty Cấp nước")
                            SetTileBackgroundImage(index, "cty_nuoc.png", tile);
                        else if (tile.Name == "Công ty Điện lực")
                            SetTileBackgroundImage(index, "cty_dien.png", tile);
                    }
                    else
                    {
                        label.TextAlign = ContentAlignment.MiddleLeft;
                        label.Size = new Size(panels[index].Width / 2, panels[index].Height);
                        label.Location = new Point(panels[index].Width - panels[index].Width, 0);
                        label.BackColor = Color.Transparent;
                        label.Text = tile.PlayerId == null
                            ? $"{tile.Name}\n${tile.LandPrice}"
                            : $"{tile.Name}\n{currentPlayer.Name}\n${rentPrice}";
                        if (tile.Name == "Công ty Cấp nước")
                            SetTileBackgroundImage(index, "cty_nuoc.png", tile);
                        else if (tile.Name == "Công ty Điện lực")
                            SetTileBackgroundImage(index, "cty_dien.png", tile);
                    }
                }
                else
                {
                    label.TextAlign = ContentAlignment.MiddleCenter;
                    label.Size = new Size(panels[index].Width, panels[index].Height * 3 / 7);
                    label.Location = new Point(0, 0);
                    label.BackColor = Color.Transparent;
                    label.Text = tile.PlayerId == null
                        ? $"{tile.Name}\n${tile.LandPrice}"
                        : $"{tile.Name}\n{currentPlayer.Name}\n${rentPrice}";
                    if (tile.Name == "Công ty Cấp nước")
                        SetTileBackgroundImage(index, "cty_nuoc.png", tile);
                    else if (tile.Name == "Công ty Điện lực")
                        SetTileBackgroundImage(index, "cty_dien.png", tile);
                }
            }
            // Khí vận
            else if (tile.Name == "Khí vận")
            {
                label.Size = panels[index].Size;
                label.Location = new Point(0, 0);
                label.BackColor = Color.Transparent;
                SetTileBackgroundImage(index, "khi_van.png", tile);
            }
            // Thuế
            else if (tile.Name == "Thuế thu nhập")
            {
                label.Size = panels[index].Size;
                label.TextAlign = ContentAlignment.MiddleCenter;
                label.Location = new Point(0, 0);
                label.BackColor = Color.Lavender;
                label.Text = $"{tile.Name}\n\n$200 hoặc 10% tổng tài sản";
            }
            else if (tile.Name == "Thuế đặc biệt")
            {
                label.Size = panels[index].Size;
                label.TextAlign = ContentAlignment.MiddleCenter;
                label.Location = new Point(0, 0);
                label.BackColor = Color.Lavender;
                label.Text = $"{tile.Name}\n\n15% tổng tài sản";
            }
            // 4 góc
            else
            {
                label.TextAlign = ContentAlignment.MiddleCenter;
                label.Size = panels[index].Size;
                label.Location = new Point(0, 0);
                label.BackColor = Color.Transparent;
                label.Text = tile.Name;
                switch (tile.Name)
                {
                    case "Bãi đậu xe":
                        SetTileBackgroundImage(index, "bai_dau_xe.png", tile);
                        label.TextAlign = ContentAlignment.BottomCenter;
                        break;
                    case "Nhà tù":
                        SetTileBackgroundImage(index, "ở_tù.png", tile);
                        label.TextAlign = ContentAlignment.BottomCenter;
                        break;
                    case "Đi thẳng vào tù":
                        SetTileBackgroundImage(index, "police.png", tile);
                        label.TextAlign = ContentAlignment.BottomCenter;
                        break;
                    case "Ô bắt đầu":
                        label.Text = $"{tile.Name}\n\nNhận $200 khi đi qua";
                        label.BackColor = Color.Lavender;
                        break;
                    default:
                        label.BackColor = Color.Lavender;
                        break;
                }
            }
            panels[index].Controls.Add(label);
            foreach (var marker in markersToKeep)
            {
                marker.BringToFront();
            }
        }
        // Màu nền cho Monopoly
        public Color GetPanelColor(string monopolyType)
        {
            return mainform.monopolyColors.TryGetValue(monopolyType, out var color) ? color : Color.White;
        }
        public void SetTileBackgroundImage(int index, string imageName, Tile tile)
        {
            string path = Path.Combine(Application.StartupPath, "Assets", "Images", imageName);
            if (!File.Exists(path)) return;
            Image img = Image.FromFile(path);
            if (tile.Monopoly == "9" || tile.Monopoly == "10")
            {
                Bitmap resizedImage = new Bitmap(panels[index].Width, panels[index].Height);
                using (Graphics g = Graphics.FromImage(resizedImage))
                {
                    g.Clear(panels[index].BackColor);
                    if (panels[index].Width > panels[index].Height)
                    {
                        int newWidth = panels[index].Width / 2;
                        if (panels[index].Location.X < 500)
                        {
                            g.DrawImage(img, new Rectangle(0, 0, newWidth, panels[index].Height));
                        }
                        else
                        {
                            g.DrawImage(img, new Rectangle(panels[index].Width - newWidth, 0, newWidth, panels[index].Height));
                        }
                    }
                    else
                    {
                        int newHeight = panels[index].Height * 4 / 7;
                        g.DrawImage(img, new Rectangle(0, panels[index].Height - newHeight, panels[index].Width, newHeight));
                    }
                }
                img.Dispose();
                panels[index].BackgroundImage = resizedImage;
                panels[index].BackgroundImageLayout = ImageLayout.None;
            }
            else if (tile.Name == "Khí vận")
            {
                panels[index].BackgroundImage = img;
                panels[index].BackgroundImageLayout = ImageLayout.Stretch;
            }
            else
            {
                int newHeight = panels[index].Height * 6 / 7;
                Bitmap resizedImage = new Bitmap(panels[index].Width, panels[index].Height);
                using (Graphics g = Graphics.FromImage(resizedImage))
                {
                    g.Clear(panels[index].BackColor);
                    g.DrawImage(img, new Rectangle(0, 0, panels[index].Width, newHeight));
                }
                img.Dispose();
                panels[index].BackgroundImage = resizedImage;
                panels[index].BackgroundImageLayout = ImageLayout.None;
            }
        }
        public Image GetHouseImage(int level, Player player, List<Player> players, Tile tile)
        {
            // Giả sử có các ảnh như: house1.png, house2.png, hotel.png
            string imagePath;

            
            if (tile.PlayerId != null)
            {
                if (level == 5)
                    imagePath = Path.Combine(Application.StartupPath, "Assets", "Images", $"{players[tile.PlayerId.Value - 1].Color.Name}-hotel.png");
                else if (level >= 2 && level <= 4)
                    imagePath = Path.Combine(Application.StartupPath, "Assets", "Images", $"{players[tile.PlayerId.Value - 1].Color.Name}-house{level - 1}.png");
                else
                    imagePath = Path.Combine(Application.StartupPath, "Assets", "Images", $"{players[tile.PlayerId.Value - 1].Color.Name}-land.png");
                return Image.FromFile(imagePath);
            }
            else
            {
                if (level == 5)
                    imagePath = Path.Combine(Application.StartupPath, "Assets", "Images", $"{player.Color.Name}-hotel.png");
                else if (level >= 2 && level <= 4)
                    imagePath = Path.Combine(Application.StartupPath, "Assets", "Images", $"{player.Color.Name}-house{level - 1}.png");

                else
                    imagePath = Path.Combine(Application.StartupPath, "Assets", "Images", $"{player.Color.Name}-land.png");
                return Image.FromFile(imagePath);
            }
        }
        private void AddOwnerImageToTilePanel(Panel panel, Tile tile, Player player)
        {
            foreach (Control c in panel.Controls.OfType<PictureBox>().ToList())
            {
                panel.Controls.Remove(c);
                c.Dispose();
            }
            if (tile.PlayerId == null) return;
            PictureBox ownerPic = new PictureBox();
            ownerPic.SizeMode = PictureBoxSizeMode.Zoom;
            ownerPic.BackColor = Color.LightBlue;
            ownerPic.Image = GetHouseImage(tile.Level, player, players, tile);

            if (panel.Width < panel.Height) // ô dọc
            {
                ownerPic.Size = new Size(panel.Width, panel.Height/3);
                ownerPic.Location = new Point(0, panel.Height*2/3);
            }
            else // ô ngang
            {
                ownerPic.Size = new Size(panel.Width*6/7, panel.Height / 2);
                if (panel.Left < panel.Width / 2)
                {
                    // Panel nằm bên trái
                    ownerPic.Location = new Point(0, panel.Height /2);
                }
                else
                {
                    // Panel nằm bên phải
                    ownerPic.Location = new Point(panel.Width / 7, panel.Height /2);
                }
            }
            panel.Controls.Add(ownerPic);
            ownerPic.BringToFront();
        }
        public void UpdateBusStationRent(int playerId)
        {
            // Lấy tất cả bến xe người chơi sở hữu
            var ownedBusStations = tiles.FindAll(t => t.Monopoly == "9" && t.PlayerId == playerId);
            int count = ownedBusStations.Count;
            int rent = count switch
            {
                1 => 50,
                2 => 100,
                3 => 150,
                4 => 200,
                _ => 0
            };
            foreach (var tile in ownedBusStations)
            {
                tile.RentPrice = rent;
                foreach (Panel panel in panels)
                {
                    if (panel.Tag is Tile t && t.Id == tile.Id)
                    {
                        var rentLabel = panel.Controls.OfType<Label>().FirstOrDefault(l => l.Name == "labelrent");
                        if (rentLabel != null)
                        {
                            rentLabel.Text = $"{tile.Name}\nPlayer {tile.PlayerId}\n${rent}";
                        }
                    }
                }
            }
        }
        public void UpdateCompanyRent(int playerId)
        {
            var ownedCompany = tiles.FindAll(t => t.Monopoly == "10" && t.PlayerId == playerId);
            int count = ownedCompany.Count;
            int rent = count switch
            {
                1 => 25,
                2 => 100,
                _ => 0
            };
            foreach (var tile in ownedCompany)
            {
                tile.RentPrice = rent;
                foreach (Panel panel in panels)
                {
                    if (panel.Tag is Tile t && t.Id == tile.Id)
                    {
                        var rentLabel = panel.Controls.OfType<Label>().FirstOrDefault(l => l.Name == "labelrent");
                        if (rentLabel != null)
                        {
                            rentLabel.Text = $"{tile.Name}\nPlayer {tile.PlayerId}\n${rent}";
                        }
                    }
                }
            }
        }
    }
}

```

### MonopolyWinForms\Home\Main_home.cs
```cs
﻿using MonopolyWinForms.Room;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MonopolyWinForms.Home
{
    public partial class Main_home : Form
    {
        public Main_home()
        {
            InitializeComponent();
            this.BackColor = ColorTranslator.FromHtml("#FBF8F4");
            btn_play.BackColor = ColorTranslator.FromHtml("#FED626");
            btn_rule.BackColor = ColorTranslator.FromHtml("#33B68F");
            btn_setting.BackColor = ColorTranslator.FromHtml("#33B68F");
            btn_quit.BackColor = ColorTranslator.FromHtml("#DC2025");
        }

        private void btn_quit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private void btn_play_Click(object sender, EventArgs e)
        {
            this.Hide(); // Ẩn form hiện tại

            JoinRoom joinRoomForm = new JoinRoom();

            // Khi JoinRoom bị đóng, hiện lại form này
            joinRoomForm.FormClosed += (s, args) =>
            {
                this.Show();
            };

            joinRoomForm.Show(); // Hiện JoinRoom
        }
    }
}

```

### MonopolyWinForms\Home\Main_home.Designer.cs
```cs
﻿namespace MonopolyWinForms.Home
{
    partial class Main_home
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            login_img = new PictureBox();
            btn_quit = new Button();
            btn_setting = new Button();
            btn_play = new Button();
            btn_rule = new Button();
            ((System.ComponentModel.ISupportInitialize)login_img).BeginInit();
            SuspendLayout();
            // 
            // login_img
            // 
            login_img.Image = Properties.Resources.login_img;
            login_img.Location = new Point(94, 56);
            login_img.Margin = new Padding(5);
            login_img.Name = "login_img";
            login_img.Size = new Size(800, 677);
            login_img.SizeMode = PictureBoxSizeMode.StretchImage;
            login_img.TabIndex = 8;
            login_img.TabStop = false;
            // 
            // btn_quit
            // 
            btn_quit.Font = new Font("Segoe UI", 15F);
            btn_quit.Location = new Point(927, 620);
            btn_quit.Margin = new Padding(5);
            btn_quit.Name = "btn_quit";
            btn_quit.Size = new Size(380, 103);
            btn_quit.TabIndex = 7;
            btn_quit.Text = "THOÁT GAME";
            btn_quit.UseVisualStyleBackColor = true;
            btn_quit.Click += btn_quit_Click;
            // 
            // btn_setting
            // 
            btn_setting.Font = new Font("Segoe UI", 15F);
            btn_setting.Location = new Point(927, 248);
            btn_setting.Margin = new Padding(5);
            btn_setting.Name = "btn_setting";
            btn_setting.Size = new Size(380, 103);
            btn_setting.TabIndex = 6;
            btn_setting.Text = "CÀI ĐẶT";
            btn_setting.UseVisualStyleBackColor = true;
            // 
            // btn_play
            // 
            btn_play.BackColor = Color.FromArgb(255, 224, 192);
            btn_play.Font = new Font("Segoe UI", 15F);
            btn_play.Location = new Point(927, 76);
            btn_play.Margin = new Padding(5);
            btn_play.Name = "btn_play";
            btn_play.Size = new Size(380, 103);
            btn_play.TabIndex = 5;
            btn_play.Text = "CHƠI NGAY";
            btn_play.UseVisualStyleBackColor = false;
            btn_play.Click += btn_play_Click;
            // 
            // btn_rule
            // 
            btn_rule.Font = new Font("Segoe UI", 15F);
            btn_rule.Location = new Point(927, 434);
            btn_rule.Margin = new Padding(5);
            btn_rule.Name = "btn_rule";
            btn_rule.Size = new Size(380, 103);
            btn_rule.TabIndex = 9;
            btn_rule.Text = "LUẬT CHƠI";
            btn_rule.UseVisualStyleBackColor = true;
            // 
            // Main_home
            // 
            AutoScaleDimensions = new SizeF(8F, 20F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1400, 788);
            Controls.Add(btn_rule);
            Controls.Add(login_img);
            Controls.Add(btn_quit);
            Controls.Add(btn_setting);
            Controls.Add(btn_play);
            Name = "Main_home";
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Main_home";
            ((System.ComponentModel.ISupportInitialize)login_img).EndInit();
            ResumeLayout(false);
        }

        #endregion

        private PictureBox login_img;
        private Button btn_quit;
        private Button btn_setting;
        private Button btn_play;
        private Button btn_rule;
    }
}
```

### MonopolyWinForms\Login_Signup\Forgot.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Text.Json.Serialization;
using System.Threading.Tasks;
using System.Windows.Forms;
using Newtonsoft.Json;
using System.Configuration; 

namespace MonopolyWinForms.Login_Signup
{
    public partial class Forgot : Form
    {
        private readonly string apiKey = ConfigurationManager.AppSettings["FirebaseApiKey"];
        public Forgot()
        {
            InitializeComponent();
            this.BackColor = ColorTranslator.FromHtml("#D9D9D9");
            btn_send.BackColor = ColorTranslator.FromHtml("#33B68F");
            tb_email.BackColor = ColorTranslator.FromHtml("#ACACAC");
        }

        private async void btn_send_Click(object sender, EventArgs e)
        {
            string email = tb_email.Text.Trim();

            if (string.IsNullOrEmpty(email))
            {
                MessageBox.Show("Vui lòng nhập email.");
                return;
            }

            var resetData = new
            {
                requestType = "PASSWORD_RESET",
                email = email
            };

            var json = JsonConvert.SerializeObject(resetData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            using (var client = new HttpClient())
            {
                var response = await client.PostAsync(
                     $"https://identitytoolkit.googleapis.com/v1/accounts:sendOobCode?key={apiKey}",
                     content);

                var result = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    MessageBox.Show("Đã gửi email đặt lại mật khẩu. Vui lòng kiểm tra hộp thư.");
                    this.Close();
                    new Login(this).Show();
                }
                else
                {
                    MessageBox.Show("Gửi email thất bại: " + result);
                }
            }
        }
    }
}

```

### MonopolyWinForms\Login_Signup\Forgot.Designer.cs
```cs
﻿namespace MonopolyWinForms.Login_Signup
{
    partial class Forgot
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            label3 = new Label();
            btn_send = new Button();
            tb_email = new TextBox();
            label1 = new Label();
            SuspendLayout();
            // 
            // label3
            // 
            label3.AutoSize = true;
            label3.Font = new Font("Segoe UI", 13F);
            label3.Location = new Point(135, 145);
            label3.Name = "label3";
            label3.Size = new Size(64, 30);
            label3.TabIndex = 14;
            label3.Text = "Email";
            // 
            // btn_send
            // 
            btn_send.Font = new Font("Segoe UI", 13F);
            btn_send.Location = new Point(307, 228);
            btn_send.Name = "btn_send";
            btn_send.Size = new Size(194, 44);
            btn_send.TabIndex = 13;
            btn_send.Text = "GỬI EMAIL";
            btn_send.UseVisualStyleBackColor = true;
            btn_send.Click += btn_send_Click;
            // 
            // tb_email
            // 
            tb_email.BorderStyle = BorderStyle.FixedSingle;
            tb_email.Font = new Font("Segoe UI", 13F);
            tb_email.Location = new Point(222, 145);
            tb_email.Name = "tb_email";
            tb_email.Size = new Size(379, 36);
            tb_email.TabIndex = 11;
            // 
            // label1
            // 
            label1.AutoSize = true;
            label1.Font = new Font("Segoe UI", 19.8000011F, FontStyle.Bold, GraphicsUnit.Point, 0);
            label1.Location = new Point(259, 60);
            label1.Name = "label1";
            label1.Size = new Size(308, 46);
            label1.TabIndex = 8;
            label1.Text = "QUÊN MẬT KHẨU";
            // 
            // Forgot
            // 
            AutoScaleDimensions = new SizeF(8F, 20F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(800, 450);
            Controls.Add(label3);
            Controls.Add(btn_send);
            Controls.Add(tb_email);
            Controls.Add(label1);
            Name = "Forgot";
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Forgot";
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private Label label3;
        private Button btn_send;
        private TextBox tb_email;
        private Label label1;
    }
}
```

### MonopolyWinForms\Login_Signup\Login.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MonopolyWinForms.Home;
using MonopolyWinForms.Login_Signup;
using System.Configuration; // Thêm namespace này
using Newtonsoft.Json;
using System.Configuration;
using MonopolyWinForms.Services;

namespace MonopolyWinForms.Login_Signup
{
    public partial class Login : Form
    {
        private readonly string apiKey = ConfigurationManager.AppSettings["FirebaseApiKey"];
        private Form signupForm;
        public Login(Form signupForm)
        {
            InitializeComponent();
            tb_password.UseSystemPasswordChar = true;
            this.BackColor = ColorTranslator.FromHtml("#D9D9D9");
            btn_login.BackColor = ColorTranslator.FromHtml("#FED626");  // Đổi màu nền của nút login
            btn_signup.BackColor = ColorTranslator.FromHtml("#33B68F");  // Đổi màu nền của nút login
            tb_login.BackColor = ColorTranslator.FromHtml("#ACACAC");
            tb_password.BackColor = ColorTranslator.FromHtml("#ACACAC");
        }

        private void tb_password_TextChanged(object sender, EventArgs e)
        {

        }

        private void Login_success()
        {
            Main_home mainPage = new Main_home();

            // Đóng tất cả form trừ form chính
            foreach (Form form in Application.OpenForms.Cast<Form>().ToList())
            {
                if (form != mainPage)
                {
                    form.Hide();
                }
            }

            // Mở form chính
            mainPage.Show();

            // Khi form chính đóng, thoát app
            mainPage.FormClosed += (s, args) =>
            {
                Session.EndSession();
                Application.Exit();
            };
        }

        private async void btn_login_Click(object sender, EventArgs e)
        {
            string email = tb_login.Text.Trim();
            string password = tb_password.Text.Trim();

            var loginData = new
            {
                email = email,
                password = password,
                returnSecureToken = true
            };

            var json = JsonConvert.SerializeObject(loginData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            using (var client = new HttpClient())
            {
                var response = await client.PostAsync(
                    $"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key={apiKey}",
                    content);
                var result = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    dynamic data = JsonConvert.DeserializeObject(result);
                    string idToken = data.idToken;
                    string localId = data.localId;


                    // Truy vấn thông tin người dùng từ Firebase Realtime Database
                    var userInfoUrl = $"https://doanmang-8f5af-default-rtdb.asia-southeast1.firebasedatabase.app/users/{localId}.json?auth={idToken}";
                    var userInfoResponse = await client.GetAsync(userInfoUrl);
                    var userInfoResult = await userInfoResponse.Content.ReadAsStringAsync();

                    if (userInfoResponse.IsSuccessStatusCode)
                    {
                        dynamic userInfo = JsonConvert.DeserializeObject(userInfoResult);
                        string username = userInfo.username; // Lấy username từ kết quả

                        // Bắt đầu phiên làm việc với username
                        Session.StartSession(localId, username);

                        MessageBox.Show("Đăng nhập thành công!");
                        Login_success();
                    }
                    else
                    {
                        MessageBox.Show("Đăng nhập thành công, nhưng không lấy được tên hiển thị.");

                    }
                }
                else
                {
                    dynamic errorData = JsonConvert.DeserializeObject(result);
                    string errorMessage = errorData.error.message;

                    if (errorMessage == "EMAIL_NOT_FOUND")
                        MessageBox.Show("Email không tồn tại.");
                    else if (errorMessage == "INVALID_PASSWORD")
                        MessageBox.Show("Mật khẩu sai.");
                    else
                        MessageBox.Show("Lỗi: " + errorMessage);
                }
            }
        }

        private void btn_signup_Click(object sender, EventArgs e)
        {
            this.Hide();                 // Ẩn form Login hiện tại
            Signup signupForm = new Signup(this);
            signupForm.Show();          // Mở form Signup      
        }

        private void label2_Click(object sender, EventArgs e)
        {
            this.Hide();
            new Forgot().Show();
        }
    }
}

```

### MonopolyWinForms\Login_Signup\Login.Designer.cs
```cs
﻿namespace MonopolyWinForms.Login_Signup
{
    partial class Login
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            label1 = new Label();
            label2 = new Label();
            tb_password = new TextBox();
            tb_login = new TextBox();
            btn_login = new Button();
            btn_signup = new Button();
            label3 = new Label();
            label4 = new Label();
            SuspendLayout();
            // 
            // label1
            // 
            label1.AutoSize = true;
            label1.Font = new Font("Segoe UI", 19.8000011F, FontStyle.Bold, GraphicsUnit.Point, 0);
            label1.Location = new Point(302, 52);
            label1.Name = "label1";
            label1.Size = new Size(227, 46);
            label1.TabIndex = 0;
            label1.Text = "ĐĂNG NHẬP";
            // 
            // label2
            // 
            label2.AutoSize = true;
            label2.Cursor = Cursors.Hand;
            label2.Font = new Font("Segoe UI", 9F);
            label2.Location = new Point(215, 246);
            label2.Name = "label2";
            label2.Size = new Size(109, 20);
            label2.TabIndex = 1;
            label2.Text = "Quên mật khẩu";
            label2.Click += label2_Click;
            // 
            // tb_password
            // 
            tb_password.BorderStyle = BorderStyle.FixedSingle;
            tb_password.Font = new Font("Segoe UI", 13F);
            tb_password.Location = new Point(215, 194);
            tb_password.Name = "tb_password";
            tb_password.Size = new Size(379, 36);
            tb_password.TabIndex = 2;
            tb_password.TextChanged += tb_password_TextChanged;
            // 
            // tb_login
            // 
            tb_login.BorderStyle = BorderStyle.FixedSingle;
            tb_login.Font = new Font("Segoe UI", 13F);
            tb_login.Location = new Point(215, 126);
            tb_login.Name = "tb_login";
            tb_login.Size = new Size(379, 36);
            tb_login.TabIndex = 3;
            // 
            // btn_login
            // 
            btn_login.Font = new Font("Segoe UI", 13F);
            btn_login.Location = new Point(128, 294);
            btn_login.Name = "btn_login";
            btn_login.Size = new Size(196, 44);
            btn_login.TabIndex = 4;
            btn_login.Text = "ĐĂNG NHẬP";
            btn_login.UseVisualStyleBackColor = true;
            btn_login.Click += btn_login_Click;
            // 
            // btn_signup
            // 
            btn_signup.Font = new Font("Segoe UI", 13F);
            btn_signup.Location = new Point(447, 294);
            btn_signup.Name = "btn_signup";
            btn_signup.Size = new Size(194, 44);
            btn_signup.TabIndex = 5;
            btn_signup.Text = "ĐĂNG KÝ";
            btn_signup.UseVisualStyleBackColor = true;
            btn_signup.Click += btn_signup_Click;
            // 
            // label3
            // 
            label3.AutoSize = true;
            label3.Font = new Font("Segoe UI", 13F);
            label3.Location = new Point(128, 126);
            label3.Name = "label3";
            label3.Size = new Size(64, 30);
            label3.TabIndex = 6;
            label3.Text = "Email";
            // 
            // label4
            // 
            label4.AutoSize = true;
            label4.Font = new Font("Segoe UI", 13F);
            label4.Location = new Point(96, 194);
            label4.Name = "label4";
            label4.Size = new Size(103, 30);
            label4.TabIndex = 7;
            label4.Text = "Mật khẩu";
            // 
            // Login
            // 
            AutoScaleDimensions = new SizeF(8F, 20F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(800, 450);
            Controls.Add(label4);
            Controls.Add(label3);
            Controls.Add(btn_signup);
            Controls.Add(btn_login);
            Controls.Add(tb_login);
            Controls.Add(tb_password);
            Controls.Add(label2);
            Controls.Add(label1);
            Name = "Login";
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Login";
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private Label label1;
        private Label label2;
        private TextBox tb_password;
        private TextBox tb_login;
        private Button btn_login;
        private Button btn_signup;
        private Label label3;
        private Label label4;
    }
}
```

### MonopolyWinForms\Login_Signup\Main_login_signup.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MonopolyWinForms.Login_Signup
{
    public partial class Main_login_signup : Form
    {
        public Main_login_signup()
        {
            InitializeComponent();
            this.BackColor = ColorTranslator.FromHtml("#FBF8F4");
            btn_login.BackColor = ColorTranslator.FromHtml("#FED626");  // Đổi màu nền của nút login
            btn_signup.BackColor = ColorTranslator.FromHtml("#33B68F");  // Đổi màu nền của nút login
            btn_quit.BackColor = ColorTranslator.FromHtml("#DC2025");
        }

        private void btn_login_Click(object sender, EventArgs e)
        {
            Login formLogin = new Login(this);
            formLogin.Show();
        }

        private void btn_signup_Click(object sender, EventArgs e)
        {
            Signup formSingup = new Signup(this);
            formSingup.Show();
        }

        private void btn_quit_Click(object sender, EventArgs e)
        {
            this.Close();
        }

       
    }
}

```

### MonopolyWinForms\Login_Signup\Main_login_signup.Designer.cs
```cs
﻿namespace MonopolyWinForms.Login_Signup
{
    partial class Main_login_signup
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            btn_login = new Button();
            btn_signup = new Button();
            btn_quit = new Button();
            login_img = new PictureBox();
            ((System.ComponentModel.ISupportInitialize)login_img).BeginInit();
            SuspendLayout();
            // 
            // btn_login
            // 
            btn_login.BackColor = Color.FromArgb(255, 224, 192);
            btn_login.Font = new Font("Segoe UI", 15F);
            btn_login.Location = new Point(908, 164);
            btn_login.Margin = new Padding(5);
            btn_login.Name = "btn_login";
            btn_login.Size = new Size(380, 103);
            btn_login.TabIndex = 0;
            btn_login.Text = "ĐĂNG NHẬP";
            btn_login.UseVisualStyleBackColor = false;
            btn_login.Click += btn_login_Click;
            // 
            // btn_signup
            // 
            btn_signup.Font = new Font("Segoe UI", 15F);
            btn_signup.Location = new Point(908, 341);
            btn_signup.Margin = new Padding(5);
            btn_signup.Name = "btn_signup";
            btn_signup.Size = new Size(380, 103);
            btn_signup.TabIndex = 1;
            btn_signup.Text = "ĐĂNG KÝ";
            btn_signup.UseVisualStyleBackColor = true;
            btn_signup.Click += btn_signup_Click;
            // 
            // btn_quit
            // 
            btn_quit.Location = new Point(908, 522);
            btn_quit.Margin = new Padding(5);
            btn_quit.Name = "btn_quit";
            btn_quit.Size = new Size(380, 103);
            btn_quit.TabIndex = 2;
            btn_quit.Text = "THOÁT GAME";
            btn_quit.UseVisualStyleBackColor = true;
            btn_quit.Click += btn_quit_Click;
            // 
            // login_img
            // 
            login_img.Image = Properties.Resources.login_img;
            login_img.Location = new Point(75, 54);
            login_img.Margin = new Padding(5);
            login_img.Name = "login_img";
            login_img.Size = new Size(800, 677);
            login_img.SizeMode = PictureBoxSizeMode.StretchImage;
            login_img.TabIndex = 4;
            login_img.TabStop = false;
            // 
            // Main_login_signup
            // 
            AutoScaleDimensions = new SizeF(14F, 35F);
            AutoScaleMode = AutoScaleMode.Font;
            BackColor = Color.Cornsilk;
            ClientSize = new Size(1400, 788);
            Controls.Add(login_img);
            Controls.Add(btn_quit);
            Controls.Add(btn_signup);
            Controls.Add(btn_login);
            Font = new Font("Segoe UI", 15F);
            Margin = new Padding(5);
            Name = "Main_login_signup";
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Main_login_signup";
            ((System.ComponentModel.ISupportInitialize)login_img).EndInit();
            ResumeLayout(false);
        }

        #endregion

        private Button btn_login;
        private Button btn_signup;
        private Button btn_quit;
        private PictureBox login_img;
    }
}
```

### MonopolyWinForms\Login_Signup\Session.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonopolyWinForms.Services;

namespace MonopolyWinForms.Login_Signup
{
    class Session
    {
        private static FirebaseService _firebase = new FirebaseService();
        
        public static int PlayerInGameId { get; set; }
        public static string UserId { get; private set; }
        public static Color Color { get; set; }
        public static string UserName { get; private set; }
        public static bool IsLoggedIn { get; private set; }
        public static string CurrentRoomId { get; private set; }  // Theo dõi phòng hiện tại
        public static bool IsHost { get; private set; }           // Người dùng có phải chủ phòng không

        public static async Task StartSession(string userId, string userName)
        {
            try
            {
                UserId = userId;
                UserName = userName;
                IsLoggedIn = true;
                PlayerInGameId = 0;
                CurrentRoomId = null;
                IsHost = false;

                // Tạo session trên Firebase
                var sessionData = new
                {
                    userId = userId,
                    userName = userName,
                    isActive = true,
                    lastActive = DateTime.UtcNow,
                    currentRoomId = (string)null,
                    isHost = false,
                    playerInGameId = 0
                };

                await _firebase.CreateSessionAsync(userId, sessionData);
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error starting session: {ex.Message}\n");
                throw;
            }
        }

        public static async Task JoinRoom(string roomId, bool isHost = false)
        {
            try
            {
                CurrentRoomId = roomId;
                IsHost = isHost;

                // Cập nhật session trên Firebase
                var sessionData = new
                {
                    currentRoomId = roomId,
                    isHost = isHost,
                    lastActive = DateTime.UtcNow
                };

                await _firebase.UpdateSessionAsync(UserId, sessionData);
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error joining room: {ex.Message}\n");
                throw;
            }
        }

        public static async Task LeaveRoom()
        {
            try
            {
                // Cập nhật session trên Firebase
                var sessionData = new
                {
                    currentRoomId = (string)null,
                    isHost = false,
                    lastActive = DateTime.UtcNow
                };

                await _firebase.UpdateSessionAsync(UserId, sessionData);

                // Reset local state
                CurrentRoomId = null;
                IsHost = false;
                PlayerInGameId = 0;
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error leaving room: {ex.Message}\n");
                throw;
            }
        }

        public static async Task EndSession()
        {
            try
            {
                if (IsLoggedIn)
                {
                    // Xóa session trên Firebase
                    await _firebase.DeleteSessionAsync(UserId);

                    // Reset local state
                    UserId = null;
                    UserName = null;
                    IsLoggedIn = false;
                    CurrentRoomId = null;
                    IsHost = false;
                    PlayerInGameId = 0;
                }
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error ending session: {ex.Message}\n");
                throw;
            }
        }

        // Kiểm tra session có còn hợp lệ không
        public static async Task<bool> ValidateSession()
        {
            if (!IsLoggedIn || string.IsNullOrEmpty(UserId))
                return false;

            return await _firebase.ValidateSessionAsync(UserId);
        }
    }
}

```

### MonopolyWinForms\Login_Signup\Signup.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MonopolyWinForms.Login_Signup;
using Newtonsoft.Json;
using System.Net.Http;
using System.Configuration; 
using System.Data.SqlClient;

namespace MonopolyWinForms.Login_Signup
{
    public partial class Signup : Form
    {
        private Form loginForm;
        private readonly string apiKey = ConfigurationManager.AppSettings["FirebaseApiKey"];
        public Signup(Form loginForm)
        {
            InitializeComponent();
            tb_password.UseSystemPasswordChar = true;
            tb_password2.UseSystemPasswordChar = true;
            this.BackColor = ColorTranslator.FromHtml("#D9D9D9");
            btn_singup.BackColor = ColorTranslator.FromHtml("#FED626");  // Đổi màu nền của nút login
            btn_login.BackColor = ColorTranslator.FromHtml("#33B68F");  // Đổi màu nền của nút login
            tb_login.BackColor = ColorTranslator.FromHtml("#ACACAC");
            tb_password.BackColor = ColorTranslator.FromHtml("#ACACAC");
            tb_password2.BackColor = ColorTranslator.FromHtml("#ACACAC");
            tb_email.BackColor = ColorTranslator.FromHtml("#ACACAC");
        }

        private void btn_login_Click(object sender, EventArgs e)
        {
            this.Hide();
            Login loginForm = new Login(this);  // Tạo đối tượng Login mới
            loginForm.Show();               // Mở form Login
        }

        private async void btn_singup_Click(object sender, EventArgs e)
        {
            var email = tb_email.Text;
            var password = tb_password.Text;
            var username = tb_login.Text;

            var signupData = new
            {
                email = email,
                password = password,
                returnSecureToken = true
            };

            var json = JsonConvert.SerializeObject(signupData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            using (var client = new HttpClient())
            {
                var response = await client.PostAsync(
                    $"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key={apiKey}",
                    content);

                var result = await response.Content.ReadAsStringAsync();

                if (response.IsSuccessStatusCode)
                {
                    // Parse kết quả để lấy localId
                    dynamic data = JsonConvert.DeserializeObject(result);
                    string localId = data.localId;
                    string tokenId = data.idToken;

                    // Tạo object người dùng để lưu vào DB
                    var userInfo = new
                    {
                        username = username,
                        email = email,
                        status = "waiting"
                    };

                    var userJson = JsonConvert.SerializeObject(userInfo);
                    var userContent = new StringContent(userJson, Encoding.UTF8, "application/json");

                    // Firebase Realtime Database URL
                    var firebaseDbUrl = $"https://doanmang-8f5af-default-rtdb.asia-southeast1.firebasedatabase.app/users/{localId}.json?auth={tokenId}";


                    var dbResponse = await client.PutAsync(firebaseDbUrl, userContent);

                    // Kiểm tra lỗi trả về từ Firebase
                    var dbResponseContent = await dbResponse.Content.ReadAsStringAsync();

                    if (dbResponse.IsSuccessStatusCode)
                    {
                        MessageBox.Show("Đăng ký thành công!");
                        this.Hide();
                        new Login(this).Show();
                    }
                    else
                    {
                        // In ra chi tiết lỗi từ Firebase
                        MessageBox.Show($"Lỗi: {dbResponseContent}");
                    }
                }
                else
                {
                    MessageBox.Show("Lỗi: " + result);
                }
            }
        }

    }
}

```

### MonopolyWinForms\Login_Signup\Signup.Designer.cs
```cs
﻿namespace MonopolyWinForms.Login_Signup
{
    partial class Signup
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            label4 = new Label();
            label3 = new Label();
            btn_login = new Button();
            btn_singup = new Button();
            tb_login = new TextBox();
            tb_password = new TextBox();
            label1 = new Label();
            label2 = new Label();
            tb_password2 = new TextBox();
            label5 = new Label();
            tb_email = new TextBox();
            SuspendLayout();
            // 
            // label4
            // 
            label4.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            label4.AutoSize = true;
            label4.Font = new Font("Segoe UI", 13F);
            label4.Location = new Point(113, 156);
            label4.Name = "label4";
            label4.Size = new Size(103, 30);
            label4.TabIndex = 15;
            label4.Text = "Mật khẩu";
            // 
            // label3
            // 
            label3.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            label3.AutoSize = true;
            label3.Font = new Font("Segoe UI", 13F);
            label3.Location = new Point(60, 93);
            label3.Name = "label3";
            label3.Size = new Size(156, 30);
            label3.TabIndex = 14;
            label3.Text = "Tên đăng nhập";
            // 
            // btn_login
            // 
            btn_login.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            btn_login.Font = new Font("Segoe UI", 13F);
            btn_login.Location = new Point(434, 333);
            btn_login.Name = "btn_login";
            btn_login.Size = new Size(260, 44);
            btn_login.TabIndex = 13;
            btn_login.Text = "ĐÃ CÓ TÀI KHOẢN";
            btn_login.UseVisualStyleBackColor = true;
            btn_login.Click += btn_login_Click;
            // 
            // btn_singup
            // 
            btn_singup.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            btn_singup.Font = new Font("Segoe UI", 13F);
            btn_singup.Location = new Point(133, 333);
            btn_singup.Name = "btn_singup";
            btn_singup.Size = new Size(260, 44);
            btn_singup.TabIndex = 12;
            btn_singup.Text = "ĐĂNG KÝ";
            btn_singup.UseVisualStyleBackColor = true;
            btn_singup.Click += btn_singup_Click;
            // 
            // tb_login
            // 
            tb_login.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            tb_login.BorderStyle = BorderStyle.FixedSingle;
            tb_login.Font = new Font("Segoe UI", 13F);
            tb_login.Location = new Point(231, 93);
            tb_login.Name = "tb_login";
            tb_login.Size = new Size(379, 36);
            tb_login.TabIndex = 11;
            // 
            // tb_password
            // 
            tb_password.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            tb_password.BorderStyle = BorderStyle.FixedSingle;
            tb_password.Font = new Font("Segoe UI", 13F);
            tb_password.Location = new Point(231, 156);
            tb_password.Name = "tb_password";
            tb_password.Size = new Size(379, 36);
            tb_password.TabIndex = 10;
            // 
            // label1
            // 
            label1.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            label1.AutoSize = true;
            label1.Font = new Font("Segoe UI", 19.8000011F, FontStyle.Bold, GraphicsUnit.Point, 0);
            label1.Location = new Point(342, 44);
            label1.Name = "label1";
            label1.Size = new Size(172, 46);
            label1.TabIndex = 8;
            label1.Text = "ĐĂNG KÝ";
            // 
            // label2
            // 
            label2.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            label2.AutoSize = true;
            label2.Font = new Font("Segoe UI", 13F);
            label2.Location = new Point(29, 211);
            label2.Name = "label2";
            label2.Size = new Size(187, 30);
            label2.TabIndex = 17;
            label2.Text = "Nhập lại mật khẩu";
            // 
            // tb_password2
            // 
            tb_password2.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            tb_password2.BorderStyle = BorderStyle.FixedSingle;
            tb_password2.Font = new Font("Segoe UI", 13F);
            tb_password2.Location = new Point(231, 211);
            tb_password2.Name = "tb_password2";
            tb_password2.Size = new Size(379, 36);
            tb_password2.TabIndex = 16;
            // 
            // label5
            // 
            label5.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            label5.AutoSize = true;
            label5.Font = new Font("Segoe UI", 13F);
            label5.Location = new Point(152, 267);
            label5.Name = "label5";
            label5.Size = new Size(64, 30);
            label5.TabIndex = 19;
            label5.Text = "Email";
            // 
            // tb_email
            // 
            tb_email.Anchor = AnchorStyles.Top | AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Right;
            tb_email.BorderStyle = BorderStyle.FixedSingle;
            tb_email.Font = new Font("Segoe UI", 13F);
            tb_email.Location = new Point(231, 267);
            tb_email.Name = "tb_email";
            tb_email.Size = new Size(379, 36);
            tb_email.TabIndex = 18;
            // 
            // Signup
            // 
            AutoScaleDimensions = new SizeF(8F, 20F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(800, 450);
            Controls.Add(label5);
            Controls.Add(tb_email);
            Controls.Add(label2);
            Controls.Add(tb_password2);
            Controls.Add(label4);
            Controls.Add(label3);
            Controls.Add(btn_login);
            Controls.Add(btn_singup);
            Controls.Add(tb_login);
            Controls.Add(tb_password);
            Controls.Add(label1);
            Name = "Signup";
            StartPosition = FormStartPosition.CenterScreen;
            Text = "Signup";
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private Label label4;
        private Label label3;
        private Button btn_login;
        private Button btn_singup;
        private TextBox tb_login;
        private TextBox tb_password;
        private Label label1;
        private Label label2;
        private TextBox tb_password2;
        private Label label5;
        private TextBox tb_email;
    }
}
```

### MonopolyWinForms\Play_area\Draw_playarea.cs
```cs
﻿using MonopolyWinForms.GameLogic;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MonopolyWinForms.Play_area
{
    public partial class Draw_playarea: Form
    {
        private Board Board;
        public Draw_playarea()
        {
            InitializeComponent();
            string path = Path.Combine(Application.StartupPath, "Assets", "Tiles.txt");
            Board = new Board(path);
            Board.GenerateBoard(this, Board.TileList);  // Hiển thị bàn cờ lên form
        }
    }
}

```

### MonopolyWinForms\Play_area\Draw_playarea.Designer.cs
```cs
﻿namespace MonopolyWinForms.Play_area
{
    partial class Draw_playarea
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Text = "Play_area";
        }

        #endregion
    }
}
```

### MonopolyWinForms\Properties\Resources.Designer.cs
```cs
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MonopolyWinForms.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MonopolyWinForms.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap login_img {
            get {
                object obj = ResourceManager.GetObject("login_img", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap player1 {
            get {
                object obj = ResourceManager.GetObject("player1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap player2 {
            get {
                object obj = ResourceManager.GetObject("player2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap player3 {
            get {
                object obj = ResourceManager.GetObject("player3", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap player4 {
            get {
                object obj = ResourceManager.GetObject("player4", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
    }
}

```

### MonopolyWinForms\Room\Create_Room.cs
```cs
﻿using MonopolyWinForms.Services;
using System;
using System.Drawing;
using System.Net;
using System.Threading.Tasks;
using System.Windows.Forms;
using MonopolyWinForms.Login_Signup;

namespace MonopolyWinForms.Room
{
    public partial class Create_Room : Form
    {
        private TextBox txtRoomName, txtHostIP;
        private ComboBox cmbPlayTime, cmbMaxPlayers;
        private Button btnCreate;

        private const int FixedPort = 8800; // Port TCP cố định

        public Create_Room()
        {
            InitializeForm();
            InitializeUI();
            this.AcceptButton = btnCreate;

            // Gán user ID khi mở form (ví dụ lấy username Windows)
            SessionManager.CurrentUserId = Environment.UserName;
        }

        private void InitializeForm()
        {
            this.Text = "Tạo phòng chơi";
            this.Size = new Size(480, 600);
            this.StartPosition = FormStartPosition.CenterScreen;
            this.FormBorderStyle = FormBorderStyle.FixedDialog;
            this.MaximizeBox = false;
        }

        private void InitializeUI()
        {
            int top = 30, spacing = 80;

            AddLabel("Tên phòng:", top);
            txtRoomName = AddTextBox(top);
            top += spacing;

            AddLabel("IP Chủ phòng:", top);
            txtHostIP = AddTextBox(top);
            txtHostIP.ReadOnly = true;
            txtHostIP.Text = GetLocalIPAddress();
            top += spacing;

            AddLabel("Cổng (port):", top);
            var txtPort = AddTextBox(top);
            txtPort.ReadOnly = true;
            txtPort.Text = FixedPort.ToString();
            top += spacing;

            AddLabel("Số người tối đa:", top);
            cmbMaxPlayers = new ComboBox
            {
                Location = new Point(200, top),
                Size = new Size(180, 30),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Font = new Font("Segoe UI", 12)
            };
            cmbMaxPlayers.Items.AddRange(new object[] { "2", "3", "4" });
            cmbMaxPlayers.SelectedIndex = 0;
            this.Controls.Add(cmbMaxPlayers);
            top += spacing;

            AddLabel("Thời gian chơi (phút):", top);
            cmbPlayTime = new ComboBox
            {
                Location = new Point(200, top),
                Size = new Size(180, 30),
                DropDownStyle = ComboBoxStyle.DropDownList,
                Font = new Font("Segoe UI", 12)
            };
            cmbPlayTime.Items.AddRange(new object[] { "30", "45", "60" });
            cmbPlayTime.SelectedIndex = 0;
            this.Controls.Add(cmbPlayTime);
            top += spacing;

            btnCreate = new Button
            {
                Text = "Tạo phòng",
                Location = new Point(130, top + 10),
                Size = new Size(150, 45),
                Font = new Font("Segoe UI", 14)
            };
            btnCreate.Click += async (s, e) => await BtnCreate_Click();
            this.Controls.Add(btnCreate);
        }

        private void AddLabel(string text, int top)
        {
            var label = new Label
            {
                Text = text,
                Location = new Point(30, top),
                Size = new Size(160, 30),
                Font = new Font("Segoe UI", 12)
            };
            this.Controls.Add(label);
        }

        private TextBox AddTextBox(int top)
        {
            var textBox = new TextBox
            {
                Location = new Point(200, top),
                Size = new Size(180, 30),
                Font = new Font("Segoe UI", 12)
            };
            this.Controls.Add(textBox);
            return textBox;
        }

        private string GetLocalIPAddress()
        {
            var host = Dns.GetHostEntry(Dns.GetHostName());
            foreach (var ip in host.AddressList)
            {
                if (ip.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                    return ip.ToString();
            }
            return "127.0.0.1";
        }

        private async Task BtnCreate_Click()
        {
            if (!Session.IsLoggedIn)
            {
                MessageBox.Show("Vui lòng đăng nhập trước khi tạo phòng.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            string roomName = txtRoomName.Text.Trim();
            
            // Validate room name
            if (string.IsNullOrEmpty(roomName))
            {
                MessageBox.Show("Vui lòng nhập tên phòng.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            try
            {
                string roomId = Guid.NewGuid().ToString();
                var roomInfo = new RoomInfo
                {
                    RoomId = roomId,
                    RoomName = roomName,
                    HostId = Session.UserId,  // Sử dụng UserId từ Session
                    HostIP = GetLocalIPAddress(),
                    Port = FixedPort,
                    MaxPlayers = int.Parse(cmbMaxPlayers.SelectedItem.ToString()),
                    PlayTime = int.Parse(cmbPlayTime.SelectedItem.ToString()),
                    ReadyPlayers = new List<string> { Session.UserName },
                    PlayerDisplayNames = new List<string> { Session.UserName },  // Sử dụng UserName từ Session
                    PlayerIds = new List<string> { Session.UserId },
                    IsStarted = false,
                    CreatedAt = DateTime.UtcNow
                };

                var firebase = new FirebaseService();
                await firebase.CreateRoomAsync(roomId, roomInfo);

                // Cập nhật session
                Session.JoinRoom(roomId, true);

                var lobby = new Waiting_Room_Host();
                lobby.Show();
                this.Hide();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi tạo phòng: {ex.Message}", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }
    }
}

```

### MonopolyWinForms\Room\Create_Room.Designer.cs
```cs
﻿namespace MonopolyWinForms.Room
{
    partial class Create_Room
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Text = "Create_Room";
        }

        #endregion
    }
}
```

### MonopolyWinForms\Room\JoinRoom.cs
```cs
﻿using MonopolyWinForms.Login_Signup;
using MonopolyWinForms.Services;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace MonopolyWinForms.Room
{
    public partial class JoinRoom: Form
    {
        private DataGridView dgvRooms;
        private Button btnCreateRoom;
        private Button btnJoinRoom;
        private System.Windows.Forms.Timer refreshTimer;
        private Label lblStatus;
        private Dictionary<string, DateTime> lastRoomUpdate = new Dictionary<string, DateTime>();

        public JoinRoom()
        {
            InitializeComponent();
            SetupUI();
            StartRoomRefreshTimer();
        }

        private void StartRoomRefreshTimer()
        {
            refreshTimer = new System.Windows.Forms.Timer();
            refreshTimer.Interval = 500;
            refreshTimer.Tick += async (s, e) =>
            {
                await LoadRoomsFromFirebase();
            };
            refreshTimer.Start();
        }

        protected override void OnFormClosing(FormClosingEventArgs e)
        {
            refreshTimer?.Stop();
            refreshTimer?.Dispose();
            base.OnFormClosing(e);
        }

        private void SetupUI()
        {
            // Form cơ bản
            this.Text = "Chọn phòng";
            this.Size = new Size(1140, 800);
            this.StartPosition = FormStartPosition.CenterScreen;
            this.FormBorderStyle = FormBorderStyle.FixedSingle;
            this.MaximizeBox = false;
            this.BackColor = Color.FromArgb(240, 240, 240);

            // Panel chính
            Panel mainPanel = new Panel
            {
                Dock = DockStyle.Fill,
                Padding = new Padding(20)
            };
            this.Controls.Add(mainPanel);

            // Tiêu đề với hiệu ứng gradient
            Label lblTitle = new Label
            {
                Text = "CHỌN PHÒNG CHƠI",
                Font = new Font("Segoe UI", 32, FontStyle.Bold),
                TextAlign = ContentAlignment.MiddleCenter,
                Dock = DockStyle.Top,
                Height = 100,
                ForeColor = Color.FromArgb(44, 62, 80)
            };
            mainPanel.Controls.Add(lblTitle);

            // Label trạng thái
            lblStatus = new Label
            {
                Text = "Đang tải danh sách phòng...",
                Font = new Font("Segoe UI", 12),
                ForeColor = Color.FromArgb(52, 152, 219),
                TextAlign = ContentAlignment.MiddleCenter,
                Dock = DockStyle.Top,
                Height = 30
            };
            mainPanel.Controls.Add(lblStatus);

            // Panel cho DataGridView
            Panel gridPanel = new Panel
            {
                Location = new Point(50, 150),
                Size = new Size(1040, 500),
                BackColor = Color.White,
                BorderStyle = BorderStyle.FixedSingle
            };
            mainPanel.Controls.Add(gridPanel);

            // DataGridView với thiết kế mới
            dgvRooms = new DataGridView
            {
                Dock = DockStyle.Fill,
                ReadOnly = true,
                AllowUserToAddRows = false,
                AllowUserToDeleteRows = false,
                MultiSelect = false,
                SelectionMode = DataGridViewSelectionMode.FullRowSelect,
                ColumnHeadersHeightSizeMode = DataGridViewColumnHeadersHeightSizeMode.AutoSize,
                Font = new Font("Segoe UI", 12),
                RowTemplate = { Height = 50 },
                BackgroundColor = Color.White,
                BorderStyle = BorderStyle.None,
                EditMode = DataGridViewEditMode.EditProgrammatically,
                RowHeadersVisible = false,
                AllowUserToResizeColumns = false,
                AllowUserToResizeRows = false,
                CellBorderStyle = DataGridViewCellBorderStyle.SingleHorizontal,
                GridColor = Color.FromArgb(224, 224, 224)
            };

            // Tùy chỉnh header
            dgvRooms.EnableHeadersVisualStyles = false;
            dgvRooms.ColumnHeadersDefaultCellStyle.BackColor = Color.FromArgb(52, 152, 219);
            dgvRooms.ColumnHeadersDefaultCellStyle.ForeColor = Color.White;
            dgvRooms.ColumnHeadersDefaultCellStyle.Font = new Font("Segoe UI", 12, FontStyle.Bold);
            dgvRooms.ColumnHeadersHeight = 50;

            // Thêm cột
            dgvRooms.Columns.Add("RoomName", "Tên phòng");
            dgvRooms.Columns.Add("HostName", "Chủ phòng");
            dgvRooms.Columns.Add("PlayerCount", "Số người");
            dgvRooms.Columns.Add("CreatedAt", "Thời gian tạo");

            // Căn giữa và đặt width cố định cho cột
            dgvRooms.Columns["RoomName"].Width = 300;
            dgvRooms.Columns["HostName"].Width = 300;
            dgvRooms.Columns["PlayerCount"].Width = 200;
            dgvRooms.Columns["CreatedAt"].Width = 200;

            foreach (DataGridViewColumn column in dgvRooms.Columns)
            {
                column.DefaultCellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;
                column.HeaderCell.Style.Alignment = DataGridViewContentAlignment.MiddleCenter;
                column.AutoSizeMode = DataGridViewAutoSizeColumnMode.None;
                column.ReadOnly = true;
                column.Resizable = DataGridViewTriState.False;
            }

            gridPanel.Controls.Add(dgvRooms);

            // Panel cho các nút
            Panel buttonPanel = new Panel
            {
                Location = new Point(50, 670),
                Size = new Size(1040, 80),
                BackColor = Color.Transparent
            };
            mainPanel.Controls.Add(buttonPanel);

            // Nút Tạo phòng với thiết kế mới
            btnCreateRoom = new Button
            {
                Text = "Tạo phòng",
                Size = new Size(200, 60),
                Location = new Point(320, 10),
                Font = new Font("Segoe UI", 14, FontStyle.Bold),
                BackColor = Color.FromArgb(46, 204, 113),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Cursor = Cursors.Hand
            };
            btnCreateRoom.FlatAppearance.BorderSize = 0;
            btnCreateRoom.Click += BtnCreateRoom_Click;
            buttonPanel.Controls.Add(btnCreateRoom);

            // Nút Vào phòng với thiết kế mới
            btnJoinRoom = new Button
            {
                Text = "Vào phòng",
                Size = new Size(200, 60),
                Location = new Point(620, 10),
                Font = new Font("Segoe UI", 14, FontStyle.Bold),
                BackColor = Color.FromArgb(52, 152, 219),
                ForeColor = Color.White,
                FlatStyle = FlatStyle.Flat,
                Cursor = Cursors.Hand
            };
            btnJoinRoom.FlatAppearance.BorderSize = 0;
            btnJoinRoom.Click += BtnJoinRoom_Click;
            buttonPanel.Controls.Add(btnJoinRoom);

            // Thêm hiệu ứng hover cho các nút
            btnCreateRoom.MouseEnter += (s, e) => btnCreateRoom.BackColor = Color.FromArgb(39, 174, 96);
            btnCreateRoom.MouseLeave += (s, e) => btnCreateRoom.BackColor = Color.FromArgb(46, 204, 113);
            btnJoinRoom.MouseEnter += (s, e) => btnJoinRoom.BackColor = Color.FromArgb(41, 128, 185);
            btnJoinRoom.MouseLeave += (s, e) => btnJoinRoom.BackColor = Color.FromArgb(52, 152, 219);
        }

        private void BtnCreateRoom_Click(object sender, EventArgs e)
        {
            Create_Room createRoomForm = new Create_Room();
            createRoomForm.Show();
            this.Hide();
        }

        private async void BtnJoinRoom_Click(object sender, EventArgs e)
        {
            if (!Session.IsLoggedIn)
            {
                MessageBox.Show("Vui lòng đăng nhập trước khi tham gia phòng.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            if (dgvRooms.SelectedRows.Count > 0)
            {
                string roomName = dgvRooms.SelectedRows[0].Cells["RoomName"].Value.ToString();
                var firebase = new FirebaseService();
                var rooms = await firebase.GetAllRoomsAsync();
                string roomId = rooms?.FirstOrDefault(r => r.Value.RoomName == roomName).Key;

                if (roomId != null)
                {
                    var room = await firebase.GetRoomAsync(roomId);
                    
                    if (room.CurrentPlayers >= room.MaxPlayers)
                    {
                        MessageBox.Show("Phòng đã đầy.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    if (room.IsStarted)
                    {
                        MessageBox.Show("Phòng đã bắt đầu chơi.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    if (Session.CurrentRoomId != null)
                    {
                        MessageBox.Show("Bạn đang trong một phòng khác. Vui lòng thoát phòng hiện tại trước.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                        return;
                    }

                    try
                    {
                        room.PlayerDisplayNames.Add(Session.UserName);
                        room.PlayerIds.Add(Session.UserId);
                        await firebase.CreateRoomAsync(roomId, room);

                        Session.JoinRoom(roomId, false);

                        Waiting_Room_Client waitingRoomClientForm = new Waiting_Room_Client(roomId);
                        waitingRoomClientForm.Show();
                        this.Hide();
                    }
                    catch (Exception ex)
                    {
                        MessageBox.Show($"Lỗi khi tham gia phòng: {ex.Message}", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                    }
                }
                else
                {
                    MessageBox.Show("Không tìm thấy phòng này.", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
            else
            {
                MessageBox.Show("Vui lòng chọn một phòng để vào.");
            }
        }

        private async Task LoadRoomsFromFirebase()
        {
            try
            {
                var firebase = new FirebaseService();
                var rooms = await firebase.GetAllRoomsAsync();

                if (rooms != null)
                {
                    var currentRooms = new Dictionary<string, DateTime>();
                    var newRooms = new List<string>();

                    // Lọc và sắp xếp phòng
                    var availableRooms = rooms
                        .Where(r => !r.Value.IsStarted && r.Value.CurrentPlayers < r.Value.MaxPlayers)
                        .OrderByDescending(r => r.Value.CreatedAt)
                        .ToList();

                    // Kiểm tra phòng mới
                    foreach (var room in availableRooms)
                    {
                        currentRooms[room.Key] = room.Value.CreatedAt;
                        if (!lastRoomUpdate.ContainsKey(room.Key))
                        {
                            newRooms.Add(room.Key);
                        }
                    }

                    // Cập nhật UI
                    if (InvokeRequired)
                    {
                        Invoke(new Action(() => UpdateRoomsUI(availableRooms, newRooms)));
                    }
                    else
                    {
                        UpdateRoomsUI(availableRooms, newRooms);
                    }

                    // Cập nhật trạng thái
                    lastRoomUpdate = currentRooms;
                    lblStatus.Text = $"Đã tải {availableRooms.Count} phòng";
                }
            }
            catch (Exception ex)
            {
                lblStatus.Text = "Lỗi khi tải danh sách phòng";
                MessageBox.Show("Lỗi khi tải phòng: " + ex.Message);
            }
        }

        private void UpdateRoomsUI(List<KeyValuePair<string, RoomInfo>> rooms, List<string> newRooms)
        {
            dgvRooms.Rows.Clear();

            foreach (var room in rooms)
            {
                var row = dgvRooms.Rows.Add(
                    room.Value.RoomName,
                    room.Value.HostIP,
                    $"{room.Value.CurrentPlayers}/{room.Value.MaxPlayers}",
                    room.Value.CreatedAt.ToString("HH:mm:ss dd/MM/yyyy")
                );

                // Đánh dấu phòng mới
                if (newRooms.Contains(room.Key))
                {
                    dgvRooms.Rows[row].DefaultCellStyle.BackColor = Color.FromArgb(230, 255, 230);
                    dgvRooms.Rows[row].DefaultCellStyle.SelectionBackColor = Color.FromArgb(200, 255, 200);
                }
            }
        }
    }
}

```

### MonopolyWinForms\Room\JoinRoom.Designer.cs
```cs
﻿namespace MonopolyWinForms.Room
{
    partial class JoinRoom
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            this.components = new System.ComponentModel.Container();
            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
            this.ClientSize = new System.Drawing.Size(800, 450);
            this.Text = "Room_Selection";
        }

        #endregion
    }
}
```

### MonopolyWinForms\Room\RoomInfo.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.Room
{
    public class RoomInfo
    {
        public string RoomId { get; set; } = Guid.NewGuid().ToString();
        public string RoomName { get; set; }
        public string HostId { get; set; }
        public string HostIP { get; set; }
        public int Port { get; set; }
        public int MaxPlayers { get; set; }
        public int PlayTime { get; set; }
        public List<string> PlayerIds { get; set; } = new List<string>();
        public List<string> PlayerDisplayNames { get; set; } = new List<string>();
        public List<string> ReadyPlayers { get; set; } = new List<string>();
        public bool IsStarted { get; set; } = false;
        public DateTime CreatedAt { get; set; } = DateTime.Now;

        public int CurrentPlayers => PlayerDisplayNames?.Count ?? 0;

        public override string ToString()
        {
            return $"{RoomName} [{CurrentPlayers}/{MaxPlayers}] - {HostIP}:{Port}" + (IsStarted ? " (Đang chơi)" : "");
        }

    }
}

```

### MonopolyWinForms\Room\Waiting_Room_Client.cs
```cs
﻿using MonopolyWinForms.Services;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;
using MonopolyWinForms.Login_Signup;

namespace MonopolyWinForms.Room
{
    public partial class Waiting_Room_Client: Form
    {
        private string roomId;
        private FirebaseService firebase;
        private System.Windows.Forms.Timer refreshTimer;
        private bool isReady = false;

        public Waiting_Room_Client(string roomId)
        {
            InitializeComponent();
            this.roomId = roomId;
            firebase = new FirebaseService();

            refreshTimer = new System.Windows.Forms.Timer();
            refreshTimer.Interval = 3000;
            refreshTimer.Tick += RefreshTimer_Tick;
            refreshTimer.Start();

            this.FormClosing += Waiting_Room_Client_FormClosing;

            // Đăng ký event handler
            GameManager.OnPlayerLeft += HandlePlayerLeft;
        }

        private async void RefreshTimer_Tick(object sender, EventArgs e)
        {
            var room = await firebase.GetRoomAsync(roomId);
            if (room == null)
            {
                refreshTimer.Stop();
                this.Close();
                return;
            }

            if (room.IsStarted)
            {
                refreshTimer.Stop();

                //Khởi tạo game cho client
                GameManager.StartGame(Session.CurrentRoomId, room.PlayerDisplayNames, room.PlayTime);
                Form mainFrom = new MainForm();
                mainFrom.Show();
                this.Hide();
                return;
            }

            if (room.PlayerDisplayNames.Count <= 1)
            {
                refreshTimer.Stop();
                this.Close();
                return;
            }

            txb_RoomName.Text = room.RoomName;
            UpdatePlayerNames(room.PlayerDisplayNames);
        }

        private void UpdatePlayerNames(List<string> playerNames)
        {
            TextBox[] playerTextBoxes = { txb_player1, txb_player2, txb_player3, txb_player4 };

            for (int i = 0; i < playerTextBoxes.Length; i++)
            {
                if (i < playerNames.Count)
                    playerTextBoxes[i].Text = playerNames[i];
                else
                    playerTextBoxes[i].Text = "";
            }
        }

        private async void  Waiting_Room_Client_FormClosing(object sender, FormClosingEventArgs e)
        {
            // Dừng timer
            refreshTimer.Stop();

            // Nếu game đã bắt đầu, không cần xử lý thoát phòng
            if (GameManager.IsGameStarted)
            {
                return;
            }

            // Xử lý thoát phòng như cũ
            if (Session.CurrentRoomId != null)
            {
                try
                {
                    var room = await firebase.GetRoomAsync(Session.CurrentRoomId);
                    if (room != null)
                    {
                        if (room.PlayerDisplayNames.Contains(Session.UserName))
                        {
                            room.PlayerDisplayNames.Remove(Session.UserName);
                            
                            if (room.PlayerDisplayNames.Count == 0)
                            {
                                await firebase.DeleteRoomAsync(Session.CurrentRoomId);
                            }
                            else
                            {
                                await firebase.CreateRoomAsync(Session.CurrentRoomId, room);
                            }
                        }
                    }
                    Session.LeaveRoom();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Lỗi khi thoát phòng: {ex.Message}", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }

            JoinRoom joinRoomForm = new JoinRoom();
            joinRoomForm.Show();
        }

        private void btn_Out_Click(object sender, EventArgs e)
        {
            this.Close();
        }

        private async void btn_Ready_Click(object sender, EventArgs e)
        {
            try
            {
                var room = await firebase.GetRoomAsync(roomId);
                if (room != null)
                {
                    isReady = !isReady;
                    btn_Ready.Text = isReady ? "Hủy sẵn sàng" : "Sẵn sàng";
                    btn_Ready.BackColor = isReady ? Color.Green : Color.SkyBlue;

                    // Cập nhật trạng thái sẵn sàng lên Firebase
                    if (isReady)
                    {
                        if (!room.ReadyPlayers.Contains(Session.UserName))
                        {
                            room.ReadyPlayers.Add(Session.UserName);
                        }
                    }
                    else
                    {
                        room.ReadyPlayers.Remove(Session.UserName);
                    }
                    await firebase.CreateRoomAsync(roomId, room);
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi cập nhật trạng thái: {ex.Message}", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void HandlePlayerLeft(string playerName)
        {
            if (InvokeRequired)
            {
                Invoke(new Action(() => HandlePlayerLeft(playerName)));
                return;
            }

            // Kiểm tra xem form đã đóng chưa
            if (this.IsDisposed || !this.IsHandleCreated)
                return;

            // Hiển thị thông báo
            MessageBox.Show(
                $"{playerName} đã thoát phòng. Phòng sẽ đóng.",
                "Thông báo",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information
            );

            // Dừng timer và polling
            refreshTimer?.Stop();

            // Đóng form và quay về màn hình danh sách phòng
            if (!this.IsDisposed)
            {
                this.Hide();
                var joinRoomForm = new JoinRoom();
                joinRoomForm.Show();
                this.Close();
            }
        }

        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            base.OnFormClosed(e);
            GameManager.OnPlayerLeft -= HandlePlayerLeft;
        }
    }
}

```

### MonopolyWinForms\Room\Waiting_Room_Client.Designer.cs
```cs
﻿namespace MonopolyWinForms.Room
{
    partial class Waiting_Room_Client
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            txb_RoomName = new TextBox();
            txb_player1 = new TextBox();
            txb_player2 = new TextBox();
            txb_player3 = new TextBox();
            txb_player4 = new TextBox();
            pictureBox1 = new PictureBox();
            pictureBox2 = new PictureBox();
            pictureBox3 = new PictureBox();
            pictureBox4 = new PictureBox();
            btn_Out = new Button();
            btn_Ready = new Button();
            ((System.ComponentModel.ISupportInitialize)pictureBox1).BeginInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox2).BeginInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox3).BeginInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox4).BeginInit();
            SuspendLayout();
            // 
            // txb_RoomName
            // 
            txb_RoomName.BackColor = SystemColors.Menu;
            txb_RoomName.Location = new Point(420, 40);
            txb_RoomName.Name = "txb_RoomName";
            txb_RoomName.ReadOnly = true;
            txb_RoomName.TabStop = false;
            txb_RoomName.Size = new Size(300, 27);
            txb_RoomName.TabIndex = 0;
            // 
            // txb_player1
            // 
            txb_player1.BackColor = SystemColors.Menu;
            txb_player1.Location = new Point(20, 170);
            txb_player1.Name = "txb_player1";
            txb_player1.ReadOnly = true;
            txb_player1.TabStop = false;
            txb_player1.Size = new Size(200, 27);
            txb_player1.TabIndex = 1;
            // 
            // txb_player2
            // 
            txb_player2.BackColor = SystemColors.Menu;
            txb_player2.Location = new Point(320, 170);
            txb_player2.Name = "txb_player2";
            txb_player2.ReadOnly = true;
            txb_player2.TabStop = false;
            txb_player2.Size = new Size(200, 27);
            txb_player2.TabIndex = 2;
            // 
            // txb_player3
            // 
            txb_player3.BackColor = SystemColors.Menu;
            txb_player3.Location = new Point(620, 170);
            txb_player3.Name = "txb_player3";
            txb_player3.ReadOnly = true;
            txb_player3.TabStop = false;
            txb_player3.Size = new Size(200, 27);
            txb_player3.TabIndex = 3;
            // 
            // txb_player4
            // 
            txb_player4.BackColor = SystemColors.Menu;
            txb_player4.Location = new Point(920, 170);
            txb_player4.Name = "txb_player4";
            txb_player4.ReadOnly = true;
            txb_player4.TabStop = false;
            txb_player4.Size = new Size(200, 27);
            txb_player4.TabIndex = 4;
            // 
            // pictureBox1
            // 
            pictureBox1.Image = Properties.Resources.player1;
            pictureBox1.Location = new Point(20, 220);
            pictureBox1.Name = "pictureBox1";
            pictureBox1.Size = new Size(200, 300);
            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox1.TabIndex = 5;
            pictureBox1.TabStop = false;
            // 
            // pictureBox2
            // 
            pictureBox2.Image = Properties.Resources.player2;
            pictureBox2.Location = new Point(320, 220);
            pictureBox2.Name = "pictureBox2";
            pictureBox2.Size = new Size(200, 300);
            pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox2.TabIndex = 6;
            pictureBox2.TabStop = false;
            // 
            // pictureBox3
            // 
            pictureBox3.Image = Properties.Resources.player3;
            pictureBox3.Location = new Point(620, 220);
            pictureBox3.Name = "pictureBox3";
            pictureBox3.Size = new Size(200, 300);
            pictureBox3.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox3.TabIndex = 7;
            pictureBox3.TabStop = false;
            // 
            // pictureBox4
            // 
            pictureBox4.Image = Properties.Resources.player4;
            pictureBox4.Location = new Point(920, 220);
            pictureBox4.Name = "pictureBox4";
            pictureBox4.Size = new Size(200, 300);
            pictureBox4.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox4.TabIndex = 8;
            pictureBox4.TabStop = false;
            // 
            // btn_Out
            // 
            btn_Out.Location = new Point(160, 640);
            btn_Out.Name = "btn_Out";
            btn_Out.Size = new Size(200, 50);
            btn_Out.TabIndex = 9;
            btn_Out.Text = "Thoát";
            btn_Out.UseVisualStyleBackColor = true;
            btn_Out.Click += this.btn_Out_Click;
            // 
            // btn_Ready
            // 
            btn_Ready.Location = new Point(760, 640);
            btn_Ready.Name = "btn_Ready";
            btn_Ready.Size = new Size(200, 50);
            btn_Ready.TabIndex = 10;
            btn_Ready.Text = "Sẵn sàng";
            btn_Ready.UseVisualStyleBackColor = true;
            btn_Ready.Click += this.btn_Ready_Click;
            // 
            // Waiting_Room_Host
            // 
            AutoScaleDimensions = new SizeF(8F, 20F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1136, 753);
            Controls.Add(btn_Ready);
            Controls.Add(btn_Out);
            Controls.Add(pictureBox4);
            Controls.Add(pictureBox3);
            Controls.Add(pictureBox2);
            Controls.Add(pictureBox1);
            Controls.Add(txb_player4);
            Controls.Add(txb_player3);
            Controls.Add(txb_player2);
            Controls.Add(txb_player1);
            Controls.Add(txb_RoomName);
            Name = "Waiting_Room_Host";
            Text = "Waiting_Room";
            ((System.ComponentModel.ISupportInitialize)pictureBox1).EndInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox2).EndInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox3).EndInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox4).EndInit();
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private TextBox txb_RoomName;
        private TextBox txb_player1;
        private TextBox txb_player2;
        private TextBox txb_player3;
        private TextBox txb_player4;
        private PictureBox pictureBox1;
        private PictureBox pictureBox2;
        private PictureBox pictureBox3;
        private PictureBox pictureBox4;
        private Button btn_Out;
        private Button btn_Ready;
    }
}
```

### MonopolyWinForms\Room\Waiting_Room_Host.cs
```cs
﻿using MonopolyWinForms.Services;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using MonopolyWinForms.Login_Signup;

namespace MonopolyWinForms.Room
{
    public partial class Waiting_Room_Host : Form
    {
        private CancellationTokenSource _cts;
        private FirebaseService _firebase;

        public Waiting_Room_Host()
        {
            InitializeComponent();
            this.FormClosing += Waiting_Room_Host_FormClosing;
            this.Load += Waiting_Room_Host_Load;

            // Đăng ký event handler
            GameManager.OnPlayerLeft += HandlePlayerLeft;
        }

        private async void Waiting_Room_Host_Load(object sender, EventArgs e)
        {
            _firebase = new FirebaseService();
            _cts = new CancellationTokenSource();
            await StartPollingPlayers(_cts.Token);
        }

        private async Task StartPollingPlayers(CancellationToken token)
        {
            while (!token.IsCancellationRequested)
            {
                try
                {
                    var room = await _firebase.GetRoomAsync(Session.CurrentRoomId);
                    if (room != null)
                    {
                        if (InvokeRequired)
                        {
                            this.Invoke(new Action(() =>
                            {
                                UpdateRoomInfo(room);
                            }));
                        }
                        else
                        {
                            UpdateRoomInfo(room);
                        }
                    }
                }
                catch
                {
                    // Log lỗi nếu cần
                }

                await Task.Delay(500);
            }
        }

        private void UpdateRoomInfo(RoomInfo room)
        {
            txb_RoomName.Text = room.RoomName;
            UpdatePlayerNames(room.PlayerDisplayNames);
            
            // Cập nhật trạng thái nút Bắt đầu
            btn_Play.Enabled = room.CurrentPlayers >= 2 && 
                              room.PlayerDisplayNames.All(p => room.ReadyPlayers.Contains(p));
        }

        private void UpdatePlayerNames(List<string> playerNames)
        {
            TextBox[] playerTextBoxes = { txb_player1, txb_player2, txb_player3, txb_player4 };

            for (int i = 0; i < playerTextBoxes.Length; i++)
            {
                if (i < playerNames.Count)
                    playerTextBoxes[i].Text = playerNames[i];
                else
                    playerTextBoxes[i].Text = ""; // Trống nếu chưa có người chơi
            }
        }

        private async void Waiting_Room_Host_FormClosing(object sender, FormClosingEventArgs e)
        {
            _cts?.Cancel();

            if (Session.IsHost && Session.CurrentRoomId != null)
            {
                try
                {
                    var room = await _firebase.GetRoomAsync(Session.CurrentRoomId);
                    if (room != null)
                    {
                        // Nếu còn người chơi khác trong phòng
                        if (room.PlayerDisplayNames.Count > 1)
                        {
                            // Chuyển quyền host cho người chơi đầu tiên khác host hiện tại
                            string newHostName = room.PlayerDisplayNames.FirstOrDefault(p => p != Session.UserName);
                            if (newHostName != null)
                            {
                                room.HostId = newHostName;
                                room.HostIP = "localhost"; // Hoặc lấy IP của người chơi mới
                                await _firebase.CreateRoomAsync(Session.CurrentRoomId, room);
                            }
                        }
                        else
                        {
                            // Nếu không còn ai trong phòng, xóa phòng
                            await _firebase.DeleteRoomAsync(Session.CurrentRoomId);
                        }
                    }
                    Session.LeaveRoom();
                    var roomListForm = new JoinRoom();
                    roomListForm.Show();
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Lỗi khi xử lý thoát phòng: {ex.Message}", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
                }
            }
        }

        private void btn_Out_Click(object sender, EventArgs e)
        {
            this.Close(); // Đóng form => kích hoạt FormClosing event
        }

        private async void btn_Play_Click(object sender, EventArgs e)
        {
            try
            {
                var room = await _firebase.GetRoomAsync(Session.CurrentRoomId);
                if (room != null)
                {
                    // Kiểm tra điều kiện bắt đầu
                    if (room.CurrentPlayers < 2)
                    {
                        MessageBox.Show("Cần ít nhất 2 người chơi để bắt đầu.", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    if (!room.PlayerDisplayNames.All(p => room.ReadyPlayers.Contains(p)))
                    {
                        MessageBox.Show("Tất cả người chơi phải sẵn sàng.", "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                        return;
                    }

                    // Cập nhật trạng thái phòng
                    room.IsStarted = true;
                    await _firebase.CreateRoomAsync(Session.CurrentRoomId, room);

                    // Mở form game
                    // TODO: Mở form game mới
                    GameManager.StartGame(Session.CurrentRoomId, room.PlayerDisplayNames, room.PlayTime);
                    File.AppendAllText("log.txt", $"Host called started with roomId: {Session.CurrentRoomId}\n");
                    Form mainForm = new MainForm(); // nếu bạn muốn truyền gameManager sang
                    mainForm.Show();
                    this.Hide();

                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Lỗi khi bắt đầu game: {ex.Message}", "Lỗi", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }
        }

        private void HandlePlayerLeft(string playerName)
        {
            if (InvokeRequired)
            {
                Invoke(new Action(() => HandlePlayerLeft(playerName)));
                return;
            }

            // Kiểm tra xem form đã đóng chưa
            if (this.IsDisposed || !this.IsHandleCreated)
                return;

            // Hiển thị thông báo
            MessageBox.Show(
                $"{playerName} đã thoát phòng. Phòng sẽ đóng.",
                "Thông báo",
                MessageBoxButtons.OK,
                MessageBoxIcon.Information
            );

            // Dừng timer và polling
            _cts?.Cancel();

            // Đóng form và quay về màn hình danh sách phòng
            if (!this.IsDisposed)
            {
                this.Hide();
                var joinRoomForm = new JoinRoom();
                joinRoomForm.Show();
                this.Close();
            }
        }

        protected override void OnFormClosed(FormClosedEventArgs e)
        {
            base.OnFormClosed(e);
            GameManager.OnPlayerLeft -= HandlePlayerLeft;
        }
    }
}

```

### MonopolyWinForms\Room\Waiting_Room_Host.Designer.cs
```cs
﻿namespace MonopolyWinForms.Room
{
    partial class Waiting_Room_Host
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer components = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (components != null))
            {
                components.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void InitializeComponent()
        {
            txb_RoomName = new TextBox();
            txb_player1 = new TextBox();
            txb_player2 = new TextBox();
            txb_player3 = new TextBox();
            txb_player4 = new TextBox();
            pictureBox1 = new PictureBox();
            pictureBox2 = new PictureBox();
            pictureBox3 = new PictureBox();
            pictureBox4 = new PictureBox();
            btn_Out = new Button();
            btn_Play = new Button();
            ((System.ComponentModel.ISupportInitialize)pictureBox1).BeginInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox2).BeginInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox3).BeginInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox4).BeginInit();
            SuspendLayout();
            // 
            // txb_RoomName
            // 
            txb_RoomName.BackColor = SystemColors.Menu;
            txb_RoomName.Location = new Point(420, 40);
            txb_RoomName.Name = "txb_RoomName";
            txb_RoomName.ReadOnly = true;
            txb_RoomName.Size = new Size(300, 27);
            txb_RoomName.TabIndex = 0;
            // 
            // txb_player1
            // 
            txb_player1.BackColor = SystemColors.Menu;
            txb_player1.Location = new Point(20, 170);
            txb_player1.Name = "txb_player1";
            txb_player1.ReadOnly = true;
            txb_player1.TabStop = false;
            txb_player1.Size = new Size(200, 27);
            txb_player1.TabIndex = 1;
            // 
            // txb_player2
            // 
            txb_player2.BackColor = SystemColors.Menu;
            txb_player2.Location = new Point(320, 170);
            txb_player2.Name = "txb_player2";
            txb_player2.ReadOnly = true;
            txb_player2.TabStop = false;
            txb_player2.Size = new Size(200, 27);
            txb_player2.TabIndex = 2;
            // 
            // txb_player3
            // 
            txb_player3.BackColor = SystemColors.Menu;
            txb_player3.Location = new Point(620, 170);
            txb_player3.Name = "txb_player3";
            txb_player3.ReadOnly = true;
            txb_player3.TabStop = false;
            txb_player3.Size = new Size(200, 27);
            txb_player3.TabIndex = 3;
            // 
            // txb_player4
            // 
            txb_player4.BackColor = SystemColors.Menu;
            txb_player4.Location = new Point(920, 170);
            txb_player4.Name = "txb_player4";
            txb_player4.ReadOnly = true;
            txb_player4.TabStop = false;
            txb_player4.Size = new Size(200, 27);
            txb_player4.TabIndex = 4;
            // 
            // pictureBox1
            // 
            pictureBox1.Image = Properties.Resources.player1;
            pictureBox1.Location = new Point(20, 220);
            pictureBox1.Name = "pictureBox1";
            pictureBox1.Size = new Size(200, 300);
            pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox1.TabIndex = 5;
            pictureBox1.TabStop = false;
            // 
            // pictureBox2
            // 
            pictureBox2.Image = Properties.Resources.player2;
            pictureBox2.Location = new Point(320, 220);
            pictureBox2.Name = "pictureBox2";
            pictureBox2.Size = new Size(200, 300);
            pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox2.TabIndex = 6;
            pictureBox2.TabStop = false;
            // 
            // pictureBox3
            // 
            pictureBox3.Image = Properties.Resources.player3;
            pictureBox3.Location = new Point(620, 220);
            pictureBox3.Name = "pictureBox3";
            pictureBox3.Size = new Size(200, 300);
            pictureBox3.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox3.TabIndex = 7;
            pictureBox3.TabStop = false;
            // 
            // pictureBox4
            // 
            pictureBox4.Image = Properties.Resources.player4;
            pictureBox4.Location = new Point(920, 220);
            pictureBox4.Name = "pictureBox4";
            pictureBox4.Size = new Size(200, 300);
            pictureBox4.SizeMode = PictureBoxSizeMode.Zoom;
            pictureBox4.TabIndex = 8;
            pictureBox4.TabStop = false;
            // 
            // btn_Out
            // 
            btn_Out.Location = new Point(160, 640);
            btn_Out.Name = "btn_Out";
            btn_Out.Size = new Size(200, 50);
            btn_Out.TabIndex = 9;
            btn_Out.Text = "Thoát";
            btn_Out.UseVisualStyleBackColor = true;
            btn_Out.Click += this.btn_Out_Click;
            // 
            // btn_Play
            // 
            btn_Play.Location = new Point(760, 640);
            btn_Play.Name = "btn_Play";
            btn_Play.Size = new Size(200, 50);
            btn_Play.TabIndex = 10;
            btn_Play.Text = "Chơi";
            btn_Play.UseVisualStyleBackColor = true;
            btn_Play.Click += this.btn_Play_Click;
            // 
            // Waiting_Room_Host
            // 
            AutoScaleDimensions = new SizeF(8F, 20F);
            AutoScaleMode = AutoScaleMode.Font;
            ClientSize = new Size(1136, 753);
            Controls.Add(btn_Play);
            Controls.Add(btn_Out);
            Controls.Add(pictureBox4);
            Controls.Add(pictureBox3);
            Controls.Add(pictureBox2);
            Controls.Add(pictureBox1);
            Controls.Add(txb_player4);
            Controls.Add(txb_player3);
            Controls.Add(txb_player2);
            Controls.Add(txb_player1);
            Controls.Add(txb_RoomName);
            Name = "Waiting_Room_Host";
            Text = "Waiting_Room";
            ((System.ComponentModel.ISupportInitialize)pictureBox1).EndInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox2).EndInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox3).EndInit();
            ((System.ComponentModel.ISupportInitialize)pictureBox4).EndInit();
            ResumeLayout(false);
            PerformLayout();
        }

        #endregion

        private TextBox txb_RoomName;
        private TextBox txb_player1;
        private TextBox txb_player2;
        private TextBox txb_player3;
        private TextBox txb_player4;
        private PictureBox pictureBox1;
        private PictureBox pictureBox2;
        private PictureBox pictureBox3;
        private PictureBox pictureBox4;
        private Button btn_Out;
        private Button btn_Play;
    }
}
```

### MonopolyWinForms\Services\FirebaseService.cs
```cs
﻿using System.Net.Http;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json;
using System.Collections.Generic;
using MonopolyWinForms.Room;
using MonopolyWinForms.Services;
using Firebase.Database;
using MonopolyWinForms.GameLogic;
using System.Numerics;

public class FirebaseService
{
    private readonly HttpClient _client;
    private readonly string baseUrl = "https://doanmang-8f5af-default-rtdb.asia-southeast1.firebasedatabase.app";
    private Action<string> _logAction;

    public FirebaseService(Action<string> logAction = null)
    {
        _client = new HttpClient();
        _client.DefaultRequestHeaders.Add("Accept", "application/json");
        _client.Timeout = TimeSpan.FromSeconds(30);
        _logAction = logAction;
    }

    private void Log(string message)
    {
        _logAction?.Invoke(message);
    }

    public async Task<RoomInfo> GetRoomAsync(string roomId)
    {
        string url = $"{baseUrl}/rooms/{roomId}.json";
        var response = await _client.GetAsync(url);
        if (!response.IsSuccessStatusCode)
            return null;

        string json = await response.Content.ReadAsStringAsync();
        if (string.IsNullOrEmpty(json) || json == "null")
            return null;

        var room = JsonConvert.DeserializeObject<RoomInfo>(json);
        return room;
    }

    public async Task<Dictionary<string, RoomInfo>> GetAllRoomsAsync()
    {
        string url = $"{baseUrl}/rooms.json";
        var response = await _client.GetAsync(url);
        if (!response.IsSuccessStatusCode)
            return null;

        string json = await response.Content.ReadAsStringAsync();
        if (string.IsNullOrEmpty(json) || json == "null")
            return null;

        return JsonConvert.DeserializeObject<Dictionary<string, RoomInfo>>(json);
    }
    public async Task CreateRoomAsync(string roomId, RoomInfo room)
    {
        string url = $"{baseUrl}/rooms/{roomId}.json";
        string json = JsonConvert.SerializeObject(room);
        var content = new StringContent(json, Encoding.UTF8, "application/json");
        var response = await _client.PutAsync(url, content);
        response.EnsureSuccessStatusCode();
    }

    public async Task DeleteRoomAsync(string roomId)
    {
        string url = $"{baseUrl}/rooms/{roomId}.json";
        var response = await _client.DeleteAsync(url);
        response.EnsureSuccessStatusCode();
    }

    public async Task<GameState> GetGameStateAsync(string roomId)
    {
        try
        {
            // 1. Lấy thông tin cơ bản
            string infoUrl = $"{baseUrl}/gameStates/{roomId}/info.json";
            var infoResponse = await _client.GetAsync(infoUrl);
            if (!infoResponse.IsSuccessStatusCode)
            {
                string errorContent = await infoResponse.Content.ReadAsStringAsync();
                File.AppendAllText("log.txt", $"Error getting info: {errorContent}\n");
                return null;
            }
            string infoJson = await infoResponse.Content.ReadAsStringAsync();
            var info = JsonConvert.DeserializeObject<dynamic>(infoJson);

            // Kiểm tra xem có cần cập nhật không
            if (info == null || info.lastUpdateTime == null)
            {
                return null;
            }

            // Tạo GameState mới với thông tin cơ bản
            var gameState = new GameState
            {
                RoomId = roomId,
                CurrentPlayerIndex = info.currentPlayerIndex,
                IsGameStarted = info.isGameStarted,
                PlayTime = info.PlayTime,
                LastUpdateTime = info.lastUpdateTime
            };

            // 2. Lấy thông tin players
            string playersUrl = $"{baseUrl}/gameStates/{roomId}/players.json";
            var playersResponse = await _client.GetAsync(playersUrl);
            if (!playersResponse.IsSuccessStatusCode)
            {
                string errorContent = await playersResponse.Content.ReadAsStringAsync();
                File.AppendAllText("log.txt", $"Error getting players: {errorContent}\n");
                return null;
            }
            string playersJson = await playersResponse.Content.ReadAsStringAsync();
            var players = JsonConvert.DeserializeObject<List<Player>>(playersJson);
            gameState.Players = players;

            // 3. Lấy thông tin tiles
            string tilesUrl = $"{baseUrl}/gameStates/{roomId}/tiles.json";
            var tilesResponse = await _client.GetAsync(tilesUrl);
            if (!tilesResponse.IsSuccessStatusCode)
            {
                string errorContent = await tilesResponse.Content.ReadAsStringAsync();
                File.AppendAllText("log.txt", $"Error getting tiles: {errorContent}\n");
                return null;
            }
            string tilesJson = await tilesResponse.Content.ReadAsStringAsync();
            var tiles = JsonConvert.DeserializeObject<List<Tile>>(tilesJson);
            gameState.Tiles = tiles;

            return gameState;
        }
        catch (Exception ex)
        {
            File.AppendAllText("log.txt", $"Exception in GetGameStateAsync: {ex.Message}\n");
            throw;
        }
    }

    public async Task UpdateGameStateAsync(GameState gameState)
    {
        try
        {
            // Chỉ cập nhật khi có thay đổi
            var currentState = await GetGameStateAsync(gameState.RoomId);
            if (currentState != null && 
                currentState.LastUpdateTime == gameState.LastUpdateTime)
            {
                return; // Không có thay đổi, không cần cập nhật
            }

            var roomInfo = new
            {
                currentPlayerIndex = gameState.CurrentPlayerIndex,
                isGameStarted = gameState.IsGameStarted,
                PlayTime = gameState.PlayTime,
                lastUpdateTime = DateTime.UtcNow
            };

            // Gửi thông tin phòng
            string roomUrl = $"{baseUrl}/gameStates/{gameState.RoomId}/info.json";
            var response0 = await _client.PutAsync(roomUrl, new StringContent(JsonConvert.SerializeObject(roomInfo)));

            // Gửi thông tin người chơi dưới dạng mảng
            string playersUrl = $"{baseUrl}/gameStates/{gameState.RoomId}/players.json";
            var response1 = await _client.PutAsync(playersUrl, new StringContent(JsonConvert.SerializeObject(gameState.Players)));

            // Gửi thông tin ô đất dưới dạng mảng
            string tilesUrl = $"{baseUrl}/gameStates/{gameState.RoomId}/tiles.json";
            var response2 = await _client.PutAsync(tilesUrl, new StringContent(JsonConvert.SerializeObject(gameState.Tiles)));

            if (!response0.IsSuccessStatusCode || !response1.IsSuccessStatusCode || !response2.IsSuccessStatusCode)
            {
                string errorContent = await response0.Content.ReadAsStringAsync();
                File.AppendAllText("log.txt", $"Error updating game state: {errorContent}\n");
            }
        }
        catch (Exception ex)
        {
            File.AppendAllText("log.txt", $"Error in FirebaseService.UpdateGameStateAsync: {ex.Message}\n");
        }
    }

    // Thêm phương thức gửi tin nhắn chat
    public async Task SendChatMessageAsync(string roomId, object chatMessage)
    {
        try
        {
            string url = $"{baseUrl}/chat/{roomId}.json";
            var content = new StringContent(JsonConvert.SerializeObject(chatMessage), Encoding.UTF8, "application/json");
            var response = await _client.PostAsync(url, content);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            File.AppendAllText("log.txt", $"Error sending chat message: {ex.Message}\n");
            throw;
        }
    }

    // Thêm phương thức lấy tin nhắn chat
    public async Task<Dictionary<string, dynamic>> GetChatMessagesAsync(string roomId)
    {
        try
        {
            string url = $"{baseUrl}/chat/{roomId}.json";
            var response = await _client.GetAsync(url);
            if (!response.IsSuccessStatusCode)
                return null;

            string json = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(json) || json == "null")
                return null;

            // Thêm timestamp nếu chưa có
            var messages = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(json);
            if (messages != null)
            {
                foreach (var message in messages)
                {
                    if (message.Value.Timestamp == null)
                    {
                        message.Value.Timestamp = DateTime.UtcNow;
                    }
                }
            }

            return messages;
        }
        catch (Exception ex)
        {
            File.AppendAllText("log.txt", $"Error getting chat messages: {ex.Message}\n");
            return null;
        }
    }

    public async Task CleanupGameDataAsync(string roomId)
    {
        try
        {
            // Xóa game state
            string gameStateUrl = $"{baseUrl}/gameStates/{roomId}.json";
            await _client.DeleteAsync(gameStateUrl);

            // Xóa chat
            string chatUrl = $"{baseUrl}/chat/{roomId}.json";
            await _client.DeleteAsync(chatUrl);

            // Xóa phòng
            string roomUrl = $"{baseUrl}/rooms/{roomId}.json";
            await _client.DeleteAsync(roomUrl);
        }
        catch (Exception ex)
        {
            Log($"Error cleaning up game data: {ex.Message}");
            throw;
        }
    }

    // Lấy thông tin session của một user
    public async Task<Dictionary<string, dynamic>> GetSessionAsync(string userId)
    {
        try
        {
            string url = $"{baseUrl}/sessions/{userId}.json";
            var response = await _client.GetAsync(url);
            if (!response.IsSuccessStatusCode)
                return null;

            string json = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(json) || json == "null")
                return null;

            return JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(json);
        }
        catch (Exception ex)
        {
            Log($"Error getting session: {ex.Message}");
            return null;
        }
    }

    // Tạo session mới
    public async Task CreateSessionAsync(string userId, object sessionData)
    {
        try
        {
            string url = $"{baseUrl}/sessions/{userId}.json";
            var content = new StringContent(
                JsonConvert.SerializeObject(sessionData),
                Encoding.UTF8,
                "application/json"
            );
            var response = await _client.PutAsync(url, content);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            Log($"Error creating session: {ex.Message}");
            throw;
        }
    }

    // Cập nhật session
    public async Task UpdateSessionAsync(string userId, object sessionData)
    {
        try
        {
            string url = $"{baseUrl}/sessions/{userId}.json";
            var content = new StringContent(
                JsonConvert.SerializeObject(sessionData),
                Encoding.UTF8,
                "application/json"
            );
            var response = await _client.PatchAsync(url, content);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            Log($"Error updating session: {ex.Message}");
            throw;
        }
    }

    // Xóa session
    public async Task DeleteSessionAsync(string userId)
    {
        try
        {
            string url = $"{baseUrl}/sessions/{userId}.json";
            var response = await _client.DeleteAsync(url);
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            Log($"Error deleting session: {ex.Message}");
            throw;
        }
    }

    // Lấy tất cả session đang active
    public async Task<Dictionary<string, dynamic>> GetActiveSessionsAsync()
    {
        try
        {
            string url = $"{baseUrl}/sessions.json";
            var response = await _client.GetAsync(url);
            if (!response.IsSuccessStatusCode)
                return null;

            string json = await response.Content.ReadAsStringAsync();
            if (string.IsNullOrEmpty(json) || json == "null")
                return null;

            var allSessions = JsonConvert.DeserializeObject<Dictionary<string, dynamic>>(json);
            
            // Lọc chỉ lấy các session đang active
            return allSessions?.Where(s => s.Value.isActive == true)
                             .ToDictionary(k => k.Key, v => v.Value);
        }
        catch (Exception ex)
        {
            Log($"Error getting active sessions: {ex.Message}");
            return null;
        }
    }

    // Kiểm tra session có hợp lệ không
    public async Task<bool> ValidateSessionAsync(string userId)
    {
        try
        {
            var session = await GetSessionAsync(userId);
            if (session == null)
                return false;

            // Kiểm tra session có active không
            if (!session.ContainsKey("isActive") || !session["isActive"])
                return false;

            // Kiểm tra thời gian hoạt động cuối
            if (session.ContainsKey("lastActive"))
            {
                var lastActive = DateTime.Parse(session["lastActive"].ToString());
                var timeout = TimeSpan.FromMinutes(30); // Session timeout sau 30 phút
                if (DateTime.UtcNow - lastActive > timeout)
                {
                    // Session hết hạn, cập nhật trạng thái
                    await UpdateSessionAsync(userId, new { isActive = false });
                    return false;
                }
            }

            return true;
        }
        catch (Exception ex)
        {
            Log($"Error validating session: {ex.Message}");
            return false;
        }
    }
}

```

### MonopolyWinForms\Services\GameManager.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonopolyWinForms.Services;
using MonopolyWinForms.GameLogic;
using Newtonsoft.Json;
using MonopolyWinForms.Room;
using System.Net.Http;

namespace MonopolyWinForms.Services
{
    public class GameManager
    {
        public static bool IsGameStarted { get; private set; }
        public static string CurrentRoomId { get; private set; }
        public static int PlayTime { get; private set; }
        public static List<string> Players { get; private set; }
        private static FirebaseService firebase;
        private static System.Windows.Forms.Timer syncTimer;
        private static System.Windows.Forms.Timer chatSyncTimer;
        private static DateTime lastUpdateTime = DateTime.MinValue;
        private static DateTime lastChatUpdateTime = DateTime.MinValue;
        public static event Action<GameState> OnGameStateUpdated;
        public static event Action<string, string> OnChatMessageReceived;
        public static event Action<string> OnPlayerLeft;

        public static void StartGame(string roomId, List<string> players, int playtime)
        {
            try
            {
                File.AppendAllText("log.txt", $"StartGame called with roomId: {roomId}\n");
                IsGameStarted = true;
                CurrentRoomId = roomId;
                Players = players;
                PlayTime = playtime;
                firebase = new FirebaseService();
                File.AppendAllText("log.txt", $"Firebase initialized\n");
                InitializeSyncTimer();
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"❌ Exception in StartGame: {ex.Message}\n");
            }
        }

        private static void InitializeSyncTimer()
        {
            // Timer cho game state
            syncTimer = new System.Windows.Forms.Timer();
            syncTimer.Interval = 500;
            syncTimer.Tick += SyncTimer_Tick;
            syncTimer.Start();

            // Timer cho chat
            chatSyncTimer = new System.Windows.Forms.Timer();
            chatSyncTimer.Interval = 500; // Kiểm tra chat mỗi 500ms
            chatSyncTimer.Tick += ChatSyncTimer_Tick;
            chatSyncTimer.Start();

            // Khởi tạo chat listener
            _ = InitializeChatListener();
        }

        private static async Task InitializeChatListener()
        {
            try
            {
                var chatMessages = await firebase.GetChatMessagesAsync(CurrentRoomId);
                if (chatMessages != null)
                {
                    foreach (var message in chatMessages)
                    {
                        OnChatMessageReceived?.Invoke(
                            message.Value.SenderName.ToString(),
                            message.Value.Message.ToString()
                        );
                    }
                }
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error initializing chat listener: {ex.Message}\n");
            }
        }

        private static async void SyncTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (!IsGameStarted || string.IsNullOrEmpty(CurrentRoomId))
                {
                    return;
                }

                var gameState = await firebase.GetGameStateAsync(CurrentRoomId);
                if (gameState != null && gameState.LastUpdateTime > lastUpdateTime)
                {
                    lastUpdateTime = gameState.LastUpdateTime;
                    OnGameStateUpdated?.Invoke(gameState);
                }
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in SyncTimer_Tick: {ex.Message}\n");
            }
        }

        private static async void ChatSyncTimer_Tick(object sender, EventArgs e)
        {
            try
            {
                if (!IsGameStarted || string.IsNullOrEmpty(CurrentRoomId))
                {
                    return;
                }

                var chatMessages = await firebase.GetChatMessagesAsync(CurrentRoomId);
                if (chatMessages != null)
                {
                    foreach (var message in chatMessages)
                    {
                        // Chỉ gửi tin nhắn mới
                        var messageTime = DateTime.Parse(message.Value.Timestamp.ToString());
                        if (messageTime > lastChatUpdateTime)
                        {
                            OnChatMessageReceived?.Invoke(
                                message.Value.SenderName.ToString(),
                                message.Value.Message.ToString()
                            );
                            lastChatUpdateTime = messageTime;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in ChatSyncTimer_Tick: {ex.Message}\n");
            }
        }

        public static async Task UpdateGameState(GameState gameState)
        {
            try
            {
                File.AppendAllText("log.txt", $"Game manager ở đây\n");
                await firebase.UpdateGameStateAsync(gameState);
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in GameManager.UpdateGameState: {ex.Message}\n");
            }
        }

        public static async Task<GameState> GetLatestGameState()
        {
            try
            {
                return await firebase.GetGameStateAsync(CurrentRoomId);
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in GameManager.GetLatestGameState: {ex.Message}\n");
                return null;
            }
        }


        public static void EndGame()
        {
            IsGameStarted = false;
            CurrentRoomId = null;
            Players = null;
            syncTimer?.Stop();
            chatSyncTimer?.Stop(); // Dừng timer chat
            OnGameStateUpdated = null;
            OnChatMessageReceived = null;
        }

        public static async Task SendChatMessage(string roomId, object chatMessage)
        {
            try
            {
                await firebase.SendChatMessageAsync(roomId, chatMessage);
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error sending chat message: {ex.Message}\n");
            }
        }

        public static async Task CleanupGameData(string roomId)
        {
            try
            {
                await firebase.CleanupGameDataAsync(roomId);
                EndGame();
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in GameManager.CleanupGameData: {ex.Message}\n");
            }
        }

        public static async Task<RoomInfo> GetRoomAsync(string roomId)
        {
            try
            {
                return await firebase.GetRoomAsync(roomId);
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in GameManager.GetRoomAsync: {ex.Message}\n");
                return null;
            }
        }

        public static async Task UpdateRoomAsync(string roomId, RoomInfo room)
        {
            try
            {
                await firebase.CreateRoomAsync(roomId, room);
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in GameManager.UpdateRoomAsync: {ex.Message}\n");
            }
        }

        public static async Task NotifyPlayerLeft(string roomId, string playerName)
        {
            try
            {
                // Kiểm tra xem game đã kết thúc chưa
                if (!IsGameStarted)
                {
                    return;
                }

                // Đánh dấu game đã kết thúc
                IsGameStarted = false;

                // Gửi thông báo chat trước
                await SendChatMessage(roomId, new
                {
                    SenderName = "Hệ thống",
                    Message = $"{playerName} đã thoát game. Trò chơi kết thúc!",
                    Timestamp = DateTime.UtcNow
                });

                // Kích hoạt event để các form khác biết
                OnPlayerLeft?.Invoke(playerName);

                // Đợi một chút để đảm bảo thông báo được gửi và nhận
                await Task.Delay(500);

                // Cleanup dữ liệu game
                await CleanupGameData(roomId);

                // Reset trạng thái game
                CurrentRoomId = null;
                Players = null;
                syncTimer?.Stop();
                chatSyncTimer?.Stop();
            }
            catch (Exception ex)
            {
                File.AppendAllText("log.txt", $"Error in NotifyPlayerLeft: {ex.Message}\n");
            }
        }
    }
}
```

### MonopolyWinForms\Services\GameState.cs
```cs
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using MonopolyWinForms.GameLogic;
using MonopolyWinForms.Login_Signup;
namespace MonopolyWinForms.Services
{
    public class GameState
    {
        public string RoomId { get; set; }
        public int CurrentPlayerIndex { get; set; }
        public int PlayTime { get; set; }
        public List<Player> Players { get; set; }
        public List<Tile> Tiles { get; set; }
        public bool IsGameStarted { get; set; }
        public DateTime LastUpdateTime { get; set; }

        public GameState()
        {
            Players = new List<Player>();
            Tiles = new List<Tile>();
            LastUpdateTime = DateTime.UtcNow;
        }

        public GameState(string roomId, int currentPlayerIndex, List<Player> players, List<Tile> tiles)
        {
            RoomId = roomId;
            CurrentPlayerIndex = currentPlayerIndex;
            Players = players;
            Tiles = tiles;
            IsGameStarted = true;
            LastUpdateTime = DateTime.UtcNow;
        }
    }
}

```

### MonopolyWinForms\Services\SessionManager.cs
```cs
﻿using MonopolyWinForms.Room;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MonopolyWinForms.Services
{
    class SessionManager
    {
        public static string CurrentUserId { get; set; }
        public static string CurrentUserDisplayName { get; set; }
        public static RoomInfo CurrentRoom { get; set; }
    }
}

```
